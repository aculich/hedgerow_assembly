rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
spec <- dd#
spec <- spec[spec$NetPan == 'net',]#
#
## spec <- spec[spec$Family == 'Syrphidae' |#
##              spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund)
head(nets.all)
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.RData')
ls()
ehad(dd)
hed(dd)
head(dd)
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')
head(dd)
rm(list=ls())
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')
ls()
head(mat)
mat
dim(mat)
dimnames(mat)
apply(mat, c(1,3, mean))
apply(mat, c(1,3), mean)
apply(mat, c(1,2), mean)
apply(mat, c(3,2), mean)
apply(mat, c(3,2), mean, na.rm=TRUE)
apply(mat, c(3,1, 2), mean, na.rm=TRUE)
apply(mat, c(3,1), mean, na.rm=TRUE)
apply(mat, c(3,1), function(x) length(x > 0)/length(!is.na(x)), na.rm=TRUE)
apply(mat, c(3,1), function(x) length(x > 0)/length(!is.na(x)))
apply(mat, c(3,1), function(x) length(x > 0 & !is.na(x))/length(!is.na(x)))
apply(mat, c(3,1), function(x) length(!is.na(x)))
apply(mat, c(3,1), mean, na.rm=TRUE)
apply(mat, c(3,1), count, na.rm=TRUE)
library(plyr)
apply(mat, c(3,1), count, na.rm=TRUE)
apply(mat, c(3,1), count)
apply(mat, c(3,1), function(x) sum(x > 0))
apply(mat, c(3,1), function(x) sum(x > 0, na.rm=TRUE))
apply(mat, c(3,1), function(x) sum(x, na.rm=TRUE))
apply(mat, c(3,1), function(x) sum(x > 0, na.rm=TRUE))
apply(mat, c(3,1), function(x) sum(x >= 0, na.rm=TRUE))
apply(mat, c(3,1), function(x) sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
spec <- dd#
spec <- spec[spec$NetPan == 'net',]#
#
## spec <- spec[spec$Family == 'Syrphidae' |#
##              spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
spec <- dd#
spec <- spec[spec$NetPan == 'net',]#
#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})
occ
rownames(occ)
colnames(occ)
spec$Site
colnames(occ)
head(spec)
findOcc <- function(x){#
  mat[x$GenusSpecies, paste(x$Site, x$SiteStatusBACI, sep=":")]#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)
findOcc <- function(x){#
  mat[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"], sep=":")]#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)
findOcc <- function(x){#
  mat[x[,"GenusSpecies"], paste(x[,"Site"], x[,"SiteStatusBACI"], sep=":")]#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)
findOcc <- function(x){#
  browser()#
  mat[x[,"GenusSpecies"], paste(x[,"Site"], x[,"SiteStatusBACI"], sep=":")]#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)

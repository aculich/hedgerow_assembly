rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                          sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
## abundance of each species for all site-date combinations#
make.by.species <- function(spec,#
                            sr.sched,#
                            site.date,#
                            type="PlantGenusSpecies"){#
  ## number of species at each site-date#
  all.sp <- aggregate(list(Abund=spec[, type]),#
                      list(Site=spec$Site,#
                           Date=spec$Date,#
                           GenusSpecies=spec[,type]),#
                      length)#
  ## all site-date species combinations#
  sp <- expand.grid(#
    SiteDate = unique(paste(sr.sched$Site,#
      sr.sched$Date,#
      sep=';')),#
    GenusSpecies=unique(spec[,type]),#
    Occ=0)#
  ## fill in the matrix of all combinations#
  match.dates <- match(paste(all.sp$Site,#
                       all.sp$Date,#
                       all.sp$GenusSpecies,#
                       sep=';'),#
                 paste(sp$SiteDate,#
                       sp$GenusSpecies,#
                       sep=';'))#
#
  sp$Occ[!is.na(match.dates)] <- 1#
  ## create site, date, genus etc. columns#
  sp$Site <- sapply(strsplit(as.character(sp$SiteDate), ";"),#
                    function(x) x[1])#
  sp$Date <- as.Date(sapply(strsplit(as.character(sp$SiteDate), ";"),#
                            function(x) x[2]))#
  sp$Genus <- sapply(strsplit(as.character(sp$GenusSpecies), " "),#
                     function(x) x[1])#
  sp$Year <- format(sp$Date, '%Y')#
  sp$SiteStatus <- spec$SiteStatus[match(sp$Site, spec$Site)]#
  ## drop site-date column#
  sp <- sp[,-1]#
#
  ## make a site by date by species arrary#
  d <- data.frame(pollinator=spec[,type],#
                  site=spec$Site,#
                  date=spec$Date)#
  null.mat <- site.date[rownames(site.date) %in% d$site,]#
  pollinator.id <- id(d$pollinator)#
  browser()#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats),#
               dim=c(dim(mats[[1]]),#
                 length(mats)))#
  dimnames(mat) <- list(site=sites,#
                        date=dates,#
                        species=species)#
#
  write.csv(sp, file=file.path(path.dir, 'sp.csv'),#
            row.names=FALSE)#
  save(sp, file= file.path(path.dir, 'sp.Rdata'))#
  save(mat, file= file.path(path.dir, 'sp_array.Rdata'))#
}
make.by.species(spec, long.site.date, site.date)
sr.sched
head(sp)
Occ == 1
all(sp$Occ == 1)
sp$Occ
mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)
rownames(site.date)
d$site
null.mat <- site.date[rownames(site.date) %in% unique(d$site),]
rownames(null.mat)
haed(all.sp)
head(all.sp)
sp <- expand.grid(#
    SiteDate = unique(paste(sr.sched$Site,#
      sr.sched$Date,#
      sep=';')),#
    GenusSpecies=unique(spec[,type]),#
    Occ=0)
head(sp)
sr.sched
match.dates <- match(paste(all.sp$Site,#
                       all.sp$Date,#
                       all.sp$GenusSpecies,#
                       sep=';'),#
                 paste(sp$SiteDate,#
                       sp$GenusSpecies,#
                       sep=';'))
sp[is.na(match.dates),]
sp$Occ[!is.na(match.dates)] <- 1
head(sp)
sp[1:30,]
sp[1:50,]
sp[1:100,]
sp$Site <- sapply(strsplit(as.character(sp$SiteDate), ";"),#
                    function(x) x[1])#
  sp$Date <- as.Date(sapply(strsplit(as.character(sp$SiteDate), ";"),#
                            function(x) x[2]))#
  sp$Genus <- sapply(strsplit(as.character(sp$GenusSpecies), " "),#
                     function(x) x[1])#
  sp$Year <- format(sp$Date, '%Y')#
  sp$SiteStatus <- spec$SiteStatus[match(sp$Site, spec$Site)]#
  ## drop site-date column#
  sp <- sp[,-1]
head(sp)
null.mat <- site.date#
  pollinator.id <- id(sp$GenusSpecies)
pollinator.id
mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(sp$GenusSpecies), #
                    var1=as.vector(sp$Site),#
                    var2=sp$Date)
sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats),#
               dim=c(dim(mats[[1]]),#
                 length(mats)))
dimnames(mat) <- list(site=sites,#
                        date=dates,#
                        species=species)
head(mat)
mat
dimnames(mat)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                          sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
plant.mat <- make.by.species(spec, long.site.date, site.date)
dimnames(plant.mat)
calcOccArray <-  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
occ <- apply(mat, c(3,1), calcOccArray#
})
calcOccArray <-  function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
}#
occ <- apply(mat, c(3,1), calcOccArray)
occ.plant <- apply(plant.mat, c(3,1), calcOccArray)
occ.plant
plant.mat
plant.mat[1,1,]
plant.mat[,,1]
## abundance of each species for all site-date combinations#
make.by.species <- function(spec,#
                            sr.sched,#
                            site.date,#
                            type="PlantGenusSpecies"){#
  ## number of species at each site-date#
  all.sp <- aggregate(list(Abund=spec[, type]),#
                      list(Site=spec$Site,#
                           Date=spec$Date,#
                           GenusSpecies=spec[,type]),#
                      length)#
  ## all site-date species combinations#
  sp <- expand.grid(#
    SiteDate = unique(paste(sr.sched$Site,#
      sr.sched$Date,#
      sep=';')),#
    GenusSpecies=unique(spec[,type]),#
    Occ=0)#
  ## fill in the matrix of all combinations#
  match.dates <- match(paste(all.sp$Site,#
                       all.sp$Date,#
                       all.sp$GenusSpecies,#
                       sep=';'),#
                 paste(sp$SiteDate,#
                       sp$GenusSpecies,#
                       sep=';'))#
#
  sp$Occ[!is.na(match.dates)] <- 1#
  ## create site, date, genus etc. columns#
  ## sp$Site <- sapply(strsplit(as.character(sp$SiteDate), ";"),#
  ##                   function(x) x[1])#
  ## sp$Date <- as.Date(sapply(strsplit(as.character(sp$SiteDate), ";"),#
  ##                           function(x) x[2]))#
  ## sp$Genus <- sapply(strsplit(as.character(sp$GenusSpecies), " "),#
  ##                    function(x) x[1])#
  ## sp$Year <- format(sp$Date, '%Y')#
  ## sp$SiteStatus <- spec$SiteStatus[match(sp$Site, spec$Site)]#
  ## ## drop site-date column#
  ## sp <- sp[,-1]#
#
  ## make a site by date by species arrary#
  null.mat <- site.date#
  pollinator.id <- id(sp$GenusSpecies)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(sp$GenusSpecies), #
                    var1=as.vector(sp$Site),#
                    var2=sp$Date)#
  browser()#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats),#
               dim=c(dim(mats[[1]]),#
                 length(mats)))#
  dimnames(mat) <- list(site=sites,#
                        date=dates,#
                        species=species)#
  return(mat)#
}
plant.mat <- make.by.species(spec, long.site.date, site.date)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
plant.mat <- make.by.species(spec, long.site.date, site.date)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
plant.mat <- make.by.species(spec, long.site.date, site.date)
mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(sp$GenusSpecies), #
                    var1=as.vector(sp$Site),#
                    var2=sp$Date)
mats[[1]]
## function to make pollinator visitation matrices#
make.mats <- function(pollinator.id,#
                      null.mat,#
                      pollinator,#
                      var1,#
                      var2,#
                      occ) {#
  make.mat <- function(P) {#
    browser()#
    var1 <- var1[pollinator==P]#
    var2 <- var2[pollinator==P]#
    m <- tapply(rep(1, length(var1)),#
                list(sites=var1, dates=var2), sum)#
#
    null.mat[rownames(m), colnames(m)][!is.na(m)] <- m[!is.na(m)]#
    null.mat#
  }#
  mats <- lapply(pollinator.id, function(x) make.mat(x))#
  names(mats) <- pollinator.id#
  mats#
}#
## abundance of each species for all site-date combinations#
make.by.species <- function(spec,#
                            sr.sched,#
                            site.date,#
                            type="PlantGenusSpecies"){#
  ## number of species at each site-date#
  all.sp <- aggregate(list(Abund=spec[, type]),#
                      list(Site=spec$Site,#
                           Date=spec$Date,#
                           GenusSpecies=spec[,type]),#
                      length)#
  ## all site-date species combinations#
  sp <- expand.grid(#
    SiteDate = unique(paste(sr.sched$Site,#
      sr.sched$Date,#
      sep=';')),#
    GenusSpecies=unique(spec[,type]),#
    Occ=0)#
  ## fill in the matrix of all combinations#
  match.dates <- match(paste(all.sp$Site,#
                       all.sp$Date,#
                       all.sp$GenusSpecies,#
                       sep=';'),#
                 paste(sp$SiteDate,#
                       sp$GenusSpecies,#
                       sep=';'))#
#
  sp$Occ[!is.na(match.dates)] <- 1#
  ## create site, date, genus etc. columns#
  sp$Site <- sapply(strsplit(as.character(sp$SiteDate), ";"),#
                    function(x) x[1])#
  sp$Date <- as.Date(sapply(strsplit(as.character(sp$SiteDate), ";"),#
                            function(x) x[2]))#
  ## sp$Genus <- sapply(strsplit(as.character(sp$GenusSpecies), " "),#
  ##                    function(x) x[1])#
  ## sp$Year <- format(sp$Date, '%Y')#
  ## sp$SiteStatus <- spec$SiteStatus[match(sp$Site, spec$Site)]#
  ## ## drop site-date column#
  ## sp <- sp[,-1]#
#
  ## make a site by date by species arrary#
  null.mat <- site.date#
  pollinator.id <- id(sp$GenusSpecies)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(sp$GenusSpecies), #
                    var1=as.vector(sp$Site),#
                    var2=sp$Date,#
                    occ=sp$Occ)#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats),#
               dim=c(dim(mats[[1]]),#
                 length(mats)))#
  dimnames(mat) <- list(site=sites,#
                        date=dates,#
                        species=species)#
  return(mat)#
}#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                          sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
calcOccArray <-  function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
}
Q
## function to make pollinator visitation matrices#
make.mats <- function(pollinator.id,#
                      null.mat,#
                      pollinator,#
                      var1,#
                      var2,#
                      occ) {#
  make.mat <- function(P) {#
    browser()#
    var1 <- var1[pollinator==P]#
    var2 <- var2[pollinator==P]#
    m <- tapply(rep(1, length(var1)),#
                list(sites=var1, dates=var2), sum)#
#
    null.mat[rownames(m), colnames(m)][!is.na(m)] <- m[!is.na(m)]#
    null.mat#
  }#
  mats <- lapply(pollinator.id, function(x) make.mat(x))#
  names(mats) <- pollinator.id#
  mats#
}#
## abundance of each species for all site-date combinations#
make.by.species <- function(spec,#
                            sr.sched,#
                            site.date,#
                            type="PlantGenusSpecies"){#
  ## number of species at each site-date#
  all.sp <- aggregate(list(Abund=spec[, type]),#
                      list(Site=spec$Site,#
                           Date=spec$Date,#
                           GenusSpecies=spec[,type]),#
                      length)#
  ## all site-date species combinations#
  sp <- expand.grid(#
    SiteDate = unique(paste(sr.sched$Site,#
      sr.sched$Date,#
      sep=';')),#
    GenusSpecies=unique(spec[,type]),#
    Occ=0)#
  ## fill in the matrix of all combinations#
  match.dates <- match(paste(all.sp$Site,#
                       all.sp$Date,#
                       all.sp$GenusSpecies,#
                       sep=';'),#
                 paste(sp$SiteDate,#
                       sp$GenusSpecies,#
                       sep=';'))#
#
  sp$Occ[!is.na(match.dates)] <- 1#
  ## create site, date, genus etc. columns#
  sp$Site <- sapply(strsplit(as.character(sp$SiteDate), ";"),#
                    function(x) x[1])#
  sp$Date <- as.Date(sapply(strsplit(as.character(sp$SiteDate), ";"),#
                            function(x) x[2]))#
  ## sp$Genus <- sapply(strsplit(as.character(sp$GenusSpecies), " "),#
  ##                    function(x) x[1])#
  ## sp$Year <- format(sp$Date, '%Y')#
  ## sp$SiteStatus <- spec$SiteStatus[match(sp$Site, spec$Site)]#
  ## ## drop site-date column#
  ## sp <- sp[,-1]#
#
  ## make a site by date by species arrary#
  null.mat <- site.date#
  pollinator.id <- id(sp$GenusSpecies)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(sp$GenusSpecies), #
                    var1=as.vector(sp$Site),#
                    var2=sp$Date,#
                    occ=sp$Occ)#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats),#
               dim=c(dim(mats[[1]]),#
                 length(mats)))#
  dimnames(mat) <- list(site=sites,#
                        date=dates,#
                        species=species)#
  return(mat)#
}#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                          sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
calcOccArray <-  function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
}
plant.mat <- make.by.species(spec, long.site.date, site.date)
var1 <- var1[pollinator==P]#
    var2 <- var2[pollinator==P]#
    m <- tapply(rep(1, length(var1)),#
                list(sites=var1, dates=var2), sum)
m
head(sp)
var1
var2
rep(1, length(var1)
)
head(m)
length(occ)
length((rep(1, length(var1)))
)
var1
var1
occ <- occ[pollinator==P]
occ
m <- tapply(occ,#
                list(sites=var1, dates=var2), sum)
m
m <- samp2site.spp(var1, var2, occ)
m
m <- tapply(occ,#
                list(sites=var1, dates=var2), sum)
m
list(sites=var1, dates=var2)
VAR1
var1
var2
null.mat[var1, var2] <- occ
null.mat[var1, var2]
var1
var2
head(null.mat)
rownames(m)
colnames(m)
unique(var1)
unique(var2)
unique(var1) == rownames(m)
null.mat[unique(var1), unique(var2)]
unique(var1)
unique(var2)
unique(var2) == colnames(m)
colnames(m)
unique(var2)
colnames(m)
unique(var2)
unique(var2) %in% colnames(m)
unique(var2)
as.character(unique(var2)) %in% colnames(m)
null.mat[unique(var1), as.character(unique(var2))]
null.mat[unique(var1), as.character(unique(var2))][!is.na(m)] <- occ
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
plant.mat <- make.by.species(spec, long.site.date, site.date)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
plant.mat <- make.by.species(spec, long.site.date, site.date)
null.mat[unique(var1), as.character(unique(var2))] <- occ
as.character(unique(var2))
unique(var1)
occ
null.mat[unique(var1), as.character(unique(var2))]
occ
null.mat
head(null.mat)
null.mat[unique(var1), unique(as.character(var2))] <- occ
null.mat[unique(var1), unique(as.character(var2))][!is.na(null.mat)] <- occ
null.mat
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
plant.mat <- make.by.species(spec, long.site.date, site.date)
occ.plant <- apply(plant.mat, c(3,1), calcOccArray)
occ.plant
plant.mat
plant.mat[,,1]
occ.plant
findOccPLant <- function(x){#
  out <- try(occ[x["GenusSpecies"], x["Site"], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
findOccPLant <- function(x){#
  out <- try(occ[x["GenusSpecies"], x["Site"], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
findOccPLant <- function(x){#
  out <- try(occ[x["GenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
findOccPLant <- function(x){#
  out <- try(occ[x["PlantGenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
spec$occ.plant.date <- apply(spec, 1, findOccPlant)
findOccPlant <- function(x){#
  out <- try(occ[x["PlantGenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
spec$occ.plant.date <- apply(spec, 1, findOccPlant)
head(spec)
head(plant.occ)
head(occ.plant)
findOccPlant <- function(x){#
  browser()#
  out <- try(occ[x["PlantGenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
spec$occ.plant.date <- apply(spec, 1, findOccPlant)
spec$occ.plant.date <- apply(spec, 1, findOccPlant)
x["PlantGenusSpecies"]
x["Site"]
occ[x["PlantGenusSpecies"], x["Site"]]
x[Brassica sp., Barger]
x["Brassica sp.", "Barger"]
findOccPlant <- function(#
  out <- try(occ[x["PlantGenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
Q
findOccPlant <- function(#
  out <- try(occ[x["PlantGenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
findOccPlant <- function(x){#
  out <- try(occ[x["PlantGenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
findOccPlant <- function(x){#
  out <- try(occ.plant[x["PlantGenusSpecies"], x["Site"]], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}
spec$occ.plant.date <- apply(spec, 1, findOccPlant)
head(spec)
head(traits)
traits$GenusSpecies
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
spec$degree <- traits$plant.degree[match(spec$PlantGenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
## create sample matrix#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
#
## create site by date matrices with plant presence#
plant.mat <- make.by.species(spec, long.site.date, site.date)#
occ.plant <- apply(plant.mat, c(3,1), calcOccArray)#
## match to dataset!#
spec$occ.plant.date <- apply(spec, 1, findOccPlant)#
#
## bee functional traits#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
site.years <- aggregate(Year~ Site, data=spec,#
                        function(x) length(unique(x)))#
#
sites.to.keep <- site.years$Site[site.years$Year >= 5]#
#
## *******************************************************************#
## create networks#
## all sites with > 5 years#
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))#
#
## *******************************************************************#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'baci_networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
                            getSpec(species.lev = a,#
                                    names.net = b),#
                            a = species.lev,#
                            b = names(networks),#
                            SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                                  "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                               "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                            plant.col$species,#
                                            veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[1]),#
                            years =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)
specs$speciesType
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')
unique(specs$speciesType)
colnames(spec)
plant.occ.k.sd <- cv.trait(spec,#
                     specs[specs$speciesType =="plant",],#
                     trait="occ.plant.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=sd,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(plant.occ.k.sd$lm.nss)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')
plant.occ.k.sd <- cv.trait(spec,#
                     specs[specs$speciesType =="plant",],#
                     trait="occ.plant.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=sd,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)
byStatus <- split(byType, byType$SiteStatus)#
  bySite <- lapply(byStatus, function(x) {split(x, x$Site)})#
  bySite <- unlist(bySite, recursive=FALSE)
bySite[[1]]
prep.cv <- lapply(bySite, function(y) {#
    samp2site.spp(y[, time.col], y[,"GenusSpecies"], y[, abund.col])#
  })
prep.cv
prep.cv <- lapply(prep.cv, function(x){#
      x[x == 0] <- NA#
      return(x)#
    })
coeff.cv <- lapply(prep.cv, function(x){apply(x, 2, cv.function, ...)})#
  dats <- data.frame(cv=unlist(coeff.cv))
dats$SiteStatus <-  gsub('\\..*', '', rownames(dats))#
  dats$SiteStatus <- factor(dats$SiteStatus, levels=status.order)#
  dats$GenusSpecies <- unlist(lapply(coeff.cv, names))#
  dats$Site <-  sapply(strsplit(rownames(dats), "\\."),#
                       function(x) x[2])
rownames(dats) <- NULL
dats$traits.ns <- spec.dat[,trait][match(dats$GenusSpecies,#
                                             spec.dat$GenusSpecies)]#
    dats$traits <- scale(dats$traits.ns)
lm.cv <- lmer(cv ~ SiteStatus*traits + (1|Site) + (1|GenusSpecies),#
                data=dats[!is.na(dats$cv),])#
  lm.cv.nss <- lmer(cv ~ traits + (1|Site) + (1|GenusSpecies),#
                data=dats[!is.na(dats$cv),])
head(dats)
dats
coeff.cv <- lapply(prep.cv, function(x){apply(x, 2, cv.function, ...)})
coeff.cv
dats <- data.frame(cv=unlist(coeff.cv))
dats
head(dats)
dats$SiteStatus <-  gsub('\\..*', '', rownames(dats))
hed(dats)
head(dats)
dats$SiteStatus <- factor(dats$SiteStatus, levels=status.order)
head(dats)
dats$GenusSpecies <- unlist(lapply(coeff.cv, names))
head(dats)
dats$Site <-  sapply(strsplit(rownames(dats), "\\."),#
                       function(x) x[2])
head(dats)
rownames(dats) <- NULL
head(dats)
trait
head(spec.dat)
species.type
species.type <- "PlantGenusSpecies"
dats$traits.ns <- spec.dat[,trait][match(dats$GenusSpecies,#
                                             spec.dat[, species.type])]
head(dats)
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')
## plants#
plant.occ.k.sd <- cv.trait(spec,#
                           specs[specs$speciesType =="plant",],#
                           trait="occ.plant.date",#
                           method= "time", time.col="assem",#
                           abund.col="k",#
                           cv.function=sd,#
                           zero2na=TRUE,#
                           standard.cv=FALSE,#
                           na.rm=TRUE,#
                           species.type="PlantGenusSpecies")#
summary(plant.occ.k.sd$lm.nss)
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=FALSE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="pollinator",],#
                            trait="occ.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=FALSE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)
## plants#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=FALSE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)
## pollinators and closeness#
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=FALSE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)
## plants and closeness#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=FALSE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## not sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)
head(traits)
## regresses coefficent of variation against traits#
#
corCv <- function(x){#
  cv(x)*(1 + (1/4*length(x)))#
}#
#
## cv.function can be corCv, cv, or sd#
## standard cv devides cv by 100 to avoid too large of numbers for the#
## lm#
cv.trait <- function(spec.dat,#
                     byType,#
                     trait,#
                     cont=TRUE,#
                     method,#
                     time.col,#
                     abund.col,#
                     status.order=c("control", "maturing", "mature"),#
                     cv.function=corCv,#
                     zero2na =FALSE,#
                     standard.cv=TRUE,#
                     species.type="GenusSpecies",...){#
  byStatus <- split(byType, byType$SiteStatus)#
  bySite <- lapply(byStatus, function(x) {split(x, x$Site)})#
  bySite <- unlist(bySite, recursive=FALSE)#
  prep.cv <- lapply(bySite, function(y) {#
    samp2site.spp(y[, time.col], y[,"GenusSpecies"], y[, abund.col])#
  })#
  if(zero2na){#
    prep.cv <- lapply(prep.cv, function(x){#
      x[x == 0] <- NA#
      return(x)#
    })#
  }#
  coeff.cv <- lapply(prep.cv, function(x){apply(x, 2, cv.function, ...)})#
  dats <- data.frame(cv=unlist(coeff.cv))#
  if(standard.cv){#
    dats$cv <- dats$cv/100#
  }#
  dats$SiteStatus <-  gsub('\\..*', '', rownames(dats))#
  dats$SiteStatus <- factor(dats$SiteStatus, levels=status.order)#
  dats$GenusSpecies <- unlist(lapply(coeff.cv, names))#
  dats$Site <-  sapply(strsplit(rownames(dats), "\\."),#
                       function(x) x[2])#
  rownames(dats) <- NULL#
  if(cont){#
    browser()#
    dats$traits.ns <- spec.dat[,trait][match(dats$GenusSpecies,#
                                             spec.dat[, species.type])]#
    dats$traits <- scale(dats$traits.ns)#
  } else{#
    dats$traits <- spec.dat[,trait][match(dats$GenusSpecies,#
                                          spec.dat[, species.type])]#
  }#
  lm.cv <- lmer(cv ~ SiteStatus*traits + (1|Site) + (1|GenusSpecies),#
                data=dats[!is.na(dats$cv),])#
  lm.cv.nss <- lmer(cv ~ traits + (1|Site) + (1|GenusSpecies),#
                data=dats[!is.na(dats$cv),])#
  return(list(data=dats, lm=lm.cv, lm.nss=lm.cv.nss))#
}#
## previous plotting code. Takes xlabel argument#
## if(cont){#
##   plot.dis(dats, lm.cv, sitetype="cv", trait=trait, method= method)#
##   predict.int(lm.cv, xlabel=xlabel, dats=dats$traits, method= method)#
## } else{#
##   plot.dis(dats, lm.cv, sitetype="box", trait=trait, method= method)#
## }
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)
dats$traits.ns <- spec.dat[,trait][match(dats$GenusSpecies,#
                                             spec.dat[, species.type])]
spec.dat[,trait]
trait
colnames(spec.dat)
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
spec$plant.degree <- traits$plant.degree[match(spec$PlantGenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
## create sample matrix#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
#
## create site by date matrices with plant presence#
plant.mat <- make.by.species(spec, long.site.date, site.date)#
occ.plant <- apply(plant.mat, c(3,1), calcOccArray)#
## match to dataset!#
spec$occ.plant.date <- apply(spec, 1, findOccPlant)#
#
## bee functional traits#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
site.years <- aggregate(Year~ Site, data=spec,#
                        function(x) length(unique(x)))#
#
sites.to.keep <- site.years$Site[site.years$Year >= 5]#
#
## *******************************************************************#
## create networks#
## all sites with > 5 years#
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))#
#
## *******************************************************************#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'baci_networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
                            getSpec(species.lev = a,#
                                    names.net = b),#
                            a = species.lev,#
                            b = names(networks),#
                            SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                                  "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                               "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                            plant.col$species,#
                                            veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[1]),#
                            years =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)
spec$plant.degree <- traits$degree[match(spec$PlantGenusSpecies,#
                                   traits$GenusSpecies)]
spec$plant.degree <- traits$degree[match(spec$PlantGenusSpecies,#
                                   traits$GenusSpecies)]#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))#
#
## interactions#
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies)))#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))#
#
## sampling table for manuscript#
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                        spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"#
#
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
spec$plant.degree <- traits$degree[match(spec$PlantGenusSpecies,#
                                   traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
## create sample matrix#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
#
## create site by date matrices with plant presence#
plant.mat <- make.by.species(spec, long.site.date, site.date)#
occ.plant <- apply(plant.mat, c(3,1), calcOccArray)#
## match to dataset!#
spec$occ.plant.date <- apply(spec, 1, findOccPlant)#
#
## bee functional traits#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
site.years <- aggregate(Year~ Site, data=spec,#
                        function(x) length(unique(x)))#
#
sites.to.keep <- site.years$Site[site.years$Year >= 5]#
#
## *******************************************************************#
## create networks#
## all sites with > 5 years#
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))#
#
## *******************************************************************#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'baci_networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
                            getSpec(species.lev = a,#
                                    names.net = b),#
                            a = species.lev,#
                            b = names(networks),#
                            SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                                  "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                               "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                            plant.col$species,#
                                            veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[1]),#
                            years =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)

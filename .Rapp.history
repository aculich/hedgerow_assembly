rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)
nets[[1]][[1]]
v
nets <- rapply(nets, function(x) expandNets(sub.mat=x,#
                                            all.mat=all.pp),#
               how="replace")
nets[[1]][[1]]
nets <- rapply(nets, expandNets, all.mat=all.pp),#
               how="replace")
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
nets[[1]][[1]]
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
Q
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
nets[[1]][[1]]
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
nets[[1]][[1]]
nets[[1]]
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
nets[[1]]
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
Q
v
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")
nets[[1]][[1]]
sum(nets[[1]][[1]])
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats <- sapply(nets, length)#
to.keep <- num.dats > 3#
nets <- nets[to.keep]#
#
save(nets, file="saved/networks_date.Rdata")#
pol.ints <- rapply(nets, colSums, how="replace")#
plant.ints <- rapply(nets, rowSums, how="replace")#
#
## by sampling rounds#
spec$DateSR <- paste(spec$Date, spec$NetNumber, sep=".")#
nets.SR <- break.net(spec, date="DateSR", unlist.data=FALSE)#
nets.SR <- lapply(nets.SR, function(x) expandNets(sub.mat=x, all.mat=all.pp))#
#
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")#
plant.ints.SR <- rapply(nets.SR, rowSums, how="replace")#
#
## model checks#
#
ppChange <- function(A, P){#
  browser()#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)]#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(c(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)
Q
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats <- sapply(nets, length)#
to.keep <- num.dats > 3#
nets <- nets[to.keep]#
#
save(nets, file="saved/networks_date.Rdata")#
pol.ints <- rapply(nets, colSums, how="replace")#
plant.ints <- rapply(nets, rowSums, how="replace")#
#
## by sampling rounds#
spec$DateSR <- paste(spec$Date, spec$NetNumber, sep=".")#
nets.SR <- break.net(spec, date="DateSR", unlist.data=FALSE)#
nets.SR <- lapply(nets.SR, function(x) expandNets(sub.mat=x, all.mat=all.pp))#
#
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")#
plant.ints.SR <- rapply(nets.SR, rowSums, how="replace")#
#
## model checks#
#
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)]#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(c(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)
model.check.date
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)]#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)
model.check.date
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats <- sapply(nets, length)#
to.keep <- num.dats > 3#
nets <- nets[to.keep]#
#
save(nets, file="saved/networks_date.Rdata")#
pol.ints <- rapply(nets, colSums, how="replace")#
plant.ints <- rapply(nets, rowSums, how="replace")#
#
## by sampling rounds#
spec$DateSR <- paste(spec$Date, spec$NetNumber, sep=".")#
nets.SR <- break.net(spec, date="DateSR", unlist.data=FALSE)#
nets.SR <- lapply(nets.SR, function(x) expandNets(sub.mat=x, all.mat=all.pp))#
#
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")#
plant.ints.SR <- rapply(nets.SR, rowSums, how="replace")#
#
## model checks#
#
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)]#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
nets.SR[[1]]
model.check.date
spec$DateSR <- paste(spec$Date, spec$NetNumber, sep=".")
nets.SR <- break.net(spec, date="DateSR", unlist.data=FALSE)
names(nets.SR)
names(nets.SR[[1]])
nets.SR <- rapply(nets.SR, expandNets, all.mat=all.pp,#
               how="replace")
sum(nets.SR[[1]][[1]])
nets.SR
nets.SR[[1]][[1]]
names(nets.SR)
num.dats.SR <- sapply(nets.SR, length)#
to.keep.SR <- num.dats > 3#
nets.SR <- nets.SR[to.keep.SR]
to.keep.SR
nets.SR[[1]]
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")
pol.ints.SR
num.dats.SR <- sapply(nets.SR, length)#
to.keep.SR <- num.dats > 3#
nets.SR <- nets.SR[to.keep.SR]#
#
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")#
plant.ints.SR <- rapply(nets.SR, rowSums, how="replace")#
#
## model checks#
#
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)]#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats <- sapply(nets, length)#
to.keep <- num.dats > 3#
nets <- nets[to.keep]#
#
save(nets, file="saved/networks_date.Rdata")#
pol.ints <- rapply(nets, colSums, how="replace")#
plant.ints <- rapply(nets, rowSums, how="replace")#
#
## by sampling rounds#
spec$DateSR <- paste(spec$Date, spec$NetNumber, sep=".")#
nets.SR <- break.net(spec, date="DateSR", unlist.data=FALSE)#
nets.SR <- rapply(nets.SR, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats.SR <- sapply(nets.SR, length)#
to.keep.SR <- num.dats > 3#
nets.SR <- nets.SR[to.keep.SR]#
#
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")#
plant.ints.SR <- rapply(nets.SR, rowSums, how="replace")#
#
## model checks#
#
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)]#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- try(Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)],#
  silent=TRUE)#
  if(inherits(diff.P, "try-error")) browser()#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
Q
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
PS
Ps
dim(Ps)
Q
## by sampling rounds#
spec$DateSR <- paste(spec$Date, spec$NetNumber, sep=".")#
nets.SR <- break.net(spec, date="DateSR", unlist.data=FALSE)#
nets.SR <- rapply(nets.SR, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats.SR <- sapply(nets.SR, length)#
to.keep.SR <- num.dats.SR > 3#
nets.SR <- nets.SR[to.keep.SR]#
#
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")#
plant.ints.SR <- rapply(nets.SR, rowSums, how="replace")#
#
## model checks#
#
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- try(Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)],#
  silent=TRUE)#
  if(inherits(diff.P, "try-error")) browser()#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
model.check.SR
ppChange <- function(A, P){#
  browser()#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- try(Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)],#
  silent=TRUE)#
  if(inherits(diff.P, "try-error")) browser()#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
As <- simplify2array(A)#
  Ps <- simplify2array(P)
names(Ps)
dimnames(Ps)
n
dimnames(Ps)
Q
nets.SR[[2]]
names(nets.SR[[2]])
names(nets.SR[[3]])
names(nets.SR[[4]])
names(nets.SR[[5]])
unique(spec$NetNumber)
## *******************************************************#
## create relational database#
## *******************************************************#
#
source('~/Dropbox/Yosemite/analysis/occupancy/src/misc.R')#
#
library(RSQLite)#
#
specimens <- read.csv('../preped_data/specimen.csv', as.is=TRUE)#
conditions <- read.csv('../preped_data/weather.csv', as.is=TRUE)#
geo <- read.csv('../preped_data/geography.csv',#
                as.is=TRUE)#
veg <- read.csv('../preped_data/veg.csv', as.is=TRUE)
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')
source('~/Dropbox/Yosemite/analysis/occupancy/src/misc.R')#
#
library(RSQLite)#
#
specimens <- read.csv('../preped_data/specimen.csv', as.is=TRUE)#
conditions <- read.csv('../preped_data/weather.csv', as.is=TRUE)#
geo <- read.csv('../preped_data/geography.csv',#
                as.is=TRUE)#
veg <- read.csv('../preped_data/veg.csv', as.is=TRUE)
unique(specimens$NetNumber)
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')#
sr.sched <- read.csv('tables/conditions.csv')#
spec <- read.csv('traditional/specimens-complete.csv')#
veg <- read.csv('traditional/veg-complete.csv')#
ref <- read.csv('../original/YoseReference.csv')#
#
setwd('~/Dropbox/Yosemite/analysis/data')#
source('src/misc.R')#
traits <-  read.csv('functionalTraits/bees.csv')#
#
##******************************************************#
## prep reference data#
##******************************************************#
#
ref <- ref[!grepl("sp.", ref$PlantGenusSpecies),]#
ref <- ref[!is.na(ref$PlantGenusSpecies),]#
ref$GenusSpecies <-  fix.white.space(paste(ref$Genus, ref$Species))#
to.drop <- c("Non_bee Syrphidae",#
             "Agapostemon angelicus / texanus",#
             "Hylaeus rudbeckiae / granulatus")#
ref <- ref[!ref$GenusSpecies %in% to.drop,]#
#
counts <- c(ref$Females, ref$Males)#
plants <- rep(ref$PlantGenusSpecies, 2)#
pols <- rep(ref$GenusSpecies, 2)#
sex <- rep(c("f","m"), each=nrow(ref))#
ref.comm <- data.frame(Abund=counts,#
                   PlantGenusSpecies=plants,#
                   GenusSpecies=pols,#
                   Sex=sex)#
#
ref.comm$GenusSpeciesSex <- fix.white.space(paste(ref.comm$GenusSpecies,#
                                              ref.comm$Sex))#
#
net <- samp2site.spp(ref.comm$PlantGenusSpecies,#
                      ref.comm$GenusSpeciesSex, ref.comm$Abund)#
#
## d.yose <- specieslevel(net, index='d')#
## save(d.yose, file="specimens/dYose.Rdata")#
#
##******************************************************#
## add traits to specimens database#
##******************************************************#
## correct date format#
spec$Date <- as.Date(spec$Date, format='%m/%d/%y')#
spec$doy <- as.numeric(strftime(spec$Date, format='%j'))#
spec$Year <- as.factor(spec$Year)#
## get specimen data ready#
spec <-  spec[spec$Species != '',]#
extra.round <- spec$Site == 'L21' & spec$Date == '2014-07-01'#
spec <- spec[!extra.round,]#
#
## create genus species columns#
spec$GenusSpecies <- fix.white.space(paste(spec$Genus,#
                                           spec$Species,#
                                           spec$SubSpecies))#
#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies,#
                                                 spec$PlantVar,#
                                                 spec$PlantSubSpecies))#
#
## match trait data#
keep.trait <- c('Sociality',#
                'NestLoc',#
                'Excavate',#
                'Lecty',#
                'Wood',#
                'FireKill')#
traits$GenusSpecies <-  fix.white.space(paste(traits$Genus,#
                                                       traits$Species,#
                                                       traits$SubSpecies))#
spec <- cbind(spec, traits[match(spec$GenusSpecies,#
                                 traits$GenusSpecies), keep.trait])#
#
## interactions#
spec$Int <-  fix.white.space(paste(spec$GenusSpecies,#
                                   spec$PlantGenusSpecies))#
spec$IntGen <-  fix.white.space(paste(spec$Genus,#
                                      spec$PlantGenus))#
#
## create plant by pollinator matrix to calculate specialization#
prep.comm <- aggregate(spec$GenusSpecies,#
                       list(PlantGenusSpecies=spec$PlantGenusSpecies,#
                            PolGenusSpecies=spec$GenusSpecies,#
                            Year=spec$Year),#
                       length)#
#
spec <- match.d(prep.comm,#
                "PolSpec", "PlantSpec",#
                spec, traits)#
spec <- match.d(prep.comm[prep.comm$Year == "2013",],#
                "PolSpec.2013", "PlantSpec.2013",#
                spec, traits)#
spec <- match.d(prep.comm[prep.comm$Year == "2014",],#
                "PolSpec.2014", "PlantSpec.2014",#
                spec, traits)#
#
traits$PolSpec <-  spec$PolSpec[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
traits$PolSpec.2013 <-  spec$PolSpec.2013[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
traits$PolSpec.2014 <-  spec$PolSpec.2014[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
## reference data#
load(file="specimens/dYose.Rdata")#
spec$GenusSpeciesSex <- fix.white.space(paste(spec$Genus,#
                                              spec$Species,#
                                              spec$Sex))#
spec$YoseSpec <- d.yose$'higher level'$'d'[match(spec$GenusSpeciesSex,#
                                           rownames(d.yose$'higher level'))]#
#
d.yose$'higher level'$Sex <-#
  sapply(strsplit(rownames(d.yose$'higher level'),' '),#
         function(x) x[3])#
d.yose$'higher level'$GenusSpecies <-#
  sapply(strsplit(rownames(d.yose$'higher level'),' '),#
         function(x) paste(x[1], x[2]))#
d.yose$'higher level'$Genus <-#
  sapply(strsplit(rownames(d.yose$'higher level'),' '),#
         function(x) x[1])#
genus.mean <- tapply(d.yose$'higher level'$d,#
                     d.yose$'higher level'$Genus, mean)#
#
spec$YoseSpec[is.na(spec$YoseSpec)] <-#
  d.yose$'higher level'$'d'[match(spec$GenusSpecies[is.na(spec$YoseSpec)],#
       d.yose$'higher level'$GenusSpecies)]#
#
spec$YoseSpec[is.na(spec$YoseSpec)] <-#
  genus.mean[match(spec$Genus[is.na(spec$YoseSpec)],#
                   rownames(genus.mean))]#
spec$YoseSpec[spec$Genus == "Hylaeus"] <-#
  genus.mean[rownames(genus.mean) =="Hylaeus"]#
#
traits$YoseSpec <-  spec$YoseSpec[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
#
save(traits, file='functionalTraits/bees.Rdata')#
write.csv(spec, 'specimens/spec.csv', row.names=FALSE)#
save(spec, file='specimens/spec.Rdata')#
##******************************************************#
## abundance of each species at each site (net and pan)#
##******************************************************#
## site-date by species matrix for all species#
sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')#
extra.round <- sr.sched$Site == 'L21' & sr.sched$Date == '2014-07-01'#
sr.sched <- sr.sched[!extra.round,]#
#
## net and pan, all species#
make.by.species(spec=spec,#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/combined/all')#
#
## net and pan, only bees#
make.by.species(spec=spec[spec$GeneralID == 'Bee',],#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/combined/bees')#
#
## net only, all species#
make.by.species(spec=spec[spec$NetPan == 'net',],#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/net/all')#
#
## net and only, only bees#
make.by.species(spec=spec[spec$GeneralID == 'Bee' &#
                  spec$NetPan == 'net',],#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/net/bees')#
## net, interactions#
make.by.species(spec=spec[spec$GeneralID == 'Bee' &#
                  spec$NetPan == 'net',],#
                sr.sched=sr.sched,#
                type="Int",#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/net/interactions')#
#
##******************************************************#
## veg data#
##******************************************************#
## correct date format#
veg$Date <- as.Date(veg$Date, format='%m/%d/%y')#
veg$Year <- format(veg$Date, format='%Y')#
veg$doy <- as.numeric(strftime(veg$Date, format='%j'))#
#
## drop data from incomplete sampling round#
extra.round <- veg$Site == 'L21' & veg$Date == '2014-07-01'#
veg <- veg[!extra.round,]#
#
veg$FlowerNum[is.na(veg$FlowerNum)] <- 0#
veg$Occ <- veg$FlowerNum#
veg$Occ[veg$Occ > 0] <- 1#
#
veg$logFlowerNum <- veg$FlowerNum#
veg$logFlowerNum[veg$logFlowerNum == 2] <- 10#
veg$logFlowerNum[veg$logFlowerNum == 3] <- 100#
veg$logFlowerNum[veg$logFlowerNum == 4] <- 1000#
veg$logFlowerNum[veg$logFlowerNum == 5] <- 10000#
#
veg$PlantGenusSpecies <-  fix.white.space(paste(veg$PlantGenus,#
                                                 veg$PlantSpecies,#
                                                 veg$PlantVar,#
                                                 veg$PlantSubSpecies))#
veg$SiteStatus <- spec$SiteStatus[match(veg$Site,#
                                        spec$Site)]#
write.csv(veg, 'veg/veg.csv', row.names=FALSE)#
save(veg, file='veg/veg.Rdata')#
#
##******************************************************#
## site level data#
##******************************************************#
source('~/Dropbox/yosemite/analysis/data/src/siteLevelPrep.R')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')
## *******************************************************#
## make files for use in relational database#
## *******************************************************#
## load data#
D <- read.csv("../original/specimens/cleaned/specimens.csv")#
#
## *******************************************************#
## create insect specimen database#
spec <- data.frame(EMEC=D$EMEC,#
                   UniqueID=D$UniqueID,#
                   TempID=D$TempID,#
                   Order=D$Order,#
                   Family=D$Family,#
                   Genus=D$Genus,#
                   SubGenus=D$Subgenus,#
                   Species=D$Species,#
                   SubSpecies=D$Subspecies,#
                   GeneralID=D$GeneralID,#
                   Sex=D$Sex,#
                   NetPan=D$NetPan,#
                   Site=D$Site,#
                   Year=D$Year,#
                   Collector=D$Collector,#
                   SampleRound=D$SampleRound,#
                   Date=D$Date,#
                   PanColor=D$PanColor,#
                   PanID=D$PanID,#
                   NetNumber=D$NetNumber,#
                   FinalPlantSp=D$PlantSp,#
                   DateDetermined=D$DateDetermined,#
                   Determiner=D$Determiner,#
                   Author=D$Author)#
#
write.csv(spec, file="../preped_data/specimen.csv",#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************#
## create weather file#
#
W <- read.csv('../original/weather.csv')#
#
weather <- data.frame(NetPan=W$NetPan,#
                   Site=W$Site,#
                   SampleRound=W$SampleRound,#
                   Date=W$Date,#
                   StartTime=W$StartTime,#
                   EndTime=W$EndTime,#
                   TempStart=W$StartTemp,#
                   TempEnd=W$EndTemp,#
                   WindStart=W$StartWind,#
                   WindEnd=W$EndWind,#
                   SkyStart=W$StartSky,#
                   SkyEnd=W$EndSky,#
                   Collector=W$Collector,#
                   NetNumber =W$NetNumber,#
                   Year=W$Year)#
#
## write unique data to a table#
write.csv(weather, file='../preped_data/weather.csv',#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************#
## create site attributes file#
#
C <- read.csv('../original/siteCharacteristics.csv')#
#
char <- data.frame(Park=C$Park,#
                   Site=C$Site,#
                   Lat=C$Lat,#
                   Long=C$Long,#
                   State=C$State,#
                   Country=C$Country,#
                   County=C$County,#
                   Locality =C$Locality,#
                   HeatLoad=C$HeatLoad,#
                   TimesBurnt=C$TimesBurnt,#
                   SiteStatus=C$SiteStatus,#
                   Aspect=C$Aspect,#
                   DomSp=C$DomSp,#
                   Slope=C$Slope,#
                   FirePerim=C$FirePerim)#
#
## write unique data to a table#
write.csv(unique(char), file='../preped_data/geography.csv',#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************#
## create plant survey database#
#
V <- read.csv('../original/veg.csv')#
#
veg <- data.frame(Site=V$Site,#
                   Collector=V$Collector,#
                   Date=V$Date,#
                   FinalPlantSp=V$PlantSp,#
                   BloomStatus=V$BloomStatus,#
                   FlowerNum=V$NumFlower)#
#
write.csv(veg, file='../preped_data/veg.csv',#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************
## *******************************************************#
## make files for use in relational database#
## *******************************************************#
## load data#
D <- read.csv("../original/specimens/cleaned/specimens.csv")#
#
## *******************************************************#
## create insect specimen database#
spec <- data.frame(EMEC=D$EMEC,#
                   UniqueID=D$UniqueID,#
                   TempID=D$TempID,#
                   Order=D$Order,#
                   Family=D$Family,#
                   Genus=D$Genus,#
                   SubGenus=D$Subgenus,#
                   Species=D$Species,#
                   SubSpecies=D$Subspecies,#
                   GeneralID=D$GeneralID,#
                   Sex=D$Sex,#
                   NetPan=D$NetPan,#
                   Site=D$Site,#
                   Year=D$Year,#
                   Collector=D$Collector,#
                   SampleRound=D$SampleRound,#
                   Date=D$Date,#
                   PanColor=D$PanColor,#
                   PanID=D$PanID,#
                   NetNumber=D$NetNumber,#
                   FinalPlantSp=D$PlantSp,#
                   DateDetermined=D$DateDetermined,#
                   Determiner=D$Determiner,#
                   Author=D$Author)#
#
write.csv(spec, file="../preped_data/specimen.csv",#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************#
## create weather file#
#
W <- read.csv('../original/weather.csv')#
#
weather <- data.frame(NetPan=W$NetPan,#
                   Site=W$Site,#
                   SampleRound=W$SampleRound,#
                   Date=W$Date,#
                   StartTime=W$StartTime,#
                   EndTime=W$EndTime,#
                   TempStart=W$StartTemp,#
                   TempEnd=W$EndTemp,#
                   WindStart=W$StartWind,#
                   WindEnd=W$EndWind,#
                   SkyStart=W$StartSky,#
                   SkyEnd=W$EndSky,#
                   Collector=W$Collector,#
                   NetNumber =W$NetNumber,#
                   Year=W$Year)#
#
## write unique data to a table#
write.csv(weather, file='../preped_data/weather.csv',#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************#
## create site attributes file#
#
C <- read.csv('../original/siteCharacteristics.csv')#
#
char <- data.frame(Park=C$Park,#
                   Site=C$Site,#
                   Lat=C$Lat,#
                   Long=C$Long,#
                   State=C$State,#
                   Country=C$Country,#
                   County=C$County,#
                   Locality =C$Locality,#
                   HeatLoad=C$HeatLoad,#
                   TimesBurnt=C$TimesBurnt,#
                   SiteStatus=C$SiteStatus,#
                   Aspect=C$Aspect,#
                   DomSp=C$DomSp,#
                   Slope=C$Slope,#
                   FirePerim=C$FirePerim)#
#
## write unique data to a table#
write.csv(unique(char), file='../preped_data/geography.csv',#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************#
## create plant survey database#
#
V <- read.csv('../original/veg.csv')#
#
veg <- data.frame(Site=V$Site,#
                   Collector=V$Collector,#
                   Date=V$Date,#
                   FinalPlantSp=V$PlantSp,#
                   BloomStatus=V$BloomStatus,#
                   FlowerNum=V$NumFlower)#
#
write.csv(veg, file='../preped_data/veg.csv',#
                   row.names=FALSE)#
## *******************************************************#
#
## *******************************************************
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')
source('~/Dropbox/Yosemite/analysis/occupancy/src/misc.R')#
#
library(RSQLite)#
#
specimens <- read.csv('../preped_data/specimen.csv', as.is=TRUE)#
conditions <- read.csv('../preped_data/weather.csv', as.is=TRUE)#
geo <- read.csv('../preped_data/geography.csv',#
                as.is=TRUE)#
veg <- read.csv('../preped_data/veg.csv', as.is=TRUE)#
#
## *******************************************************#
##  import the conditions information#
## *******************************************************#
#
## check that if there is already a database, remove it#
if(file.exists('yose.db')) file.remove('yose.db')#
con <- dbConnect(dbDriver('SQLite'), dbname='yose.db')
keep <- c('Site', 'Country', 'State', 'County', 'Park', 'Locality',#
          'Lat', 'Long', 'SiteStatus', "FirePerim")#
geography <- unique(geo[keep])#
## next sort into alphabetical order#
geography <- geography[match(sort(geography$Site), geography$Site),]#
#
## generate primary geography key#
geography <- cbind(GeographyPK=seq_len(nrow(geography)), geography)#
rownames(geography) <- NULL#
dbWriteTable(con, 'tblGeography', geography, row.names=FALSE)#
#
## Propagate geography key to the conditions table.#
conditions$GeographyFK <-#
  geography$GeographyPK[match(conditions$Site, geography$Site)]#
## Propagate geography key to the specimens table.#
specimens$GeographyFK <- geography$GeographyPK[match(specimens$Site,#
                                                     geography$Site)]#
## Propagate geography key to the veg table.#
veg$GeographyFK <- geography$GeographyPK[match(veg$Site,#
                                               geography$Site)]#
#
## write a .csv version of this table (just for ease of viewing)#
write.csv(dbReadTable(con, 'tblGeography'),#
          file='tables/geography.csv', row.names=FALSE)#
#
dbListTables(con)#
## *******************************************************#
## 2. Conditions#
## *******************************************************
## Temporarily identify unique combinations:#
keep <- c('GeographyFK', 'Date', 'NetPan', 'NetNumber')#
conditions$cond.code <- apply(conditions[keep], 1, paste, collapse=';')#
specimens$cond.code <- apply(specimens[keep], 1, paste, collapse=';')#
#
## make table#
keep <- c('Site', 'Year', 'Date', 'SampleRound','NetNumber', 'NetPan',#
          'StartTime', 'EndTime', 'TempStart', 'TempEnd', 'WindStart',#
          'WindEnd', 'SkyStart', 'SkyEnd', 'GeographyFK', 'cond.code')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')
rm(list=ls())#
library(vegan)#
library(fields)#
library(bipartite)#
#
setwd('~/Dropbox/Yosemite/data')#
source('speciesIDs/src/AssignSpecies.R')#
#
setwd('~/Dropbox/Yosemite/data/relational/relational')#
source('../src/relational_prep.R')#
source('../src/relational_make.R')#
source('../src/make_traditional.R')#
sr.sched <- read.csv('tables/conditions.csv')#
spec <- read.csv('traditional/specimens-complete.csv')#
veg <- read.csv('traditional/veg-complete.csv')#
ref <- read.csv('../original/YoseReference.csv')#
#
setwd('~/Dropbox/Yosemite/analysis/data')#
source('src/misc.R')#
traits <-  read.csv('functionalTraits/bees.csv')#
#
##******************************************************#
## prep reference data#
##******************************************************#
#
ref <- ref[!grepl("sp.", ref$PlantGenusSpecies),]#
ref <- ref[!is.na(ref$PlantGenusSpecies),]#
ref$GenusSpecies <-  fix.white.space(paste(ref$Genus, ref$Species))#
to.drop <- c("Non_bee Syrphidae",#
             "Agapostemon angelicus / texanus",#
             "Hylaeus rudbeckiae / granulatus")#
ref <- ref[!ref$GenusSpecies %in% to.drop,]#
#
counts <- c(ref$Females, ref$Males)#
plants <- rep(ref$PlantGenusSpecies, 2)#
pols <- rep(ref$GenusSpecies, 2)#
sex <- rep(c("f","m"), each=nrow(ref))#
ref.comm <- data.frame(Abund=counts,#
                   PlantGenusSpecies=plants,#
                   GenusSpecies=pols,#
                   Sex=sex)#
#
ref.comm$GenusSpeciesSex <- fix.white.space(paste(ref.comm$GenusSpecies,#
                                              ref.comm$Sex))#
#
net <- samp2site.spp(ref.comm$PlantGenusSpecies,#
                      ref.comm$GenusSpeciesSex, ref.comm$Abund)#
#
## d.yose <- specieslevel(net, index='d')#
## save(d.yose, file="specimens/dYose.Rdata")#
#
##******************************************************#
## add traits to specimens database#
##******************************************************#
## correct date format#
spec$Date <- as.Date(spec$Date, format='%m/%d/%y')#
spec$doy <- as.numeric(strftime(spec$Date, format='%j'))#
spec$Year <- as.factor(spec$Year)#
## get specimen data ready#
spec <-  spec[spec$Species != '',]#
extra.round <- spec$Site == 'L21' & spec$Date == '2014-07-01'#
spec <- spec[!extra.round,]#
#
## create genus species columns#
spec$GenusSpecies <- fix.white.space(paste(spec$Genus,#
                                           spec$Species,#
                                           spec$SubSpecies))#
#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies,#
                                                 spec$PlantVar,#
                                                 spec$PlantSubSpecies))#
#
## match trait data#
keep.trait <- c('Sociality',#
                'NestLoc',#
                'Excavate',#
                'Lecty',#
                'Wood',#
                'FireKill')#
traits$GenusSpecies <-  fix.white.space(paste(traits$Genus,#
                                                       traits$Species,#
                                                       traits$SubSpecies))#
spec <- cbind(spec, traits[match(spec$GenusSpecies,#
                                 traits$GenusSpecies), keep.trait])#
#
## interactions#
spec$Int <-  fix.white.space(paste(spec$GenusSpecies,#
                                   spec$PlantGenusSpecies))#
spec$IntGen <-  fix.white.space(paste(spec$Genus,#
                                      spec$PlantGenus))#
#
## create plant by pollinator matrix to calculate specialization#
prep.comm <- aggregate(spec$GenusSpecies,#
                       list(PlantGenusSpecies=spec$PlantGenusSpecies,#
                            PolGenusSpecies=spec$GenusSpecies,#
                            Year=spec$Year),#
                       length)#
#
spec <- match.d(prep.comm,#
                "PolSpec", "PlantSpec",#
                spec, traits)#
spec <- match.d(prep.comm[prep.comm$Year == "2013",],#
                "PolSpec.2013", "PlantSpec.2013",#
                spec, traits)#
spec <- match.d(prep.comm[prep.comm$Year == "2014",],#
                "PolSpec.2014", "PlantSpec.2014",#
                spec, traits)#
#
traits$PolSpec <-  spec$PolSpec[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
traits$PolSpec.2013 <-  spec$PolSpec.2013[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
traits$PolSpec.2014 <-  spec$PolSpec.2014[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
## reference data#
load(file="specimens/dYose.Rdata")#
spec$GenusSpeciesSex <- fix.white.space(paste(spec$Genus,#
                                              spec$Species,#
                                              spec$Sex))#
spec$YoseSpec <- d.yose$'higher level'$'d'[match(spec$GenusSpeciesSex,#
                                           rownames(d.yose$'higher level'))]#
#
d.yose$'higher level'$Sex <-#
  sapply(strsplit(rownames(d.yose$'higher level'),' '),#
         function(x) x[3])#
d.yose$'higher level'$GenusSpecies <-#
  sapply(strsplit(rownames(d.yose$'higher level'),' '),#
         function(x) paste(x[1], x[2]))#
d.yose$'higher level'$Genus <-#
  sapply(strsplit(rownames(d.yose$'higher level'),' '),#
         function(x) x[1])#
genus.mean <- tapply(d.yose$'higher level'$d,#
                     d.yose$'higher level'$Genus, mean)#
#
spec$YoseSpec[is.na(spec$YoseSpec)] <-#
  d.yose$'higher level'$'d'[match(spec$GenusSpecies[is.na(spec$YoseSpec)],#
       d.yose$'higher level'$GenusSpecies)]#
#
spec$YoseSpec[is.na(spec$YoseSpec)] <-#
  genus.mean[match(spec$Genus[is.na(spec$YoseSpec)],#
                   rownames(genus.mean))]#
spec$YoseSpec[spec$Genus == "Hylaeus"] <-#
  genus.mean[rownames(genus.mean) =="Hylaeus"]#
#
traits$YoseSpec <-  spec$YoseSpec[match(traits$GenusSpecies,#
                                      spec$GenusSpecies)]#
#
save(traits, file='functionalTraits/bees.Rdata')#
write.csv(spec, 'specimens/spec.csv', row.names=FALSE)#
save(spec, file='specimens/spec.Rdata')#
##******************************************************#
## abundance of each species at each site (net and pan)#
##******************************************************#
## site-date by species matrix for all species#
sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')#
extra.round <- sr.sched$Site == 'L21' & sr.sched$Date == '2014-07-01'#
sr.sched <- sr.sched[!extra.round,]#
#
## net and pan, all species#
make.by.species(spec=spec,#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/combined/all')#
#
## net and pan, only bees#
make.by.species(spec=spec[spec$GeneralID == 'Bee',],#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/combined/bees')#
#
## net only, all species#
make.by.species(spec=spec[spec$NetPan == 'net',],#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/net/all')#
#
## net and only, only bees#
make.by.species(spec=spec[spec$GeneralID == 'Bee' &#
                  spec$NetPan == 'net',],#
                sr.sched=sr.sched,#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/net/bees')#
## net, interactions#
make.by.species(spec=spec[spec$GeneralID == 'Bee' &#
                  spec$NetPan == 'net',],#
                sr.sched=sr.sched,#
                type="Int",#
                path.dir=#
                '~/Dropbox/yosemite/analysis/data/matrices/net/interactions')#
#
##******************************************************#
## veg data#
##******************************************************#
## correct date format#
veg$Date <- as.Date(veg$Date, format='%m/%d/%y')#
veg$Year <- format(veg$Date, format='%Y')#
veg$doy <- as.numeric(strftime(veg$Date, format='%j'))#
#
## drop data from incomplete sampling round#
extra.round <- veg$Site == 'L21' & veg$Date == '2014-07-01'#
veg <- veg[!extra.round,]#
#
veg$FlowerNum[is.na(veg$FlowerNum)] <- 0#
veg$Occ <- veg$FlowerNum#
veg$Occ[veg$Occ > 0] <- 1#
#
veg$logFlowerNum <- veg$FlowerNum#
veg$logFlowerNum[veg$logFlowerNum == 2] <- 10#
veg$logFlowerNum[veg$logFlowerNum == 3] <- 100#
veg$logFlowerNum[veg$logFlowerNum == 4] <- 1000#
veg$logFlowerNum[veg$logFlowerNum == 5] <- 10000#
#
veg$PlantGenusSpecies <-  fix.white.space(paste(veg$PlantGenus,#
                                                 veg$PlantSpecies,#
                                                 veg$PlantVar,#
                                                 veg$PlantSubSpecies))#
veg$SiteStatus <- spec$SiteStatus[match(veg$Site,#
                                        spec$Site)]#
write.csv(veg, 'veg/veg.csv', row.names=FALSE)#
save(veg, file='veg/veg.Rdata')#
#
##******************************************************#
## site level data#
##******************************************************#
source('~/Dropbox/yosemite/analysis/data/src/siteLevelPrep.R')
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
load('../data/specimens/spec.Rdata')#
#
spec <- spec[spec$GeneralID =="Bee",]#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets <- break.net(spec, unlist.data=FALSE)#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats <- sapply(nets, length)#
to.keep <- num.dats > 3#
nets <- nets[to.keep]#
#
save(nets, file="saved/networks_date.Rdata")#
pol.ints <- rapply(nets, colSums, how="replace")#
plant.ints <- rapply(nets, rowSums, how="replace")#
#
## by sampling rounds#
spec$DateSR <- paste(spec$SampleRound, spec$NetNumber, sep=".")#
nets.SR <- break.net(spec, date="DateSR", unlist.data=FALSE)#
nets.SR <- rapply(nets.SR, expandNets, all.mat=all.pp,#
               how="replace")#
#
num.dats.SR <- sapply(nets.SR, length)#
to.keep.SR <- num.dats.SR > 3#
nets.SR <- nets.SR[to.keep.SR]#
#
save(nets.SR, file="saved/networks_SR.Rdata")#
pol.ints.SR <- rapply(nets.SR, colSums, how="replace")#
plant.ints.SR <- rapply(nets.SR, rowSums, how="replace")#
#
## model checks#
#
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- try(Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)],#
  silent=TRUE)#
  if(inherits(diff.P, "try-error")) browser()#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
names(nets.SR)
names(nets.SR[[1]])
model.check.SR
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- try(Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)],#
  silent=TRUE)#
  if(inherits(diff.P, "try-error")) browser()#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  browser()#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  return(cbind(s.pop, s.adj))#
}
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
dimnames(Ps)
names(s.pop) <- paste(dimnames(Ps)[1:7], dimnames(Ps)[1:7], sep="_")
s.pop <- sapply(pop.diff.adj, sum)#
  names(s.pop) <- paste(dimnames(Ps)[1:7], dimnames(Ps)[1:7], sep="_")
s.pop
dimnames(Ps)[3][1:7]
dimnames(Ps)[3]
dimnames(Ps)
names(s.pop) <- paste(dimnames(Ps)[[2]][1:7],#
                        dimnames(Ps)[[2]][1:7], sep="_")
s.pop
names(s.pop) <- paste(dimnames(Ps)[[2]][1:(length(dimnames(Ps)[[2]]]-1)),#
                        dimnames(Ps)[[2]][2:length(dimnames(Ps)[[2]]])],#
  sep="_")
dimnames(Ps)[[2]][1:(length(dimnames(Ps)[[2]])-1)]
names(s.pop) <- paste(dimnames(Ps)[[2]][1:(length(dimnames(Ps)[[2]])-1)],#
                        dimnames(Ps)[[2]][2:length(dimnames(Ps)[[2]]])],#
  sep="_")
names(s.pop) <- paste(dimnames(Ps)[[2]][1:(length(dimnames(Ps)[[2]])-1)],#
                        dimnames(Ps)[[2]][2:length(dimnames(Ps)[[2]])],#
  sep="_")
s.pop
Q
ppChange <- function(A, P){#
  As <- simplify2array(A)#
  Ps <- simplify2array(P)#
  diff.P <- try(Ps[,2:dim(Ps)[2]] - Ps[,1:(dim(Ps)[2]-1)],#
  silent=TRUE)#
  if(inherits(diff.P, "try-error")) browser()#
  diff.A <- As[,,2:dim(As)[3]] - As[,,1:(dim(As)[3]-1)]#
  pop.diff.adj <- lapply(1:(dim(Ps)[2]-1), function(i){#
    t(As[,,i]) %*% diff.P[, i]#
  })#
  adj.diff.pop <- lapply(1:(dim(Ps)[2]-1), function(i){#
    Ps[,i + 1] %*% diff.A[,,i]#
  })#
  s.pop <- sapply(pop.diff.adj, sum)#
  s.adj <- sapply(adj.diff.pop, sum)#
  names(s.adj) <- names(s.pop) <- paste(#
    dimnames(Ps)[[2]][1:(length(dimnames(Ps)[[2]])-1)],#
    dimnames(Ps)[[2]][2:length(dimnames(Ps)[[2]])],#
    sep="_")#
  return(cbind(s.pop, s.adj))#
}#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets,#
                       b = plant.ints,#
                       SIMPLIFY = FALSE)#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR,#
                       b = plant.ints.SR,#
                       SIMPLIFY = FALSE)
model.check.SR
## by date#
makeNets <- function(spec, date, save.path){#
  nets <- break.net(spec,#
                    date=date,#
                    unlist.data=FALSE)#
  nets <- rapply(nets, expandNets, all.mat=all.pp,#
                 how="replace")#
#
  num.dats <- sapply(nets, length)#
  to.keep <- num.dats > 3#
  nets <- nets[to.keep]#
#
  save(nets, file=save.path)#
  pol.ints <- rapply(nets, colSums, how="replace")#
  plant.ints <- rapply(nets, rowSums, how="replace")#
  return(nets=nets,#
         pol.ints=pol.ints,#
         plant.ints=plant.ints)#
}#
#
nets.date <- makeNets(spec=spec,#
                      date="Date",#
                      save.path="saved/networks_date.Rdata")
## by date#
makeNets <- function(spec, date, save.path){#
  nets <- break.net(spec,#
                    date=date,#
                    unlist.data=FALSE)#
  nets <- rapply(nets, expandNets, all.mat=all.pp,#
                 how="replace")#
#
  num.dats <- sapply(nets, length)#
  to.keep <- num.dats > 3#
  nets <- nets[to.keep]#
#
  save(nets, file=save.path)#
  pol.ints <- rapply(nets, colSums, how="replace")#
  plant.ints <- rapply(nets, rowSums, how="replace")#
  return(list(nets=nets,#
         pol.ints=pol.ints,#
         plant.ints=plant.ints))#
}#
#
nets.date <- makeNets(spec=spec,#
                      date="Date",#
                      save.path="saved/networks_date.Rdata")
spec$DateSR <- paste(spec$SampleRound, spec$NetNumber, sep=".")
nets.SR <- makeNets(spec=spec,#
                      date="DateSR",#
                      save.path="saved/networks_SR.Rdata")
nets.SR[[1]][[1]]
names(nets.SR[[1]])
names(nets.SR[[1]][[1]])
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets$nets,#
                       b = nets$plant.ints,#
                       SIMPLIFY = FALSE)#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR$nets,#
                       b = nets.SR$plant.ints,#
                       SIMPLIFY = FALSE)
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
source('src/modelPrep.R')#
load('../data/specimens/spec.Rdata')#
spec <- spec[spec$GeneralID =="Bee",]#
spec$DateSR <- paste(spec$SampleRound, spec$NetNumber, sep=".")#
#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets.date <- makeNets(spec=spec,#
                      date="Date",#
                      save.path="saved/networks_date.Rdata")#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets$nets,#
                       b = nets$plant.ints,#
                       SIMPLIFY = FALSE)#
#
## by SR#
#
nets.SR <- makeNets(spec=spec,#
                      date="DateSR",#
                      save.path="saved/networks_SR.Rdata")#
#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR$nets,#
                       b = nets.SR$plant.ints,#
                       SIMPLIFY = FALSE)
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
source('dataPrep/src/modelPrep.R')#
load('../data/specimens/spec.Rdata')#
spec <- spec[spec$GeneralID =="Bee",]#
spec$DateSR <- paste(spec$SampleRound, spec$NetNumber, sep=".")#
#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets.date <- makeNets(spec=spec,#
                      date="Date",#
                      save.path="saved/networks_date.Rdata")#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets$nets,#
                       b = nets$plant.ints,#
                       SIMPLIFY = FALSE)#
#
## by SR#
#
nets.SR <- makeNets(spec=spec,#
                      date="DateSR",#
                      save.path="saved/networks_SR.Rdata")#
#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR$nets,#
                       b = nets.SR$plant.ints,#
                       SIMPLIFY = FALSE)
rm(list=ls())#
library(igraph)#
library(bipartite)#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/Yosemite/analysis/financial')#
source('../network/src/prepNets.R')#
source('../network/src/misc.R')#
source('dataPrep/src/modelPrep.R')#
load('../data/specimens/spec.Rdata')#
spec <- spec[spec$GeneralID =="Bee",]#
spec$DateSR <- paste(spec$SampleRound, spec$NetNumber, sep=".")#
#
## ************************************************************#
## create site by year neworks and calculate statistics#
## (in terminal)#
## ************************************************************#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
## by date#
nets.date <- makeNets(spec=spec,#
                      date="Date",#
                      save.path="saved/networks_date.Rdata")#
model.check.date <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.date$nets,#
                       b = nets.date$plant.ints,#
                       SIMPLIFY = FALSE)#
#
## by SR#
#
nets.SR <- makeNets(spec=spec,#
                      date="DateSR",#
                      save.path="saved/networks_SR.Rdata")#
#
model.check.SR <-  mapply(function(a, b)#
                       ppChange(A = a,#
                                P = b),#
                       a = nets.SR$nets,#
                       b = nets.SR$plant.ints,#
                       SIMPLIFY = FALSE)
load('~/Dropbox/hedgerow_assembly/data/networks/networks_years.Rdata')
ls()
rm(list=ls())
ls()
load('~/Dropbox/hedgerow_assembly/data/networks/networks_years.Rdata')
ls()
nets[[1]]
names(nets)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')
nets[[1]]
graphs <- lapply(nets, mut.adj)
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)
graphs[[1]]
?graph.adjacency
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=FALSE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)
?graph.adjacency
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=FALSE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)
graphs[[1]]
write.csv(graphs[[1]], row.names=FALSE)
write.graph(graphs[[1]])
write.graph(graphs[[1]], file="graph1")
write.graph(graphs[[1]], file="graph1.pairs")
?sprintf
names(graphs)
for(i in graphs){#
  write.graph(i, file=ile=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])),#
}
v
for(i in graphs){#
  write.graph(i, file=ile=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
for(i in graphs){#
  write.graph(i, file=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
f.path <- "analysis/changePoint/cptPeel/baci"#
#
for(i in graphs){#
  write.graph(i, file=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
f.path <- "analysis/changePoint/cptPeel/baci"#
#
for(i in graphs){#
  write.graph(i, file=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
?gub
?gsub
gsub("[.]", "_", names(graphs))
names(graphs) <- gsub("[.]", "_", names(graphs))
f.path <- "analysis/changePoint/cptPeel/baci"#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
f.path <- "analysis/changePoint/cptPeel/baci"#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
?write.graph
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="ncol",#
               file=file.path(f.path,#
                                sprintf("%s.pairs", names(graphs)[i])))#
}
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="ncol",#
               file=file.path(f.path,#
                                sprintf("%s.lut", names(graphs)[i])))#
}
?write.graph
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="pajek",#
               file=file.path(f.path,#
                                sprintf("%s.lut", names(graphs)[i])))#
}
?write.graph
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="lgl",#
               file=file.path(f.path,#
                                sprintf("%s.lut", names(graphs)[i])))#
}
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="graphml",#
               file=file.path(f.path,#
                                sprintf("%s.lut", names(graphs)[i])))#
}
?write.graph
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="leda",#
               file=file.path(f.path,#
                                sprintf("%s.lut", names(graphs)[i])))#
}
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="dor",#
               file=file.path(f.path,#
                                sprintf("%s.lut", names(graphs)[i])))#
}
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
   write.graph(graphs[[i]], format="dot",#
               file=file.path(f.path,#
                                sprintf("%s.lut", names(graphs)[i])))#
}
graphs[[1]]
length(graphs[[1]])
node.names(graphs[[1]])
e.names(graphs[[1]])
V(graphs[[1]])$names
V(graphs[[1]])$name
?graph.adjacency
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE,#
                             add.colnames = TRUE, add.rownames = TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))
graphs[[1]]
v
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE,#
                              add.rownames = TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))
graphs[[1]]
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE,#
                             add.colnames = TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))
graphs[[1]]
V(graphs[[1]])
length(V(graphs[[i]]))
length(V(graphs[[1]]))
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
  lutfile <- cbind(0:V(graphs[[i]]), V(graphs[[i]]))#
  colnames(lutfile) <- c("virtual", "real") #
  write.table(lutfile,  file=file.path(f.path,#
                                sprintf("%s.lut",#
                                        names(graphs)[i])))#
}
warnings()
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
  lutfile <- cbind(0:length(V(graphs[[i]])), V(graphs[[i]]))#
  colnames(lutfile) <- c("virtual", "real") #
  write.table(lutfile,  file=file.path(f.path,#
                                sprintf("%s.lut",#
                                        names(graphs)[i])))#
}
warnings
warnings()
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
  lutfile <- cbind(0:(length(V(graphs[[i]])) -1), V(graphs[[i]]))#
  colnames(lutfile) <- c("virtual", "real") #
  write.table(lutfile,  file=file.path(f.path,#
                                sprintf("%s.lut",#
                                        names(graphs)[i])))#
}
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                                sprintf("%s.pairs",#
  names(graphs)[i])))#
  lutfile <- cbind(0:(length(V(graphs[[i]])) -1), V(graphs[[i]]))#
  colnames(lutfile) <- c("virtual", "real") #
  write.table(lutfile,  row.names=FALSE,#
              file=file.path(f.path,#
                                sprintf("%s.lut",#
                                        names(graphs)[i])))#
}
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)
spec <- dd#
spec <- spec[spec$NetPan == 'net',]
load('../data/networks/allSpecimens.Rdata')
v
load('data/networks/allSpecimens.Rdata')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
  match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols
nets <- rapply(nets, expandNets, all.mat=all.pp,#
                 how="replace")
nets[[1]]
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))
graphs[[1]]
V(graphs)
V(graphs[[1]])
V(graphs[[2]])
V(graphs[[4]])
lutfile <- cbind(0:(length(V(graphs[[1]]) -1), V(graphs[[1]]))
lutfile <- cbind(0:(length(V(graphs[[1]])) -1), V(graphs[[1]]))
lut.file
lutfile
colnames(lutfile) <- c("virtual", "real")
write.table(lutfile,  row.names=FALSE,#
            file=file.path(f.path, "graph-names.lut"))
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]])) -1), V(graphs[[1]]))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE,#
            file=file.path(f.path, "graph-names.lut"))
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]])) -1), V(graphs[[1]]))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE,#
            file=file.path(f.path, "graph-names.lut"))
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}
V(graphs[[1]])
V(graphs[[5]])
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]]))), c(0, V(graphs[[1]])))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE,#
            file=file.path(f.path, "graph-names.lut"))#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]])) -1), V(graphs[[1]]))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE,#
            file=file.path(f.path, "graph-names.lut"))#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}
?write.table
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))
?write.graph
?write.graph
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]])) -1), V(graphs[[1]]))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], sep= "\t", file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}
lutfile <- cbind(0:(length(V(graphs[[1]]))), c(V(graphs[[1]]), 0))
V(graphs[[1]])
V(graphs[[1]]
)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]]))-1), V(graphs[[1]]))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], sep= "\t", file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]]))-1), V(graphs[[1]]))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}
V(graph1[[1]])
V(graphs[[1]])
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  adj.mat <- graph.adjacency(to.fill, mode= "upper", weighted=TRUE)#
  return(adj.mat)#
}#
graphs <- lapply(nets, mut.adj)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
lutfile <- cbind(0:(length(V(graphs[[1]]))-1), 0:(length(V(graphs[[1]]))-1))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}
.08*3

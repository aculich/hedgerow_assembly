rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]
source('src/prepNets.R')
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
#
## bee functional traits#
#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')
source('src/prepNets.R')
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file='../../data/networks/networks_years.Rdata')
save(nets, file=file.path(f.path, 'networks_years.Rdata'))
## save networks for each site, timeframe#
f.path <- '../data/networks'#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'networks_years.Rdata'))
samp2site
samp2.site
samp.2.site
names(nets)
names(networks)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
## drop forb and natural sites #
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
#
## bee functional traits#
#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
  getSpec(species.lev = a,#
          names.net = b),#
  a = species.lev,#
  b = names(networks),#
  SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                           "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                           "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                          plant.col$species,#
                                          veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[1]),#
                            years =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/speciesLevel')#
source('src/initialize.R')
## **********************************************************#
## species importance#
## **********************************************************#
specs <- calcSpec(nets, spec, spec.metric = "d", 0.3)#
save(specs, file=file.path(save.path, 'specs.Rdata'))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/speciesLevel')#
source('src/initialize.R')#
#
## **********************************************************#
## species importance#
## **********************************************************#
specs <- calcSpec(nets, spec, spec.metric = "d", 0.3)#
save(specs, file=file.path(save.path, 'specs.Rdata'))
head(specs)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
## drop forb and natural sites #
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
#
## bee functional traits#
#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
  getSpec(species.lev = a,#
          names.net = b),#
  a = species.lev,#
  b = names(networks),#
  SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                           "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                           "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                          plant.col$species,#
                                          veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[1]),#
                            years =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/speciesLevel')#
source('src/initialize.R')#
#
## **********************************************************#
## species importance#
## **********************************************************#
specs <- calcSpec(nets, spec, spec.metric = "d", 0.3)#
save(specs, file=file.path(save.path, 'specs.Rdata'))#
#
## linear models#
load(file=file.path(save.path, 'specs.Rdata'))#
## SiteStatus or ypr#
xvar <- "ypr"#
#
## anything outputted by specieslevel#
ys <- c("proportional.generality", "d", "degree", "betweenness",#
        "closeness")#
#
## formulas <-lapply(ys, function(x) {#
##   as.formula(paste(x, "~",#
##                    paste(paste(xvar, "specialization", sep="*"), #
##                          "(1|Site)",#
##                           "(1|GenusSpecies)",#
##                          sep="+")))#
## })#
#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar, #
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})#
#
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, mod.plants, ys, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
N <- 999
load(file='saved/nulls/all.Rdata')#
#
mets <- lapply(nets, calc.metric)#
null.mets <- rapply(nulls, calc.metric, how="replace")#
null.mets <- lapply(null.mets, function(x) do.call(rbind, x))#
load(file='saved/nullMets.Rdata')#
#
cor.mets <- mapply(function(a, b)#
                   cor.metrics(true.stat= a,#
                               null.stat= b,#
                               N=N),#
                   a=mets,#
                   b=null.mets,#
                   SIMPLIFY=FALSE)#
#
cor.dats <- prep.dat(cor.mets,  spec)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
## no change in robustness by site status#
mod.status <- lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res)#
summary(mod.status)#
save(mod.status, file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata', extinction.method)))#
## no effect of ypr on robustness#
mod.ypr <- lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),])#
summary(mod.ypr)#
save(mod.ypr, file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
## drop forb and natural sites #
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
#
## bee functional traits#
#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')
?aggregate
?aggregate
site.years <- aggregate(Year~ Site, data=spec, function(x) length(unique)))
site.years <- aggregate(Year~ Site, data=spec, function(x) length(unique(x)))
site.years
sites.to.keep <- site.years$Site[site.years$Year >= 5]
sites.to.keep
nets <- breakNet(spec[spec$Site %in% site.to.keep], 'Site', 'Year')
nets <- breakNet(spec[spec$Site %in% sites.to.keep], 'Site', 'Year')
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')
## save networks for each site, timeframe#
f.path <- '../data/networks'#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'all_networks_years.Rdata'))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
## drop forb and natural sites #
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
#
## bee functional traits#
#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
#
site.years <- aggregate(Year~ Site, data=spec,#
                        function(x) length(unique(x)))#
#
sites.to.keep <- site.years$Site[site.years$Year >= 5]#
#
## *******************************************************************#
## create networks#
## all sites with > 5 years#
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
saveDats(nets, names(networks), f.path)#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))#
#
## *******************************************************************#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'baci_networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
  getSpec(species.lev = a,#
          names.net = b),#
  a = species.lev,#
  b = names(networks),#
  SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                           "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                           "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                          plant.col$species,#
                                          veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[1]),#
                            years =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999
names(nets)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/all_networks_years.Rdata')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
## no change in robustness by site status#
mod.status <- lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res)#
summary(mod.status)#
save(mod.status, file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata', extinction.method)))#
## no effect of ypr on robustness#
mod.ypr <- lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),])#
summary(mod.ypr)#
save(mod.ypr, file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/speciesLevel')#
source('src/initialize.R')#
load('../../data/networks/all_networks_years.Rdata')#
#
## **********************************************************#
## species importance#
## **********************************************************#
specs <- calcSpec(nets, spec, spec.metric = "d", 0.3)#
save(specs, file=file.path(save.path, 'specs.Rdata'))#
#
## linear models#
load(file=file.path(save.path, 'specs.Rdata'))#
## SiteStatus or ypr#
xvar <- "ypr"#
#
## anything outputted by specieslevel#
ys <- c("proportional.generality", "d", "degree", "betweenness",#
        "closeness")#
#
## formulas <-lapply(ys, function(x) {#
##   as.formula(paste(x, "~",#
##                    paste(paste(xvar, "specialization", sep="*"), #
##                          "(1|Site)",#
##                           "(1|GenusSpecies)",#
##                          sep="+")))#
## })#
#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar, #
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})#
#
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, mod.plants, ys, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999
load(file='saved/nulls/all.Rdata')#
#
mets <- lapply(nets, calc.metric)#
null.mets <- rapply(nulls, calc.metric, how="replace")#
null.mets <- lapply(null.mets, function(x) do.call(rbind, x))#
load(file='saved/nullMets.Rdata')#
#
cor.mets <- mapply(function(a, b)#
                   cor.metrics(true.stat= a,#
                               null.stat= b,#
                               N=N),#
                   a=mets,#
                   b=null.mets,#
                   SIMPLIFY=FALSE)#
#
cor.dats <- prep.dat(cor.mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## distribution is niche overlap#
#
dis.mats <- lapply(lapply(nets, t), vegdist, method="chao")#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(cor.dats$Year)))#
lapply(unique(cor.dats$Site), function(x){#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")#
## ************************************************************#
## effect of years post restoration#
## ************************************************************#
load(file='saved/corMets.Rdata')#
#
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')#
#
## modularity#
baci.mod.mod <- lmer(zmodD ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')#
#
## h2#
baci.h2.mod <- lmer(zH2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')#
#
## niche overlap pollinators#
baci.no.pol.mod <- lmer(niche.overlap.pol ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.pol.mod)#
save(baci.no.pol.mod, file='saved/mods/baci_no_pol.Rdata')#
#
## niche overlap plants#
baci.no.plant.mod <- lmer(niche.overlap.plants ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.plant.mod)#
save(baci.no.plant.mod, file='saved/mods/baci_no_plant.Rdata')#
source('plotting/baci.R')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
library(igraph)#
library(parallel)#
library(ape)#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
graphs <- lapply(nets, graph.incidence, weighted=TRUE, add.names=NA)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
save(graphs, nets, file=file.path(f.path, "graphs_num.Rdata"))#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
#
## for(i in unique(sites)){#
##   g <- graphs[sites == i]#
##   verts <- sort(unique(unlist(sapply(g, function(x){#
##     V(x)[igraph::degree(x)]#
##   }))))#
##   out <- data.frame(virtual=0:(length(verts) -1), real=verts)#
##   ## colnames(out) <- c("virtual", "real")#
##   write.table(out,  row.names=FALSE, sep="\t",#
##             file=file.path(f.path, sprintf("%s.lut", i)))#
## }#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}#
graphs <- lapply(nets, graph.incidence, weighted=TRUE)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
save(graphs, nets, file=file.path(f.path, "graphs.Rdata"))#
#
lutfile <- cbind(0:(length(V(graphs[[1]]))-1), 0:(length(V(graphs[[1]]))-1))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/all_networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
library(igraph)#
library(parallel)#
library(ape)#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
graphs <- lapply(nets, graph.incidence, weighted=TRUE, add.names=NA)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
save(graphs, nets, file=file.path(f.path, "graphs_num.Rdata"))#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
#
## for(i in unique(sites)){#
##   g <- graphs[sites == i]#
##   verts <- sort(unique(unlist(sapply(g, function(x){#
##     V(x)[igraph::degree(x)]#
##   }))))#
##   out <- data.frame(virtual=0:(length(verts) -1), real=verts)#
##   ## colnames(out) <- c("virtual", "real")#
##   write.table(out,  row.names=FALSE, sep="\t",#
##             file=file.path(f.path, sprintf("%s.lut", i)))#
## }#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}#
graphs <- lapply(nets, graph.incidence, weighted=TRUE)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
save(graphs, nets, file=file.path(f.path, "graphs.Rdata"))#
#
lutfile <- cbind(0:(length(V(graphs[[1]]))-1), 0:(length(V(graphs[[1]]))-1))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
## drop forb and natural sites #
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
#
## bee functional traits#
#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
#
site.years <- aggregate(Year~ Site, data=spec,#
                        function(x) length(unique(x)))#
#
sites.to.keep <- site.years$Site[site.years$Year >= 5]
sim(spec)
dim(spec)
dim(spec[spec$Site %in% sites.to.keep,])
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')
names(nets)
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))
f.path <- '../data/networks'#
saveDats(nets, names(networks), f.path)#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))
## *******************************************************************#
## create networks#
## all sites with > 5 years#
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))
qrm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                      agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                    "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
## drop forb and natural sites #
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
#
## add various traits#
## specialization#
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
#
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
occ <- apply(mat, c(3,1), function(x){#
  sum(x > 0, na.rm=TRUE)/sum(x >= 0, na.rm=TRUE)#
})#
findOcc <- function(x){#
  out <- try(occ[x["GenusSpecies"], paste(x["Site"], x["SiteStatusBACI"],#
                                sep=":")], silent=TRUE)#
  if(inherits(out, "try-error")) out <- NA#
  return(out)#
}#
#
spec$occ.date <- apply(spec, 1, findOcc)#
#
## bee functional traits#
#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
#
site.years <- aggregate(Year~ Site, data=spec,#
                        function(x) length(unique(x)))#
#
sites.to.keep <- site.years$Site[site.years$Year >= 5]#
#
## *******************************************************************#
## create networks#
## all sites with > 5 years#
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))#
#
## *******************************************************************#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'baci_networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
  getSpec(species.lev = a,#
          names.net = b),#
  a = species.lev,#
  b = names(networks),#
  SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                            "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                           "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                            "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                           "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                          plant.col$species,#
                                          veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[1]),#
                            years =#
                              sapply(strsplit(names(plant.species),#
                                              "_"),#
                                     function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/all_networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
f.path <- "analysis/changePoint/cptPeel/baci"
names(nets)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly')#
load('data/networks/all_networks_years.Rdata')#
load('data/networks/allSpecimens.Rdata')#
f.path <- "analysis/changePoint/cptPeel/baci"#
#
library(igraph)#
library(parallel)#
library(ape)#
#
## creates matrix of all combinations of plants and pollinators and#
## fills it #
expandNets <- function(sub.mat, all.mat){#
  all.mat[match(rownames(sub.mat), rownames(all.mat)),#
          match(colnames(sub.mat), colnames(all.mat))] <- sub.mat#
  return(all.mat)#
}#
#
pols <- unique(spec$GenusSpecies)#
plants <- unique(spec$PlantGenusSpecies)#
#
all.pp <- matrix(0, nrow=length(plants),#
                 ncol=length(pols))#
rownames(all.pp) <- plants#
colnames(all.pp) <- pols#
#
nets <- rapply(nets, expandNets, all.mat=all.pp,#
               how="replace")#
#
graphs <- lapply(nets, graph.incidence, weighted=TRUE, add.names=NA)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
save(graphs, nets, file=file.path(f.path, "graphs_num.Rdata"))#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
#
## for(i in unique(sites)){#
##   g <- graphs[sites == i]#
##   verts <- sort(unique(unlist(sapply(g, function(x){#
##     V(x)[igraph::degree(x)]#
##   }))))#
##   out <- data.frame(virtual=0:(length(verts) -1), real=verts)#
##   ## colnames(out) <- c("virtual", "real")#
##   write.table(out,  row.names=FALSE, sep="\t",#
##             file=file.path(f.path, sprintf("%s.lut", i)))#
## }#
#
for(i in 1:length(graphs)){#
  write.graph(graphs[[i]], file=file.path(f.path,#
                             sprintf("%s.pairs",#
                                     names(graphs)[i])))#
}#
graphs <- lapply(nets, graph.incidence, weighted=TRUE)#
names(graphs) <- gsub("[.]", "_", names(graphs))#
save(graphs, nets, file=file.path(f.path, "graphs.Rdata"))#
#
lutfile <- cbind(0:(length(V(graphs[[1]]))-1), 0:(length(V(graphs[[1]]))-1))#
colnames(lutfile) <- c("virtual", "real") #
write.table(lutfile,  row.names=FALSE, sep="\t",#
            file=file.path(f.path, "graph-names.lut"))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/cv')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
#
dprime.k.sd <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=sd,#
                        zero2na=TRUE, standard.cv=FALSE,#
                        na.rm=TRUE)#
#
dprime.closeness.sd <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=sd, zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
#
occ.k.sd <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=sd, zero2na=TRUE, standard.cv=FALSE,#
                     na.rm=TRUE)#
save(itd, dprime, dprime.k.sd, dprime.closeness.sd, occ.k.sd,#
     file="saved/contMods.Rdata")#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/cv')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## dprime abundance#
## ************************************************************#
#
dd.dprime <- expand.grid(traits=seq(#
                           from= min(dprime$data$traits),#
                           to= max(dprime$data$traits),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
dprime.pi <- predict.int(mod= dprime$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Coefficient of variation",#
                 dats=dprime$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## dprime network position - k#
## ************************************************************#
#
dprime.pi <- predict.int(mod= dprime.k.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Network position variability",#
                 dats=dprime.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## dprime network position - closeness#
## ************************************************************#
#
dprime.pi.cl <- predict.int(mod= dprime.closeness.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi.cl,#
                 ylabel="Closeness variability",#
                 dats=dprime.closeness.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## itd abundance#
## ************************************************************#
#
dd.itd <- expand.grid(traits=seq(#
                           from= min(itd$data$traits, na.rm=TRUE),#
                           to= max(itd$data$traits, na.rm=TRUE),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
itd.pi <- predict.int(mod= itd$lm,#
                        dd=dd.itd,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=itd.pi,#
                 ylabel="Coefficient of variation",#
                 dats=itd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Body size",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
#
## ************************************************************#
## persistence network position#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.sd$data$traits, na.rm=TRUE),#
                           to= max(occ.k.sd$data$traits, na.rm=TRUE),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
occ.pi <- predict.int(mod= occ.k.sd$lm,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi,#
                 ylabel="Network position variability",#
                 dats=occ.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Persistence",#
                 legend.loc="topleft",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/cv')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## dprime abundance#
## ************************************************************#
#
dd.dprime <- expand.grid(traits=seq(#
                           from= min(dprime$data$traits),#
                           to= max(dprime$data$traits),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
dprime.pi <- predict.int(mod= dprime$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Coefficient of variation",#
                 dats=dprime$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## dprime network position - k#
## ************************************************************#
#
dprime.pi <- predict.int(mod= dprime.k.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Network position variability",#
                 dats=dprime.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## dprime network position - closeness#
## ************************************************************#
#
dprime.pi.cl <- predict.int(mod= dprime.closeness.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi.cl,#
                 ylabel="Closeness variability",#
                 dats=dprime.closeness.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## itd abundance#
## ************************************************************#
#
dd.itd <- expand.grid(traits=seq(#
                           from= min(itd$data$traits, na.rm=TRUE),#
                           to= max(itd$data$traits, na.rm=TRUE),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
itd.pi <- predict.int(mod= itd$lm,#
                        dd=dd.itd,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=itd.pi,#
                 ylabel="Coefficient of variation",#
                 dats=itd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Body size",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
#
## ************************************************************#
## persistence network position#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.sd$data$traits, na.rm=TRUE),#
                           to= max(occ.k.sd$data$traits, na.rm=TRUE),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
occ.pi <- predict.int(mod= occ.k.sd$lm,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi,#
                 ylabel="Network position variability",#
                 dats=occ.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Persistence",#
                 legend.loc="topleft",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)

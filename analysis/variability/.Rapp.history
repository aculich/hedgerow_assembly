rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies))#
#
## sampling dates#
length(unique(paste(spec$Site, spec$Date)))#
#
## families and genera#
length(unique(spec$Family))#
length(unique(spec$Genus))
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)#
#
nets.all <- samp2site.spp(agg.spec$PlantGenusSpecies,#
                          agg.spec$GenusSpecies, agg.spec$abund, FUN=sum)#
#
all.specializations <- specieslevel(nets.all,#
                                    index=c("proportional generality",#
                                      "degree",#
                                      "d"))#
#
traits <- data.frame(GenusSpecies= unlist(sapply(all.specializations,#
                       rownames)),#
                     do.call(rbind, all.specializations))#
rownames(traits) <- NULL#
#
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
                        function(x) length(unique(x)))
spec$d <- traits$d[match(spec$GenusSpecies, traits$GenusSpecies)]#
spec$degree <- traits$degree[match(spec$GenusSpecies,#
                                   traits$GenusSpecies)]#
spec$plant.degree <- traits$degree[match(spec$PlantGenusSpecies,#
                                   traits$GenusSpecies)]
traits$degree
head(traits)
## occurence#
load('~/Dropbox/hedgerow/data_sets/matrices/net/bee.syr.RData')#
#
occ <- apply(mat, c(3,1), calcOccArray)#
spec$occ.date <- apply(spec, 1, findOcc)#
traits$occ.date <- spec$occ.date[match(traits$GenusSpecies,#
                                       spec$GenusSpecies)]#
## plant occurrence#
## create sample matrix#
site.date <- mat[,,1]#
site.date[site.date > 0] <- 0#
rownames(site.date) <- lapply(strsplit(rownames(site.date),":"),#
                              function(x) x[1])#
long.site.date <- comm.mat2sample(site.date)#
long.site.date <- long.site.date[!is.na(long.site.date$Samp),]#
#
## create site by date matrices with plant presence#
plant.mat <- make.by.species(spec, long.site.date, site.date)#
occ.plant <- apply(plant.mat, c(3,1), calcOccArray)#
## match to dataset!#
spec$occ.plant.date <- apply(spec, 1, findOccPlant)#
#
## bee functional traits#
spec$Lecty <-#
  bee.trait$Lecty[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$NestLoc <-#
  bee.trait$NestLoc[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Excavate <-#
  bee.trait$Excavate[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$ITD <-#
  bee.trait$MeanITD[match(spec$GenusSpecies, rownames(bee.trait))]#
spec$Sociality <-#
  bee.trait$Sociality[match(spec$GenusSpecies, rownames(bee.trait))]#
#
## syrphid functional traits#
#
spec$LarvalDiet <- syr.trait$LarvalDiet[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
spec$AdultDiet <- syr.trait$AdultDiet[match(spec$GenusSpecies,#
                                            rownames(syr.trait))]#
spec$WingLength <- syr.trait$WingLength[match(spec$GenusSpecies,#
                                              rownames(syr.trait))]#
#
save(spec, file='../data/networks/allSpecimens.Rdata')#
write.csv(traits, file="../data/traits.csv", row.names=FALSE)#
site.years <- aggregate(Year~ Site, data=spec,#
                        function(x) length(unique(x)))#
#
sites.to.keep <- site.years$Site[site.years$Year >= 5]#
#
## *******************************************************************#
## create networks#
## all sites with > 5 years#
nets <- breakNet(spec[spec$Site %in% sites.to.keep,], 'Site', 'Year')#
#
## save networks for each site, timeframe#
f.path <- '../data/networks'#
save(nets, file=file.path(f.path, 'all_networks_years.Rdata'))#
#
## *******************************************************************#
## keep only BACI sites#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
spec <-  spec[spec$Site %in% BACI.site,]#
veg <-  veg[veg$Site %in% BACI.site,]#
#
veg$ypr <- spec$ypr[match(paste(veg$Year, veg$Site),#
                          paste(spec$Year, spec$Site))]#
#
save(spec, file='../data/networks/specimens.Rdata')#
#
## create a "year" columns grouping years 1-3 post restoration and 4-9#
spec$assem <- 'early'#
spec$assem[spec$ypr > 3] <- 'late'#
#
veg$assem <- 'early'#
veg$assem[veg$ypr > 3] <- 'late'#
#
veg.sum <- aggregate(list(abundance=veg$NumQuads),#
                     list(site=veg$Site,#
                          status=veg$assem,#
                          species=veg$PlantGenusSpecies),#
                     sum)#
#
## *******************************************************************#
## create networks#
#
## by early/late assembly #
networks <- breakNet(spec, 'Site', 'assem')#
#
## save networks for each site, timeframe#
saveDats(networks, names(networks), f.path)#
save(networks, file=file.path(f.path, 'networks_stages.Rdata'))#
#
## for each year#
nets <- breakNet(spec, 'Site', 'Year')#
save(nets, file=file.path(f.path, 'baci_networks_years.Rdata'))#
#
## *******************************************************************#
## specialization of each species at each site#
#
species.lev <- lapply(networks, function(x){#
  sl <- specieslevel(x)#
  sl$'higher level'$tot.int <- colSums(x)#
  sl$'lower level'$tot.int <- rowSums(x)#
  return(sl)#
})#
#
specializations  <-  mapply(function(a, b)#
                            getSpec(species.lev = a,#
                                    names.net = b),#
                            a = species.lev,#
                            b = names(networks),#
                            SIMPLIFY = FALSE)#
#
specializations <- do.call(rbind, specializations)#
rownames(specializations) <- NULL#
#
f.path <- '../data/degree'#
save(specializations, file=file.path(f.path, 'specializations.Rdata'))#
## *******************************************************************#
## change in visits of by the generalized pollinators#
#
## hist(specializations$proportional.generality[specializations$speciesType ==#
##                                              "pollinator"],#
##      xlab="Generalization")#
#
## plants#
diff.gens.plants <- getVisitChange(0, 0.2, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.spec.plants <- getVisitChange(0.5, 1, "proportional.generality",#
                                   "PlantGenusSpecies", "GenusSpecies")#
#
diff.all.plants <- getVisitChange(0, 1, "proportional.generality",#
                                  "PlantGenusSpecies", "GenusSpecies")#
#
## pollinators#
diff.gens.pol <- getVisitChange(0, 0.2, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.spec.pol <- getVisitChange(0.5, 1, "proportional.generality",#
                                "GenusSpecies", "PlantGenusSpecies")#
#
diff.all.pol <- getVisitChange(0, 1, "proportional.generality",#
                               "GenusSpecies", "PlantGenusSpecies")#
#
f.path <- '../data/degree'#
save(diff.gens.plants, diff.spec.plants, diff.all.plants,#
     file=file.path(f.path, 'PlantVisitDiffs.Rdata'))#
write.csv(diff.all.plants,#
          file=file.path(f.path, 'PlantVisitDiffs.csv'), row.names=FALSE)#
#
save(diff.gens.pol, diff.spec.pol, diff.all.pol,#
     file=file.path(f.path, 'PolVisitDiffs.Rdata'))#
write.csv(diff.all.pol,#
          file=file.path(f.path, 'PolVisitDiffs.csv'), row.names=FALSE)#
## *******************************************************************#
## species lists for each site#
#
plants <- getSpecies(networks, rownames)#
pols <- getSpecies(networks, rownames)#
#
f.path <- '../data/species'#
write.csv(plants, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
save(plants, file=file.path(f.path, 'plants.Rdata'))#
#
write.csv(pols, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
save(pols, file=file.path(f.path, 'pols.Rdata'))#
#
## *******************************************************************#
## species added between early and late stages#
#
plant.diffs <- getColExt(plants)#
pol.diffs <- getColExt(pols)#
#
f.path <- '../data/speciesChange'#
write.csv(plant.diffs, file.path(f.path, 'plants.csv'),#
          row.names=FALSE)#
#
write.csv(pol.diffs, file.path(f.path, 'pollinators.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## total plants at a site#
f.path <- '../data/species'#
plants <- plants[,-2]#
plants <- unique(plants)#
write.csv(plants, file.path(f.path, 'plants_all.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## pollinator and plant degrees by years post restoration#
spec$all <- 'all'#
#
yr.networks <- breakNet(spec, 'all', 'assem')#
#
d.pol <- lapply(yr.networks, colSums)#
d.plant <- lapply(yr.networks, rowSums)#
#
f.path <- '../data/degree'#
saveDats(d.pol, paste(names(d.pol), 'pollinators', sep="_"), f.path)#
saveDats(d.plant, paste(names(d.plant), 'plants', sep="_"), f.path)#
#
by.year <- data.frame(t(sapply(c(d.plant, d.pol), calcStats)))#
by.year$group <- rep(c('plants','pollinators'), each=2)#
by.year$assembly <- rep(c('early', 'late'), 2)#
#
write.csv(by.year, file.path(f.path, 'stats_by_yr.csv'))#
#
## *******************************************************************#
## pollinator and plant degrees across all years and sites#
#
all.networks <- breakNet(spec, 'all', 'all')#
#
d.pol.all <- lapply(all.networks, colSums)#
d.plant.all <- lapply(all.networks, rowSums)#
#
saveDats(d.pol.all, 'across_yrs_pollinators', f.path)#
saveDats(d.plant.all, 'across_yrs_plants', f.path)#
#
all.dats <- data.frame(t(sapply(c(d.plant.all, d.pol.all), calcStats)))#
all.dats$group <- c('plants','pollinators')#
#
write.csv(all.dats, file.path(f.path, 'stats_across_yrs.csv'))#
#
## *******************************************************************#
## characteristics of plant colonists#
plant.col <- plant.diffs[plant.diffs$class == "colonist",]#
#
plant.col$earlyAbund <- veg.sum$abundance[veg.sum$status ==#
                                          "early"][match(#
                                            plant.col$species,#
                                            veg.sum$species)]#
plant.col$lateAbund <- veg.sum$abundance[veg.sum$status ==#
                                         "late"][match(#
                                           plant.col$species,#
                                           veg.sum$species)]#
#
plant.col$degree <- d.plant$all_late[match(plant.col$species,#
                                           names(d.plant$all_late))]#
#
## number of species that interact#
con.plant <- lapply(yr.networks, getCon, 1)#
#
plant.col$partners <- con.plant$all_late[match(plant.col$species,#
                                               names(con.plant$all_late))]#
f.path <- '../data/speciesChange'#
write.csv(plant.col, file.path(f.path, 'plants_char.csv'),#
          row.names=FALSE)#
#
## *******************************************************************#
## stable network structure#
networks.by.year <- breakNet(spec, 'Site', 'Year')#
#
plant.species <- sapply(networks.by.year, nrow)#
plant.species <- data.frame(richness=plant.species,#
                            sites =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[1]),#
                            years =#
                            sapply(strsplit(names(plant.species),#
                                            "_"),#
                                   function(x) x[2]))#
write.csv(plant.species, file.path(f.path, 'plants_change.csv'),#
          row.names=FALSE)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)
plants.degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="plant",],#
                        trait="plant.degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE,#
                               species.type="PlantGenusSpecies")
summary(plants.degree.k.cv$lm.nss)
plant.degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="plant",],#
                                trait="plant.degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE,#
                                species.type="PlantGenusSpecies")#
summary(plant.degree.closeness.cv$lm.nss)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## medium sig#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=FALSE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=FALSE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=FALSE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## not sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## not sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=FALSE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plant.degree.closeness.cv <- cv.trait(spec,#
                                      specs[specs$speciesType =="plant",],#
                                      trait="plant.degree",#
                                      method= "time", time.col="assem",#
                                      abund.col="weighted.closeness",#
                                      cv.function=cv,#
                                      zero2na=TRUE,#
                                      standard.cv=FALSE,#
                                      na.rm=TRUE,#
                                      species.type="PlantGenusSpecies")#
summary(plant.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.sd, dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## medium sig#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=FALSE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=FALSE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=FALSE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## not sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## not sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=FALSE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=FALSE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
matrix(1:4, nrow=2, byrow=TRUE
)
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
## ************************************************************#
## dprime network position - k#
## ************************************************************#
#
dd.dprime <- expand.grid(traits=seq(#
                           from= min(dprime$data$traits),#
                           to= max(dprime$data$traits),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
dprime.pi <- predict.int(mod= dprime.k.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Network position variability",#
                 dats=dprime.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
#
## ************************************************************#
## dprime network position - closeness#
## ************************************************************#
#
dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi.cl,#
                 ylabel="Closeness variability",#
                 dats=dprime.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence k#
## ************************************************************#
occ.k.sd$data$SiteStatus <- "all"#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.sd$data$traits, na.rm=TRUE),#
                           to= max(occ.k.sd$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
#
occ.pi.k <- predict.int(mod= occ.k.sd$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.k,#
                 ylabel="Network position variability (k)",#
                 dats=occ.k.sd$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')
ls()
occ.k.cv$data$SiteStatus <- "all"#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
#
occ.pi.k <- predict.int(mod= occ.k.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.k,#
                 ylabel="Network position variability (k)",#
                 dats=occ.k.cv$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")
plot.predict.div(new.dd=occ.pi.close,#
                 ylabel="Network closeness variability",#
                 dats=occ.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.close,#
                 ylabel="Network closeness variability",#
                 dats=occ.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
degree.closeness.cv$data$SiteStatus <- "all"#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")#
#
plot.panels()
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")
degree.closeness.cv$data$SiteStatus <- "all"#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence k#
## ************************************************************#
occ.k.cv$data$SiteStatus <- "all"#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
#
occ.pi.k <- predict.int(mod= occ.k.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.k,#
                 ylabel="Network position variability (k)",#
                 dats=occ.k.cv$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.close,#
                 ylabel="Network closeness variability",#
                 dats=occ.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
## ************************************************************#
## degree k#
## ************************************************************#
degree.k.cv$data$SiteStatus <- "all"#
dd.degree <- expand.grid(traits=seq(#
                           from= min(degree.k.cv$data$traits, na.rm=TRUE),#
                           to= max(degree.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                         ## SiteStatus= c("control", "maturing",#
                      ## "mature"),#
                      SiteStatus="all",#
                         cv= 0)#
#
degree.pi <- predict.int(mod= degree.k.sd$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## medium sig#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=FALSE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=FALSE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=FALSE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## not sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## not sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=FALSE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=FALSE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence k#
## ************************************************************#
occ.k.cv$data$SiteStatus <- "all"#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
#
occ.pi.k <- predict.int(mod= occ.k.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.k,#
                 ylabel="Network position variability (k)",#
                 dats=occ.k.cv$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.close,#
                 ylabel="Network closeness variability",#
                 dats=occ.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
## ************************************************************#
## degree k#
## ************************************************************#
degree.k.cv$data$SiteStatus <- "all"#
dd.degree <- expand.grid(traits=seq(#
                           from= min(degree.k.cv$data$traits, na.rm=TRUE),#
                           to= max(degree.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                         ## SiteStatus= c("control", "maturing",#
                      ## "mature"),#
                      SiteStatus="all",#
                         cv= 0)#
#
degree.pi <- predict.int(mod= degree.k.sd$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=degree.pi,#
                 ylabel="Network position variability (k)",#
                 dats=degree.k.cv$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator degree",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence k#
## ************************************************************#
occ.k.cv$data$SiteStatus <- "all"#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
#
occ.pi.k <- predict.int(mod= occ.k.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.k,#
                 ylabel="Network position variability (k)",#
                 dats=occ.k.cv$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi.close,#
                 ylabel="Network closeness variability",#
                 dats=occ.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')#
#
## ************************************************************#
## degree k#
## ************************************************************#
degree.k.cv$data$SiteStatus <- "all"#
dd.degree <- expand.grid(traits=seq(#
                           from= min(degree.k.cv$data$traits, na.rm=TRUE),#
                           to= max(degree.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                         ## SiteStatus= c("control", "maturing",#
                      ## "mature"),#
                      SiteStatus="all",#
                         cv= 0)#
#
degree.pi <- predict.int(mod= degree.k.cv$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=degree.pi,#
                 ylabel="Network position variability (k)",#
                 dats=degree.k.cv$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator degree",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')#
#
## ************************************************************#
## degree closeness#
## ************************************************************#
degree.closeness.cv$data$SiteStatus <- "all"#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")#
#
## plot.predict.div(new.dd=degree.pi,#
##                  ylabel="Network closeness variability",#
##                  dats=degree.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Pollinator degree",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  treatments="all",#
##                  col.lines="black",#
##                  f.path='figures/cv',#
##                  dec=0)#
#
plot.panels()#
## ************************************************************#
## dprime network position - k#
## ************************************************************#
#
dd.dprime <- expand.grid(traits=seq(#
                           from= min(dprime$data$traits),#
                           to= max(dprime$data$traits),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Network position variability",#
                 dats=dprime.k.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
#
## ************************************************************#
## dprime network position - closeness#
## ************************************************************#
#
dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi.cl,#
                 ylabel="Closeness variability",#
                 dats=dprime.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
## ************************************************************#
## itd abundance#
## ************************************************************#
#
dd.itd <- expand.grid(traits=seq(#
                           from= min(itd$data$traits, na.rm=TRUE),#
                           to= max(itd$data$traits, na.rm=TRUE),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
itd.pi <- predict.int(mod= itd$lm,#
                        dd=dd.itd,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=itd.pi,#
                 ylabel="Coefficient of variation",#
                 dats=itd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Body size",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
## ************************************************************#
## dprime abundance#
## ************************************************************#
#
dprime.pi <- predict.int(mod= dprime$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Coefficient of variation",#
                 dats=dprime$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.close.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.close.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)
ls()
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.closeness.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.closeness.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)
dd.occ
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ.pol,#
                        y="cv",#
                        family="gaussian")
dd.occ.pol <- expand.grid(traits=seq(#
                           from= min(occ.closeness.cv$data$traits, na.rm=TRUE),#
                           to= max(occ.closeness.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ.pol,#
                        y="cv",#
                        family="gaussian")
dd.occ.plant <- expand.grid(traits=seq(#
                           from=#
                           min(plant.occ.closeness.cv$data$traits,#
                               na.rm=TRUE),#
                           to= max(plant.occ.closeness.cv$data$traits,#
                             na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)
ls()
dd.occ.plant <- expand.grid(traits=seq(#
                           from=#
                           min(plants.occ.closeness.cv$data$traits,#
                               na.rm=TRUE),#
                           to= max(plants.occ.closeness.cv$data$traits,#
                             na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ.pol,#
                        y="cv",#
                        family="gaussian")#
#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                        dd=dd.occ.plants,#
                        y="cv",#
                        family="gaussian")
dd.occ.plants <- expand.grid(traits=seq(#
                           from=#
                           min(plants.occ.closeness.cv$data$traits,#
                               na.rm=TRUE),#
                           to= max(plants.occ.closeness.cv$data$traits,#
                             na.rm=TRUE),#
                           length=10),#
                      SiteStatus="all",#
                         cv= 0)#
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ.pol,#
                        y="cv",#
                        family="gaussian")#
#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                        dd=dd.occ.plants,#
                        y="cv",#
                        family="gaussian")
plant.occ.pi.close
plants.occ.pi.close
## ************************************************************#
## degree k#
## ************************************************************#
dd.degree.pol <- expand.grid(traits=seq(#
                               from= min(degree.k.cv$data$traits, na.rm=TRUE),#
                               to= max(degree.k.cv$data$traits, na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
dd.degree.plants <- expand.grid(traits=seq(#
                                  from= min(plants.degree.k.cv$data$traits,#
                                    na.rm=TRUE),#
                                  to= max(plants.degree.k.cv$data$traits,#
                                    na.rm=TRUE),#
                                  length=10),#
                                SiteStatus="all",#
                                cv= 0)#
## pols#
#
degree.k.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.k.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.k.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants/degree.k.cv$lm.nss,#
                         dd=dd.degree.plants,#
                         y="cv",#
                         family="gaussian")
degree.pi <- predict.int(mod= degree.k.cv$lm.nss,#
                         dd=dd.degree.pol,#
                         y="cv",#
                         family="gaussian")
plants.degree.pi <- predict.int(mod= plants.degree.k.cv$lm.nss,#
                         dd=dd.degree.plants,#
                         y="cv",#
                         family="gaussian")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
#
dd.occ.pol <- expand.grid(traits=seq(#
                            from= min(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            to= max(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            length=10),#
                          SiteStatus="all",#
                          cv= 0)#
#
dd.occ.plants <- expand.grid(traits=seq(#
                               from=#
                               min(plants.occ.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to= max(plants.occ.closeness.cv$data$traits,#
                                 na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ.pol,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ.plants,#
                                   y="cv",#
                                   family="gaussian")
dd.degree.pol <- expand.grid(traits=seq(#
                               from=#
                               min(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to=#
                               max(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
dd.degree.plants <- expand.grid(traits=seq(#
                                  from= min(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  to= max(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  length=10),#
                                SiteStatus="all",#
                                cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree.pol,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree.plants,#
                                y="cv",#
                                family="gaussian")
plants.occ.pi
occ.pi.plant
ls()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ.pol <- expand.grid(traits=seq(#
                            from= min(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            to= max(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            length=10),#
                          SiteStatus="all",#
                          cv= 0)#
#
dd.occ.plants <- expand.grid(traits=seq(#
                               from=#
                               min(plants.occ.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to= max(plants.occ.closeness.cv$data$traits,#
                                 na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ.pol,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ.plants,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree.pol <- expand.grid(traits=seq(#
                               from=#
                               min(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to=#
                               max(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
dd.degree.plants <- expand.grid(traits=seq(#
                                  from= min(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  to= max(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  length=10),#
                                SiteStatus="all",#
                                cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree.pol,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree.plants,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ************************************************************#
## dprime network position - k#
## ************************************************************#
#
dd.dprime <- expand.grid(traits=seq(#
                           from= min(dprime$data$traits),#
                           to= max(dprime$data$traits),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
                         dd=dd.dprime,#
                         y="cv",#
                         family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Network position variability",#
                 dats=dprime.k.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
#
## ************************************************************#
## dprime network position - closeness#
## ************************************************************#
#
dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
                            dd=dd.dprime,#
                            y="cv",#
                            family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi.cl,#
                 ylabel="Closeness variability",#
                 dats=dprime.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
## ************************************************************#
## itd abundance#
## ************************************************************#
#
dd.itd <- expand.grid(traits=seq(#
                        from= min(itd$data$traits, na.rm=TRUE),#
                        to= max(itd$data$traits, na.rm=TRUE),#
                        length=10),#
                      SiteStatus= c("control", "maturing", "mature"),#
                      cv= 0)#
#
itd.pi <- predict.int(mod= itd$lm,#
                      dd=dd.itd,#
                      y="cv",#
                      family="gaussian")#
#
plot.predict.div(new.dd=itd.pi,#
                 ylabel="Coefficient of variation",#
                 dats=itd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Body size",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
## ************************************************************#
## dprime abundance#
## ************************************************************#
#
dprime.pi <- predict.int(mod= dprime$lm,#
                         dd=dd.dprime,#
                         y="cv",#
                         family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Coefficient of variation",#
                 dats=dprime$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ.pol <- expand.grid(traits=seq(#
                            from= min(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            to= max(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            length=10),#
                          SiteStatus="all",#
                          cv= 0)#
#
dd.occ.plants <- expand.grid(traits=seq(#
                               from=#
                               min(plants.occ.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to= max(plants.occ.closeness.cv$data$traits,#
                                 na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ.pol,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ.plants,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree.pol <- expand.grid(traits=seq(#
                               from=#
                               min(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to=#
                               max(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
dd.degree.plants <- expand.grid(traits=seq(#
                                  from= min(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  to= max(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  length=10),#
                                SiteStatus="all",#
                                cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree.pol,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree.plants,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ.pol <- expand.grid(traits=seq(#
                            from= min(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            to= max(occ.closeness.cv$data$traits,#
                              na.rm=TRUE),#
                            length=10),#
                          SiteStatus="all",#
                          cv= 0)#
#
dd.occ.plants <- expand.grid(traits=seq(#
                               from=#
                               min(plants.occ.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to= max(plants.occ.closeness.cv$data$traits,#
                                 na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ.pol,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ.plants,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree.pol <- expand.grid(traits=seq(#
                               from=#
                               min(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               to=#
                               max(degree.closeness.cv$data$traits,#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
dd.degree.plants <- expand.grid(traits=seq(#
                                  from= min(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  to= max(#
                                    plants.degree.closeness.cv$data$traits,#
                                    na.rm=TRUE),#
                                  length=10),#
                                SiteStatus="all",#
                                cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree.pol,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree.plants,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
seq(range(1:10))
range(1:10)
seq(range(1:10))
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits)#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
?pretty
?pretty
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
sqrt(0)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
sqrt(0)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)
head(dats)
dats$cv
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
## plants and k#
## medium sig#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
## plants and k#
## medium sig#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)
## pollinators and closeness#
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)
summary(occ.k.cv$lm.nss)
summary(plants.occ.k.cv$lm.nss)
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## not sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
source("plotting/src/plotPanels.R")
plot.panels()
source("plotting/src/plotPanels.R")
plot.panels()
source("plotting/src/plotPanels.R")
plot.panels()
source("plotting/src/plotPanels.R")
plot.panels()
source("plotting/src/plotPanels.R")
plot.panels()
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
plants.occ.pi.close
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=10),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
pretty(dats[,xs], 5)
labels= round((pretty(dats[,xs], 5)*#
             sd(dats[, "traits.ns"], na.rm=TRUE)) +#
             mean(dats[, "traits.ns"], na.rm=TRUE), dec)
labels
pretty(dats[,xs], 5)
dec
sd(dats[, "traits.ns"], na.rm=TRUE)
mean(dats[, "traits.ns"], na.rm=TRUE)
(pretty(dats[,xs], 5)*#
             sd(dats[, "traits.ns"], na.rm=TRUE)) +#
             mean(dats[, "traits.ns"], na.rm=TRUE)
head(dats)
nead.dd
new.dd
new.dd[,xs]
round((pretty(new.dd[,xs], 5)*#
             sd(dats[, "traits.ns"], na.rm=TRUE)) +#
             mean(dats[, "traits.ns"], na.rm=TRUE), dec)
round((pretty(new.dd[,xs], 5)*#
             sd(dats[, "traits.ns"], na.rm=TRUE)) +#
             mean(dats[, "traits.ns"], na.rm=TRUE), dec)
(pretty(new.dd[,xs], 5)
)
Q
## ************************************************************#
dd.occ
range(occ.closeness.cv$data$traits)
range(occ.closeness.cv$data$traits, na.rm=TRUE)
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)
dd.occ
range(occ.closeness.cv$data$traits, na.rm=TRUE)
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
dd.occ
occ.closeness.cv$data$traits
head(occ.closeness.cv$data$traits)
head(occ.closeness.cv$data)
names(degree.closeness.cv)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits.ns=seq(#
                        from= min(c(occ.closeness.cv$data$traits.ns,#
                          plants.occ.closeness.cv$data$traits.ns),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits.ns,#
                          plants.occ.closeness.cv$data$traits.ns),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits.ns=seq(#
                        from= min(c(occ.closeness.cv$data$traits.ns,#
                          plants.occ.closeness.cv$data$traits.ns),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits.ns,#
                          plants.occ.closeness.cv$data$traits.ns),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()
plot(density(residuals(degree.closeness.cv$lm.nss)))
plot(density(residuals(plants.degree.closeness.cv$lm.nss)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)
plot(hist(dats$cv[!is.na(dats$cv)]))
dats$cv
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## ************************************************************#
## occurrence#
## ************************************************************#
## pollinators and k#
## sig!#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=TRUE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)
## plants and k#
## not sig!#
plants.occ.k.cv <- cv.trait(spec,#
                            specs[specs$speciesType =="plant",],#
                            trait="occ.plant.date",#
                            method= "time", time.col="assem",#
                            abund.col="k",#
                            cv.function=cv,#
                            zero2na=TRUE,#
                            standard.cv=TRUE,#
                            na.rm=TRUE,#
                            species.type="PlantGenusSpecies")#
summary(plants.occ.k.cv$lm.nss)
## pollinators and closeness#
## sig#
occ.closeness.cv <- cv.trait(spec,#
                             specs[specs$speciesType =="pollinator",],#
                             trait="occ.date",#
                             method= "time", time.col="assem",#
                             abund.col="weighted.closeness",#
                             cv.function=cv,#
                             zero2na=TRUE,#
                             standard.cv=TRUE,#
                             na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig#
plants.occ.closeness.cv <- cv.trait(spec,#
                                    specs[specs$speciesType =="plant",],#
                                    trait="occ.plant.date",#
                                    method= "time", time.col="assem",#
                                    abund.col="weighted.closeness",#
                                    cv.function=cv,#
                                    zero2na=TRUE,#
                                    standard.cv=TRUE,#
                                    na.rm=TRUE,#
                                    species.type="PlantGenusSpecies")#
summary(plants.occ.closeness.cv$lm.nss)#
#
## ************************************************************#
## degree#
## ************************************************************#
## pollinators and k#
## sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## plants and k#
## sig#
plants.degree.k.cv <- cv.trait(spec,#
                               specs[specs$speciesType =="plant",],#
                               trait="plant.degree",#
                               method= "time", time.col="assem",#
                               abund.col="k",#
                               cv.function=cv,#
                               zero2na=TRUE,#
                               standard.cv=TRUE,#
                               na.rm=TRUE,#
                               species.type="PlantGenusSpecies")#
summary(plants.degree.k.cv$lm.nss)#
#
## pollinators and closeness#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="degree",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
#
## plants and closeness#
## not sig!#
plants.degree.closeness.cv <- cv.trait(spec,#
                                       specs[specs$speciesType =="plant",],#
                                       trait="plant.degree",#
                                       method= "time", time.col="assem",#
                                       abund.col="weighted.closeness",#
                                       cv.function=cv,#
                                       zero2na=TRUE,#
                                       standard.cv=TRUE,#
                                       na.rm=TRUE,#
                                       species.type="PlantGenusSpecies")#
summary(plants.degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=TRUE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.cv, dprime.closeness.cv,#
     occ.k.cv, occ.closeness.cv,#
     plants.occ.k.cv, plants.occ.closeness.cv,#
     degree.k.cv, degree.closeness.cv,#
     plants.degree.k.cv, plants.degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
dd.occ <- expand.grid(traits=seq(#
                        from= min(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        to= max(c(occ.closeness.cv$data$traits,#
                          plants.occ.closeness.cv$data$traits),#
                          na.rm=TRUE),#
                        length=20),#
                      SiteStatus="all",#
                      cv= 0)#
#
## pols#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi.close <- predict.int(mod= occ.closeness.cv$lm.nss,#
                            dd=dd.occ,#
                            y="cv",#
                            family="gaussian")#
#
## plants#
plants.occ.closeness.cv$data$SiteStatus <- "all"#
plants.occ.pi.close <- predict.int(mod= plants.occ.closeness.cv$lm.nss,#
                                   dd=dd.occ,#
                                   y="cv",#
                                   family="gaussian")#
## ************************************************************#
## degree closeness#
## ************************************************************#
dd.degree <- expand.grid(traits=seq(#
                               from=#
                               min(c(degree.closeness.cv$data$traits,#
                                     plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               to=#
                               max(c(degree.closeness.cv$data$traits,#
                                      plants.degree.closeness.cv$data$traits),#
                                   na.rm=TRUE),#
                               length=10),#
                             SiteStatus="all",#
                             cv= 0)#
## pols#
#
degree.closeness.cv$data$SiteStatus <- "all"#
#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                         dd=dd.degree,#
                         y="cv",#
                         family="gaussian")#
#
## plants#
plants.degree.closeness.cv$data$SiteStatus <- "all"#
#
plants.degree.pi <- predict.int(mod= plants.degree.closeness.cv$lm.nss,#
                                dd=dd.degree,#
                                y="cv",#
                                family="gaussian")#
plot.panels()#
## ## ************************************************************#
## ## dprime network position - k#
## ## ************************************************************#
#
## dd.dprime <- expand.grid(traits=seq(#
##                            from= min(dprime$data$traits),#
##                            to= max(dprime$data$traits),#
##                            length=10),#
##                          SiteStatus= c("control", "maturing", "mature"),#
##                          cv= 0)#
#
## dprime.pi <- predict.int(mod= dprime.k.cv$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Network position variability",#
##                  dats=dprime.k.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
#
## ## ************************************************************#
## ## dprime network position - closeness#
## ## ************************************************************#
#
## dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
##                             dd=dd.dprime,#
##                             y="cv",#
##                             family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi.cl,#
##                  ylabel="Closeness variability",#
##                  dats=dprime.closeness.cv$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="topright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## itd abundance#
## ## ************************************************************#
#
## dd.itd <- expand.grid(traits=seq(#
##                         from= min(itd$data$traits, na.rm=TRUE),#
##                         to= max(itd$data$traits, na.rm=TRUE),#
##                         length=10),#
##                       SiteStatus= c("control", "maturing", "mature"),#
##                       cv= 0)#
#
## itd.pi <- predict.int(mod= itd$lm,#
##                       dd=dd.itd,#
##                       y="cv",#
##                       family="gaussian")#
#
## plot.predict.div(new.dd=itd.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=itd$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Body size",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')#
## ## ************************************************************#
## ## dprime abundance#
## ## ************************************************************#
#
## dprime.pi <- predict.int(mod= dprime$lm,#
##                          dd=dd.dprime,#
##                          y="cv",#
##                          family="gaussian")#
#
## plot.predict.div(new.dd=dprime.pi,#
##                  ylabel="Coefficient of variation",#
##                  dats=dprime$data,#
##                  xs="traits",#
##                  y1="cv",#
##                  xlabel="Specialization",#
##                  legend.loc="bottomright",#
##                  height=5,#
##                  width=5,#
##                  x.adj=0.5,#
##                  f.path='figures/cv')

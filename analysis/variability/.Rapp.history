rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
source('src/lapacian_functions.R')#
#
fig.path <- '../speciesLevel/Figures'#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
status.table<- table(spec$Site, spec$SiteStatus)#
status.table<-as.data.frame(cbind(rownames(status.table), colnames(status.table)[apply(status.table,1,which.max)]))#
colnames(status.table)<- c("site", "status")#
#
all.alg.Con<-t(do.call(cbind.data.frame, lapply(nets, algCone)))#
all.alg.Con<-as.data.frame(cbind(sites,years, all.alg.Con))#
colnames(all.alg.Con)<-c("site", "year","Ncomp", "AlgCon")#
#
## final table#
all.alg.Con.status<-merge(x=all.alg.Con,#
                          y= status.table,#
                          by.x="site",#
                          by.y="site")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
source('src/lapacian_functions.R')
source('src/laplacian_functions.R')
fig.path <- '../speciesLevel/Figures'#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
status.table<- table(spec$Site, spec$SiteStatus)#
status.table<-as.data.frame(cbind(rownames(status.table), colnames(status.table)[apply(status.table,1,which.max)]))#
colnames(status.table)<- c("site", "status")#
#
all.alg.Con<-t(do.call(cbind.data.frame, lapply(nets, algCone)))#
all.alg.Con<-as.data.frame(cbind(sites,years, all.alg.Con))#
colnames(all.alg.Con)<-c("site", "year","Ncomp", "AlgCon")#
#
## final table#
all.alg.Con.status<-merge(x=all.alg.Con,#
                          y= status.table,#
                          by.x="site",#
                          by.y="site")
all.alg.Con.Status
all.alg.Con.status
all.alg.Con.Status$ypr <- spec$ypr[match(paste(spec$Site, spec$Year),#
                                         paste(all.alg.Con.status$site,#
                                               all.alg.Con.status$year))]
all.alg.Con.status$ypr <- spec$ypr[match(paste(spec$Site, spec$Year),#
                                         paste(all.alg.Con.status$site,#
                                               all.alg.Con.status$year))]
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$site,#
                                               all.alg.Con.status$year),#
                                         paste(spec$Site, spec$Year))]
all.alg.Con.status
all.alg.Con.status$ypr[!all.alg.Con.status$site %in% baci.sites] <- NA
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")#
#
all.alg.Con.status$ypr[!all.alg.Con.status$site %in% baci.sites] <- NA
all.alg.Con.status
alg.con.mod <- lmer(all.alg.Con.status$AlgCon ~#
                    all.alg.Con.status$status +#
                    (1|site) + (1|year),    #
                    data=all.alg.Con.status)#
#
summary(alg.con.mod)#
alg.con.mod.ypr <- lmer(all.alg.Con.status$AlgCon ~#
                        all.alg.Con.status$ypr +#
                        (1|site) + (1|year),    #
                        data=all.alg.Con.status)#
summary(alg.con.mod.ypr)
all.alg.Con.status$AlgCon
all.alg.Con.status$AlgCon <- as.numeric(all.alg.Con.status$AlgCon)
all.alg.Con.status$AlgCon
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
source('src/laplacian_functions.R')#
#
fig.path <- '../speciesLevel/Figures'#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
status.table <- table(spec$Site, spec$SiteStatus)#
status.table <- as.data.frame(cbind(rownames(status.table),#
                                    colnames(status.table)[apply(status.table,#
                                                            1, which.max)]))#
colnames(status.table)<- c("site", "status")#
#
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))#
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))#
colnames(all.alg.Con) <- c("site", "year","Ncomp", "AlgCon")#
#
## add status#
all.alg.Con.status <- merge(x=all.alg.Con,#
                            y= status.table,#
                            by.x="site",#
                            by.y="site")#
#
## add ypr#
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$site,#
                                               all.alg.Con.status$year),#
                                         paste(spec$Site, spec$Year))]#
#
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")#
#
all.alg.Con.status$ypr[!all.alg.Con.status$site %in% baci.sites] <- NA#
#
## change AlgCon to numeric (it is a factor for some reason..)#
all.alg.Con.status$AlgCon <- as.numeric(as.character((all.alg.Con.status$AlgCon))
)
all.alg.Con.status$AlgCon
alg.con.mod <- lmer(all.alg.Con.status$AlgCon ~#
                    all.alg.Con.status$status +#
                    (1|site) + (1|year),    #
                    data=all.alg.Con.status)
summary(alg.con.mod)
library(lmerTest)
alg.con.mod <- lmer(all.alg.Con.status$AlgCon ~#
                    all.alg.Con.status$status +#
                    (1|site) + (1|year),    #
                    data=all.alg.Con.status)#
#
summary(alg.con.mod)
alg.con.mod.ypr <- lmer(all.alg.Con.status$AlgCon ~#
                        all.alg.Con.status$ypr +#
                        (1|site) + (1|year),    #
                        data=all.alg.Con.status)#
summary(alg.con.mod.ypr)
rm(list=ls())#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
source('src/laplacian_functions.R')#
#
fig.path <- '../speciesLevel/Figures'#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
status.table <- table(spec$Site, spec$SiteStatus)#
status.table <- as.data.frame(cbind(rownames(status.table),#
                                    colnames(status.table)[apply(status.table,#
                                                            1, which.max)]))#
colnames(status.table)<- c("site", "status")#
#
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))#
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))#
colnames(all.alg.Con) <- c("site", "year","Ncomp", "AlgCon")#
#
## add status#
all.alg.Con.status <- merge(x=all.alg.Con,#
                            y= status.table,#
                            by.x="site",#
                            by.y="site")#
#
## add ypr#
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$site,#
                                               all.alg.Con.status$year),#
                                         paste(spec$Site, spec$Year))]#
#
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")#
#
all.alg.Con.status$ypr[!all.alg.Con.status$site %in% baci.sites] <- NA#
#
## change AlgCon to numeric (it is a factor for some reason..)#
all.alg.Con.status$AlgCon <- as.numeric(as.character(#
  all.alg.Con.status$AlgCon))#
#
alg.con.mod <- lmer(all.alg.Con.status$AlgCon ~#
                    all.alg.Con.status$status +#
                    (1|site) + (1|year),    #
                    data=all.alg.Con.status)#
#
summary(alg.con.mod)#
alg.con.mod.ypr <- lmer(all.alg.Con.status$AlgCon ~#
                        all.alg.Con.status$ypr +#
                        (1|site) + (1|year),    #
                        data=all.alg.Con.status)#
summary(alg.con.mod.ypr)#
#
save(alg.con.mod.ypr, file="saved/mods/AlgCon.Rdata")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')
save.path
rm(list=ls())#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
source('src/laplacian_functions.R')#
#
fig.path <- '../speciesLevel/Figures'#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
status.table <- table(spec$Site, spec$SiteStatus)#
status.table <- as.data.frame(cbind(rownames(status.table),#
                                    colnames(status.table)[apply(status.table,#
                                                            1, which.max)]))#
colnames(status.table)<- c("site", "status")#
#
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))#
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))#
colnames(all.alg.Con) <- c("site", "year","Ncomp", "AlgCon")#
#
## add status#
all.alg.Con.status <- merge(x=all.alg.Con,#
                            y= status.table,#
                            by.x="site",#
                            by.y="site")#
#
## add ypr#
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$site,#
                                               all.alg.Con.status$year),#
                                         paste(spec$Site, spec$Year))]#
#
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")#
#
all.alg.Con.status$ypr[!all.alg.Con.status$site %in% baci.sites] <- NA#
#
## change AlgCon to numeric (it is a factor for some reason..)#
all.alg.Con.status$AlgCon <- as.numeric(as.character(#
  all.alg.Con.status$AlgCon))#
#
alg.con.mod <- lmer(all.alg.Con.status$AlgCon ~#
                    all.alg.Con.status$status +#
                    (1|site) + (1|year),    #
                    data=all.alg.Con.status)#
#
summary(alg.con.mod)#
alg.con.mod.ypr <- lmer(all.alg.Con.status$AlgCon ~#
                        all.alg.Con.status$ypr +#
                        (1|site) + (1|year),    #
                        data=all.alg.Con.status)#
summary(alg.con.mod.ypr)#
#
save(alg.con.mod.ypr, all.alg.Con.status, file="saved/mods/AlgCon.Rdata")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)
dd <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr, na.rm=TRUE),#
                          to= max(all.alg.Con.status$ypr, na.rm=TRUE),#
                          length=10))
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr, na.rm=TRUE),#
                          to= max(all.alg.Con.status$ypr, na.rm=TRUE),#
                          length=10))
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr, na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr, na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr,#
                        y="AlgCon",#
                        family="gaussian")
dd
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr, na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr, na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr,#
                        y="AlgCon",#
                        family="gaussian")
dd.ypr <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr, na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr, na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)
dd.ypr
alg.con.mod.ypr
ypr.pi <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr,#
                        y="AlgCon",#
                        family="gaussian")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)
dd.ypr
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)
dd.ypr.alg
rm(list=ls())#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
source('src/laplacian_functions.R')#
#
fig.path <- '../speciesLevel/Figures'#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
status.table <- table(spec$Site, spec$SiteStatus)#
status.table <- as.data.frame(cbind(rownames(status.table),#
                                    colnames(status.table)[apply(status.table,#
                                                            1, which.max)]))#
colnames(status.table)<- c("site", "status")#
#
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))#
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))#
colnames(all.alg.Con) <- c("site", "year","Ncomp", "AlgCon")#
#
## add status#
all.alg.Con.status <- merge(x=all.alg.Con,#
                            y= status.table,#
                            by.x="site",#
                            by.y="site")#
#
## add ypr#
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$site,#
                                               all.alg.Con.status$year),#
                                         paste(spec$Site, spec$Year))]#
#
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")#
#
all.alg.Con.status$ypr[!all.alg.Con.status$site %in% baci.sites] <- NA#
#
## change AlgCon to numeric (it is a factor for some reason..)#
all.alg.Con.status$AlgCon <- as.numeric(as.character(#
  all.alg.Con.status$AlgCon))#
#
alg.con.mod <- lmer(AlgCon ~ status +#
                    (1|site) + (1|year),    #
                    data=all.alg.Con.status)#
#
summary(alg.con.mod)#
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +#
                        (1|site) + (1|year),    #
                        data=all.alg.Con.status)#
summary(alg.con.mod.ypr)#
#
save(alg.con.mod.ypr, all.alg.Con.status,#
     file="saved/mods/AlgCon.Rdata")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))
ls()
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)
dd.yrp.alg
dd.ypr.alg
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")
ypr.pi.alg
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness to \n species extinction",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)#
#
## ************************************************************#
## robustness to perturbation#
## ************************************************************#
#
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi.alg,#
                 ylabel="Robustness to perturbation",#
                 dats=all.alg.Con.status,#
                 y1="AlgCon",#
                 extinction.method="perturb")
rm(list=ls())#
library(lme4)#
library(lmerTest)#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
source('src/laplacian_functions.R')#
#
fig.path <- '../speciesLevel/Figures'#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
status.table <- table(spec$Site, spec$SiteStatus)#
status.table <- as.data.frame(cbind(rownames(status.table),#
                                    colnames(status.table)[apply(status.table,#
                                                            1, which.max)]))#
colnames(status.table)<- c("Site", "SiteStatus")#
#
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))#
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))#
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon")#
#
## add status#
all.alg.Con.status <- merge(x=all.alg.Con,#
                            y= status.table,#
                            by.x="Site",#
                            by.y="Site")#
#
## add ypr#
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,#
                                               all.alg.Con.status$Year),#
                                         paste(spec$Site, spec$Year))]#
#
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")#
#
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA#
#
## change AlgCon to numeric (it is a factor for some reason..)#
all.alg.Con.status$AlgCon <- as.numeric(as.character(#
  all.alg.Con.status$AlgCon))#
#
alg.con.mod <- lmer(AlgCon ~ SiteStatus +#
                    (1|Site) + (1|Year),    #
                    data=all.alg.Con.status)#
#
summary(alg.con.mod)#
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +#
                        (1|Site) + (1|Year),    #
                        data=all.alg.Con.status)#
summary(alg.con.mod.ypr)#
#
save(alg.con.mod.ypr, all.alg.Con.status,#
     file="saved/mods/AlgCon.Rdata")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness to \n species extinction",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)#
#
## ************************************************************#
## robustness to perturbation#
## ************************************************************#
#
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi.alg,#
                 ylabel="Robustness to perturbation",#
                 dats=all.alg.Con.status,#
                 y1="AlgCon",#
                 extinction.method="perturb")
ypr.pi.alg$residuals
ypr.pi.alg$resid
alg.con.mod.ypr$residuals
alg.con.mod.ypr$resid
names(alg.con.mod.ypr)
alg.con.mod.ypr
resdiuals(alg.con.mod.ypr)
residuals(alg.con.mod.ypr)
plot(density(residuals(alg.con.mod.ypr)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
source('src/phyloIntBeta.R')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))#
#
## lc <- getLinkCommunities(edges.com, hcmethod = "average",#
##                          bipartite=TRUE)#
## save(lc, file="saved/lc.Rdata")#
#
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")#
#
## linear model of phylo int by years between samples#
load(file="saved/phyloInt.Rdata")#
phylo.int.mod <- lmer(PhyloInt ~ Dist*SiteStatus +#
                      (1|Site),#
                      data=phylo.int$phylo.int)#
#
plot.box(ylabel="Node turnover",#
                 dats=phylo.int$phylo.int,#
                 y1="PhyloInt")#
#
## interaction lifespans#
int.lives <- lapply(phylo.int$comm, function(x) sort(colSums(x)))#
#
plot(NA, ylim=c(0,1), xlim=c(0,100))#
lapply(int.lives, function(x) points(density(x), type='l'))#
## ## ************************************************************#
## dengrogram based on shared plant interactions#
## ************************************************************#
#
## pols <- cbind(spec$GenusSpecies, spec$PlantGenusSpecies)#
## ## unique rows (interactions)#
## pols <- as.data.frame(unique(pols, MARGIN=1))#
## colnames(pols) <- c('GenusSpecies', 'PlantGenusSpecies')#
#
## clust <- calcDendDis(pols, c('GenusSpecies', 'PlantGenusSpecies'))#
## phylo.int.mod <- lmer(PhyloInt ~ Dist*SiteStatus +#
##                       (1|Site),#
##                       data=phylo.int$phylo.int)#
#
## dd.phylo <- expand.grid(Dist=seq(#
##                           from= min(phylo.int$phylo.int$Dist),#
##                           to= max(phylo.int$phylo.int$Dist),#
##                           length=10),#
##                         SiteStatus=c("control", "maturing", "mature"),#
##                         PhyloInt = 0)#
#
## phylo.pi <- predict.int(mod= phylo.int.mod,#
##                         dd=dd.phylo,#
##                         y="PhyloInt")#
#
## plot.predict(new.dd=phylo.pi,#
##                  ylabel="Node turnover",#
##                  dats=phylo.int$phylo.int,#
##                  y1="PhyloInt",#
##                  legend.loc="bottomright")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
#
## ************************************************************#
## dprime#
## not sig#
dprime.k.sd <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=sd,#
                        zero2na=TRUE, standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(dprime.k.sd$lm.nss)#
#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
#
## ************************************************************#
## occurrence#
## sig#
occ.k.sd <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=sd,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.sd$lm.nss)#
#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="weighted.closeness",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
## check correlation of dprime and occ#
occ.k.sd$data$spec <-#
  dprime$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              dprime$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$spec)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$spec)#
#
## ************************************************************#
## degree#
## sig#
degree.k.sd <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time",#
                        time.col="assem",#
                        abund.col="k",#
                        cv.function=sd,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.sd$lm.nss)#
#
## not sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="weighted.closeness",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)#
## ************************************************************#
## save#
save(itd, dprime, degree,#
     dprime.k.sd, dprime.k.cv, dprime.closeness.cv,#
     occ.k.sd, occ.k.cv, occ.closeness.cv,#
     degree.k.sd, degree.k.cv, degree.closeness.cv,#
     file="saved/contMods.Rdata")#
#
## ************************************************************#
## coefficient of variation through space#
## ************************************************************#
#
## byYr <- aggregate(list(Abund=spec$GenusSpecies),#
##                   list(GenSp= spec$GenusSpecies,#
##                        status= spec$SiteStatus,#
##                        date= spec$Site,#
##                        site= spec$Year), length)#
#
## dprime.sp <- cv.trait(spec, byYr, trait="d", xlabel= "Specialization",#
##                       method= "space")#
## itd.sp <- cv.trait(spec, byYr, trait="ITD", xlabel= "Body size",#
##                    method= "space")#
## lecty.sp <-  cv.trait(spec, byYr, trait="Lecty", cont=FALSE,#
##                       method= "space")#
## excavate.sp <-  cv.trait(spec, byYr, trait="Excavate", cont=FALSE,#
##                          method=" space")#
## nest.sp <-  cv.trait(spec, byYr, trait="NestLoc", cont=FALSE,#
##                      method= "space")#
## soc.sp <- cv.trait(spec, byYr, trait="Sociality", cont=FALSE,#
##                   method= "space")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source("plotting/src/plotPanels.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## itd abundance#
## ************************************************************#
#
dd.itd <- expand.grid(traits=seq(#
                           from= min(itd$data$traits, na.rm=TRUE),#
                           to= max(itd$data$traits, na.rm=TRUE),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
itd.pi <- predict.int(mod= itd$lm,#
                        dd=dd.itd,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=itd.pi,#
                 ylabel="Coefficient of variation",#
                 dats=itd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Body size",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
## ************************************************************#
## dprime abundance#
## ************************************************************#
#
dd.dprime <- expand.grid(traits=seq(#
                           from= min(dprime$data$traits),#
                           to= max(dprime$data$traits),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
dprime.pi <- predict.int(mod= dprime$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Coefficient of variation",#
                 dats=dprime$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
#
## ************************************************************#
## dprime network position - k#
## ************************************************************#
#
dprime.pi <- predict.int(mod= dprime.k.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Network position variability",#
                 dats=dprime.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
#
## ************************************************************#
## dprime network position - closeness#
## ************************************************************#
#
dprime.pi.cl <- predict.int(mod= dprime.closeness.cv$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi.cl,#
                 ylabel="Closeness variability",#
                 dats=dprime.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 f.path='figures/cv')#
#
## ************************************************************#
## persistence k#
## ************************************************************#
occ.k.sd$data$SiteStatus <- "all"#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.sd$data$traits, na.rm=TRUE),#
                           to= max(occ.k.sd$data$traits, na.rm=TRUE),#
                           length=10),#
                         ## SiteStatus= c("control", "maturing",#
                      ## "mature"),#
                      SiteStatus="all",#
                         cv= 0)#
#
occ.pi <- predict.int(mod= occ.k.sd$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi,#
                 ylabel="Network position variability (k)",#
                 dats=occ.k.sd$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')#
#
## ************************************************************#
## persistence closeness#
## ************************************************************#
occ.closeness.cv$data$SiteStatus <- "all"#
occ.pi <- predict.int(mod= occ.closeness.cv$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi,#
                 ylabel="Network closeness variability",#
                 dats=occ.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')#
#
## ************************************************************#
## degree k#
## ************************************************************#
degree.k.cv$data$SiteStatus <- "all"#
dd.degree <- expand.grid(traits=seq(#
                           from= min(degree.k.cv$data$traits, na.rm=TRUE),#
                           to= max(degree.k.cv$data$traits, na.rm=TRUE),#
                           length=10),#
                         ## SiteStatus= c("control", "maturing",#
                      ## "mature"),#
                      SiteStatus="all",#
                         cv= 0)#
#
degree.pi <- predict.int(mod= degree.k.sd$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=degree.pi,#
                 ylabel="Network position variability (k)",#
                 dats=degree.k.cv$data, #
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator degree",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv')#
#
## ************************************************************#
## degree closeness#
## ************************************************************#
degree.closeness.cv$data$SiteStatus <- "all"#
degree.pi <- predict.int(mod= degree.closeness.cv$lm.nss,#
                        dd=dd.degree,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=degree.pi,#
                 ylabel="Network closeness variability",#
                 dats=degree.closeness.cv$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator degree",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black",#
                 f.path='figures/cv',#
                 dec=0)#
#
plot.panels()
?specieslevel
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## coefficient of variation of abundance through time#
## ************************************************************#
byYear <- aggregate(list(Abund=spec$GenusSpecies),#
                    list(GenusSpecies= spec$GenusSpecies,#
                         Date=spec$Date,#
                         SiteStatus= spec$SiteStatus,#
                         Site=spec$Site), length)#
#
dprime <- cv.trait(spec, byYear, trait="d",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
degree <- cv.trait(spec, byYear, trait="degree",#
                   method= "time",#
                   time.col="Date",#
                   abund.col="Abund")#
#
itd <- cv.trait(spec, byYear, trait="ITD",#
                method= "time",#
                time.col="Date",#
                abund.col="Abund")#
#
## ************************************************************#
## coefficient of variation of degree thingy through time#
## ************************************************************#
## dprime#
## ************************************************************#
## not sig#
dprime.k.sd <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=sd,#
                        zero2na=TRUE, standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(dprime.k.sd$lm.nss)#
#
## not sig#
dprime.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="d",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=TRUE,#
                        na.rm=TRUE)#
summary(dprime.k.cv$lm.nss)#
#
## not sig#
dprime.closeness.cv <- cv.trait(spec,#
                                specs[specs$speciesType =="pollinator",],#
                                trait="d",#
                                method= "time", time.col="assem",#
                                abund.col="weighted.closeness",#
                                cv.function=cv,#
                                zero2na=TRUE,#
                                standard.cv=FALSE,#
                                na.rm=TRUE)#
summary(dprime.closeness.cv$lm.nss)#
#
## ************************************************************#
## occurrence#
## ************************************************************#
## sig#
occ.k.sd <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=sd,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.sd$lm.nss)#
#
## not sig#
occ.k.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="k",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.k.cv$lm.nss)#
#
## medium sig#
occ.closeness.cv <- cv.trait(spec,#
                     specs[specs$speciesType =="pollinator",],#
                     trait="occ.date",#
                     method= "time", time.col="assem",#
                     abund.col="weighted.closeness",#
                     cv.function=cv,#
                     zero2na=TRUE,#
                     standard.cv=FALSE,#
                     na.rm=TRUE)#
summary(occ.closeness.cv$lm.nss)#
## check correlation of dprime and occ#
occ.k.sd$data$spec <-#
  dprime$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              dprime$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$spec)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$spec)#
#
## ************************************************************#
## degree#
## ************************************************************#
## sig#
degree.k.sd <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time",#
                        time.col="assem",#
                        abund.col="k",#
                        cv.function=sd,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.sd$lm.nss)#
#
## not sig#
degree.k.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="k",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.k.cv$lm.nss)#
#
## sig#
degree.closeness.cv <- cv.trait(spec,#
                        specs[specs$speciesType =="pollinator",],#
                        trait="degree",#
                        method= "time", time.col="assem",#
                        abund.col="weighted.closeness",#
                        cv.function=cv,#
                        zero2na=TRUE,#
                        standard.cv=FALSE,#
                        na.rm=TRUE)#
summary(degree.closeness.cv$lm.nss)#
## check correlation of degree and occ #
occ.k.sd$data$degree <-#
  degree$data$traits.ns[match(occ.k.sd$data$GenusSpecies,#
                              degree$data$GenusSpecies)]#
#
plot(occ.k.sd$data$traits.ns ~ occ.k.sd$data$degree)#
#
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)
v
cor.test(occ.k.sd$data$traits.ns, occ.k.sd$data$degree)

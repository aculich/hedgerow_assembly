library(FD)
?dbFD
Examples#
#
# mixed trait types, NA's#
ex1 <- dbFD(dummy$trait, dummy$abun)#
ex1
class(dummy$trait)
class(dumy$abund)
class(dummy$abund)
class(dummy$abun)
dummy$abun
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm,#
                                 method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm,#
                               method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)#
#
## who are the core species? Species that are never in the core?#
## pollinators#
#
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
#
hist(count.stayed.pol, breaks=0:5)#
#
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
#
hist(count.stayed.plant, breaks=0:5)#
#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "left"]#
count.left.plant <- table(left.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]#
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <- comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)]#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
## bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]
bee.comm <- comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)]#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]
colnames(bee.comm)
rownames(traits)
bee.comm
as.matrix(bee.comm)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm,#
                                 method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm,#
                               method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)#
#
## who are the core species? Species that are never in the core?#
## pollinators#
#
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
#
hist(count.stayed.pol, breaks=0:5)#
#
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
#
hist(count.stayed.plant, breaks=0:5)#
#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "left"]#
count.left.plant <- table(left.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]#
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <- comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)]
bee.comm
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]
bee.fdiv <- dbFD(traits, bee.comm)
class(bee.comm)
class(traits)
traits
traits <- apply(traits, as.numeric)
traits <- apply(traits, 2, as.numeric)
traits
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <- comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)]#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]
traits.cat <- apply(traits## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
, 2, as.factor)
traits.cat <- apply(traits## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
, 2, as.factor)
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
## bee.syr <- 'bee'#
## cts.traits <- c('d',#
##                 'MeanITD')#
## cat.traits <- c('CropPollinator',#
##                 'Lecty',#
##                 'NestLoc',#
##                 'Excavate',#
##                 'Sociality')#
#
bee.syr <- 'syr'#
cts.traits <- c('d',#
                'WingLength')#
cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")#
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
## bee.syr <- 'bee'#
## cts.traits <- c('d',#
##                 'MeanITD')#
## cat.traits <- c('CropPollinator',#
##                 'Lecty',#
##                 'NestLoc',#
##                 'Excavate',#
##                 'Sociality')#
#
bee.syr <- 'syr'#
cts.traits <- c('d',#
                'WingLength')#
cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm,#
                                 method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm,#
                               method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)#
#
## who are the core species? Species that are never in the core?#
## pollinators#
#
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
#
hist(count.stayed.pol, breaks=0:5)#
#
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
#
hist(count.stayed.plant, breaks=0:5)#
#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "left"]#
count.left.plant <- table(left.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]#
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <- comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)]#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]
traits <- traits[colnames(bee.comm),]
bee.fdiv <- dbFD(traits, bee.comm)
bee.fdiv
bee.fdiv$FDis
comm.mats$pollinator$status
comm.mats$pollinator$comm
site.cores
sites.bee <- sapply(strsplit(rownames(bee.comm)), function(x) x[1])
sites.bee <- sapply(strsplit(rownames(bee.comm), "[.]"),#
                    function(x) x[1])
sites.bee
statuses.bee <- sapply(strsplit(rownames(bee.comm), "[.]"),#
                    function(x) x[2])
lmer(bee.fdiv$FDis ~ statuses.bee + (1|sites.bee))
fdiv.bee.mod <- lmer(bee.fdiv$FDis ~ statuses.bee + (1|sites.bee))
fdiv.bee.mod <- lmer(bee.fdiv$FDis ~ statuses.bee + (1|sites.bee))
summary(fdiv.bee.mod)
names(bee.fdiv)
fdis.bee.mod <- lmer(bee.fdiv$FDis ~ statuses.bee + (1|sites.bee))#
summary(fdis.bee.mod)#
#
fdiv.bee.mod <- lmer(bee.fdiv$FDiv ~ statuses.bee + (1|sites.bee))#
summary(fdiv.bee.mod)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
#
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))#
#
lc <- getLinkCommunities(edges.com, hcmethod = "average",#
                         bipartite=TRUE)#
save(lc, file="saved/lc.Rdata")
load(file="saved/lc.Rdata")#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
soruce('phyloIntBeta.R')
source('phyloIntBeta.R')
source('src/phyloIntBeta.R')
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))
edges.comm
edges.com
paste(edges.comm)
paste(edges.com)
spec$Int <- paste(spec$GenusSpecies),#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)
load(file="saved/lc.Rdata")#
#
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
source('src/phyloIntBeta.R')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))#
#
## lc <- getLinkCommunities(edges.com, hcmethod = "average",#
##                          bipartite=TRUE)#
## save(lc, file="saved/lc.Rdata")#
#
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")
rm(list=ls())#
library(lme4)#
library(lmerTest)#
library(vegan)#
library(linkcomm)#
library(picante)#
setwd('~/Dropbox/hedgerow_network/analysis/intBeta')#
source('src/misc.R')#
source('src/phyloIntBeta.R')#
source('src/predictIntervals.R')#
source('src/CIplotting.R')#
load('../../data/spec_network.Rdata')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
#
## edges.com <- cbind(as.character(spec$GenusSpecies),#
##                   as.character(spec$PlantGenusSpecies))#
#
## lc <- getLinkCommunities(edges.com, hcmethod = "average",#
##                          bipartite=TRUE)#
## save(lc, file="saved/lc.Rdata")#
#
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")#
#
## interaction lifespans#
#
int.lives <- lapply(phylo.int$comm, function(x) sort(colSums(x)))#
#
plot(NA, ylim=c(0,1), xlim=c(0,100))#
lapply(int.lives, function(x) points(density(x), type='l'))#
## linear model of phylo int by years between samples#
load(file="saved/phyloInt.Rdata")#
phylo.int.mod <- lmer(PhyloInt ~ Dist*SiteStatus +#
                      (1|Site),#
                      data=phylo.int$phylo.int)
rm(list=ls())#
library(lme4)#
library(lmerTest)#
library(vegan)#
library(linkcomm)#
library(picante)#
setwd('~/Dropbox/hedgerow_network/analysis/intBeta')#
source('src/misc.R')#
source('src/phyloIntBeta.R')#
source('src/predictIntervals.R')#
source('src/CIplotting.R')#
load('../../data/spec_network.Rdata')
rm(list=ls())#
library(lme4)#
library(lmerTest)#
library(vegan)#
library(linkcomm)#
library(picante)#
setwd('~/Dropbox/hedgerow_network/analysis/intBeta')#
source('src/misc.R')#
source('src/phyloIntBeta.R')#
source('src/predictIntervals.R')#
source('src/CIplotting.R')#
load('../../data/spec_network.Rdata')
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")
comdist
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
source('src/phyloIntBeta.R')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))#
#
## lc <- getLinkCommunities(edges.com, hcmethod = "average",#
##                          bipartite=TRUE)#
## save(lc, file="saved/lc.Rdata")#
#
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
source('src/phyloIntBeta.R')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))#
#
## lc <- getLinkCommunities(edges.com, hcmethod = "average",#
##                          bipartite=TRUE)#
## save(lc, file="saved/lc.Rdata")#
#
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")#
#
## linear model of phylo int by years between samples#
load(file="saved/phyloInt.Rdata")#
phylo.int.mod <- lmer(PhyloInt ~ Dist*SiteStatus +#
                      (1|Site),#
                      data=phylo.int$phylo.int)#
#
plot.box(ylabel="Node turnover",#
                 dats=phylo.int$phylo.int,#
                 y1="PhyloInt")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
source('src/phyloIntBeta.R')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))#
#
## lc <- getLinkCommunities(edges.com, hcmethod = "average",#
##                          bipartite=TRUE)#
## save(lc, file="saved/lc.Rdata")#
#
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")#
#
## linear model of phylo int by years between samples#
load(file="saved/phyloInt.Rdata")#
phylo.int.mod <- lmer(PhyloInt ~ Dist*SiteStatus +#
                      (1|Site),#
                      data=phylo.int$phylo.int)#
#
plot.box(ylabel="Node turnover",#
                 dats=phylo.int$phylo.int,#
                 y1="PhyloInt")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/contMods.Rdata')#
#
## ************************************************************#
## dprime abundance#
## ************************************************************#
#
dd.dprime <- expand.grid(traits=seq(#
                           from= min(dprime$data$traits),#
                           to= max(dprime$data$traits),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
dprime.pi <- predict.int(mod= dprime$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Coefficient of variation",#
                 dats=dprime$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## dprime network position - k#
## ************************************************************#
#
dprime.pi <- predict.int(mod= dprime.k.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi,#
                 ylabel="Network position variability",#
                 dats=dprime.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## dprime network position - closeness#
## ************************************************************#
#
dprime.pi.cl <- predict.int(mod= dprime.closeness.sd$lm,#
                        dd=dd.dprime,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=dprime.pi.cl,#
                 ylabel="Closeness variability",#
                 dats=dprime.closeness.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
## ************************************************************#
## itd abundance#
## ************************************************************#
#
dd.itd <- expand.grid(traits=seq(#
                           from= min(itd$data$traits, na.rm=TRUE),#
                           to= max(itd$data$traits, na.rm=TRUE),#
                           length=10),#
                         SiteStatus= c("control", "maturing", "mature"),#
                         cv= 0)#
#
itd.pi <- predict.int(mod= itd$lm,#
                        dd=dd.itd,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=itd.pi,#
                 ylabel="Coefficient of variation",#
                 dats=itd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Body size",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5)#
#
## ************************************************************#
## persistence network position#
## ************************************************************#
occ.k.sd$data$SiteStatus <- "all"#
dd.occ <- expand.grid(traits=seq(#
                           from= min(occ.k.sd$data$traits, na.rm=TRUE),#
                           to= max(occ.k.sd$data$traits, na.rm=TRUE),#
                           length=10),#
                         ## SiteStatus= c("control", "maturing",#
                      ## "mature"),#
                      SiteStatus="all",#
                         cv= 0)#
#
occ.pi <- predict.int(mod= occ.k.sd$lm.nss,#
                        dd=dd.occ,#
                        y="cv",#
                        family="gaussian")#
#
plot.predict.div(new.dd=occ.pi,#
                 ylabel="Network position variability",#
                 dats=occ.k.sd$data,#
                 xs="traits",#
                 y1="cv",#
                 xlabel="Pollinator persistence",#
                 legend.loc="bottomright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 treatments="all",#
                 col.lines="black")
rm(list=ls())#
library(RColorBrewer)#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source("plotting/src/predictIntervals.R")#
source("plotting/src/CIplotting.R")#
source('../networkLevel/src/misc.R', chdir = TRUE)#
load('saved/dissMods.Rdata')#
#
## ************************************************************#
## interaction dispersion, k, plants#
## ************************************************************#
plants$SiteStatus <- "all"#
pols$SiteStatus <- "all"#
#
dd.plants.k <- expand.grid(k=seq(#
                             from= min(plants$k),#
                             to= max(plants$k),#
                             length=10),#
                           ## SiteStatus= c("control", "maturing",#
                           ## "mature"),#
                           SiteStatus= c("all"),#
                           Dist= 0)#
#
plants.k.pi <- predict.int(mod= mod.plants,#
                           dd=dd.plants.k,#
                           y="Dist",#
                           family="gaussian")#
#
plot.predict.div(new.dd=plants.k.pi,#
                 ylabel="Interaction dispersion",#
                 dats=plants,#
                 xs="k",#
                 y1="Dist",#
                 xlabel="Plant network position",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 scaled=FALSE,#
                 treatments="all",#
                 col.lines="black")#
## ************************************************************#
## interaction dispersion, dprime, plants#
## ************************************************************#
#
dd.plants.d <- expand.grid(d=seq(#
                             from= min(plants$d),#
                             to= max(plants$d),#
                             length=10),#
                           SiteStatus= c("all"),#
                           ## SiteStatus= c("control", "maturing", "mature"),#
                           Dist= 0)#
#
plants.d.pi <- predict.int(mod= mod.plants.d,#
                           dd=dd.plants.d,#
                           y="Dist",#
                           family="gaussian")#
#
plot.predict.div(new.dd=plants.d.pi,#
                 ylabel="Interaction dispersion",#
                 dats=plants,#
                 xs="d",#
                 y1="Dist",#
                 xlabel="Plant specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 scaled=FALSE,#
                 treatments="all",#
                 col.lines="black")#
## ************************************************************#
## interaction dispersion, k, pols#
## ************************************************************#
#
dd.pols.k <- expand.grid(k=seq(#
                           from= min(pols$k),#
                           to= max(pols$k),#
                           length=10),#
                         SiteStatus= c("all"),#
                         ## SiteStatus= c("control", "maturing", "mature"),#
                         Dist= 0)#
#
pols.k.pi <- predict.int(mod= mod.pols,#
                         dd=dd.pols.k,#
                         y="Dist",#
                         family="gaussian")#
#
plot.predict.div(new.dd=pols.k.pi,#
                 ylabel="Interaction dispersion",#
                 dats=pols,#
                 xs="k",#
                 y1="Dist",#
                 xlabel="Pollinator network position",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 scaled=FALSE,#
                 treatments="all",#
                 col.lines="black")#
## ************************************************************#
## interaction dispersion, dprime, pols#
## ************************************************************#
#
dd.pols.d <- expand.grid(d=seq(#
                           from= min(pols$d),#
                           to= max(pols$d),#
                           length=10),#
                         SiteStatus= c("all"),#
                         ## SiteStatus= c("control", "maturing", "mature"),#
                         Dist= 0)#
#
pols.d.pi <- predict.int(mod= mod.pols.d,#
                         dd=dd.pols.d,#
                         y="Dist",#
                         family="gaussian")#
#
plot.predict.div(new.dd=pols.d.pi,#
                 ylabel="Interaction dispersion",#
                 dats=pols,#
                 xs="d",#
                 y1="Dist",#
                 xlabel="Pollinator specialization",#
                 legend.loc="topright",#
                 height=5,#
                 width=5,#
                 x.adj=0.5,#
                 scaled=FALSE,#
                 treatments="all",#
                 col.lines="black")
phylo.int.mod
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/variability')#
source('src/initialize.R')#
source('src/phyloIntBeta.R')#
#
## ************************************************************#
## prepare link community in terminal#
## ************************************************************#
edges.com <- cbind(as.character(spec$GenusSpecies),#
                  as.character(spec$PlantGenusSpecies))#
#
## lc <- getLinkCommunities(edges.com, hcmethod = "average",#
##                          bipartite=TRUE)#
## save(lc, file="saved/lc.Rdata")#
#
## ************************************************************#
## turnover of phylo interactions through time#
## ************************************************************#
load(file="saved/lc.Rdata")#
spec$Int <- paste(spec$GenusSpecies,#
                  spec$PlantGenusSpecies)#
phylo.int <- calcCommDis(spec, "Int", lc, abund.w=TRUE)#
save(phylo.int, file="saved/phyloInt.Rdata")#
#
## linear model of phylo int by years between samples#
load(file="saved/phyloInt.Rdata")#
phylo.int.mod <- lmer(PhyloInt ~ Dist*SiteStatus +#
                      (1|Site),#
                      data=phylo.int$phylo.int)#
#
plot.box(ylabel="Node turnover",#
                 dats=phylo.int$phylo.int,#
                 y1="PhyloInt")
summary(phylo.int.mod)
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
dats <- read.csv('cptPeel/changing_points.csv')#
#
counts <- table(dats[,-3])#
#
chpts.yrs <- colSums(counts)#
barplot(chpts.yrs)#
#
sites <- unique(sapply(strsplit(names(graphs), "_"), function(x)#
                       x[1]))#
no.chpt <- sites[!sites %in% rownames(counts)]#
add.chpt <- matrix(0, nrow=length(no.chpt), ncol=ncol(counts))#
rownames(add.chpt) <- no.chpt#
#
counts <- rbind(counts, add.chpt)#
#
chpts.sites <- rowSums(counts)#
#
statuses <- spec$SiteStatus[match(names(chpts.sites), spec$Site)]#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
statuses[names(chpts.sites) %in% BACI.site] <- "maturing"#
#
layout(matrix(1:3, nrow=1))#
cont <- hist(chpts.sites[statuses == "control"], prob=TRUE,#
     main="Unrestored", ylim=c(0,1),  xlim=c(0,4),#
     breaks=0:4)#
maturing <- hist(chpts.sites[statuses == "maturing"], prob=TRUE,#
     main="Maturing", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
mature <- hist(chpts.sites[statuses == "mature"], prob=TRUE,#
     main="Mature", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
#
## fit poisson distributions to data#
fit.cont <- fitdistr(chpts.sites[statuses == "control"],#
                     densfun="Poisson")#
fit.maturing <- fitdistr(chpts.sites[statuses == "maturing"],#
                     densfun="Poisson")#
fit.mature <- fitdistr(chpts.sites[statuses == "mature"],#
                     densfun="Poisson")#
#
## likelihood ratio text of fit of control model on maturing data,#
## mature model on maturing data#
lik.cont.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.cont$estimate)))#
lik.mature.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.mature$estimate)))#
lik.mature.cont <- log(prod(dpois(chpts.sites[statuses == "control"],#
                           lambda=fit.mature$estimate)))#
#
1- pchisq(-2*(lik.cont.mat - fit.maturing$loglik), 1)#
#
1- pchisq(-2*(lik.mature.mat - fit.maturing$loglik), 1)#
#
1- pchisq(-2*(lik.mature.cont - fit.maturing$loglik), 1)
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
dats <- read.csv('cptPeel/changing_points.csv')#
#
counts <- table(dats[,-3])#
#
chpts.yrs <- colSums(counts)#
barplot(chpts.yrs)#
#
sites <- unique(sapply(strsplit(names(graphs), "_"), function(x)#
                       x[1]))#
no.chpt <- sites[!sites %in% rownames(counts)]#
add.chpt <- matrix(0, nrow=length(no.chpt), ncol=ncol(counts))#
rownames(add.chpt) <- no.chpt#
#
counts <- rbind(counts, add.chpt)#
#
chpts.sites <- rowSums(counts)#
#
statuses <- spec$SiteStatus[match(names(chpts.sites), spec$Site)]#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
statuses[names(chpts.sites) %in% BACI.site] <- "maturing"#
#
layout(matrix(1:3, nrow=1))#
cont <- hist(chpts.sites[statuses == "control"], prob=TRUE,#
     main="Unrestored", ylim=c(0,1),  xlim=c(0,4),#
     breaks=0:4)#
maturing <- hist(chpts.sites[statuses == "maturing"], prob=TRUE,#
     main="Maturing", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
mature <- hist(chpts.sites[statuses == "mature"], prob=TRUE,#
     main="Mature", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
#
## fit poisson distributions to data#
fit.cont <- fitdistr(chpts.sites[statuses == "control"],#
                     densfun="Poisson")#
fit.maturing <- fitdistr(chpts.sites[statuses == "maturing"],#
                     densfun="Poisson")#
fit.mature <- fitdistr(chpts.sites[statuses == "mature"],#
                     densfun="Poisson")#
#
## likelihood ratio text of fit of control model on maturing data,#
## mature model on maturing data#
lik.cont.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.cont$estimate)))#
lik.mature.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.mature$estimate)))#
lik.mature.cont <- log(prod(dpois(chpts.sites[statuses == "control"],#
                           lambda=fit.mature$estimate)))#
#
1- pchisq(-2*(lik.cont.mat - fit.maturing$loglik), 1)#
#
1- pchisq(-2*(lik.mature.mat - fit.maturing$loglik), 1)#
#
1- pchisq(-2*(lik.mature.cont - fit.maturing$loglik), 1)
1- pchisq(-2*(lik.mature.cont - fit.mature$loglik), 1)
fit.cont
fit.maturing
fit.mature
lik.mature.cont <- log(prod(dpois(chpts.sites[statuses == "mature"],#
                           lambda=fit.control$estimate)))
lik.mature.cont <- log(prod(dpois(chpts.sites[statuses == "mature"],#
                           lambda=fit.cont$estimate)))
1- pchisq(-2*(lik.mature.cont - fit.mature$loglik), 1)

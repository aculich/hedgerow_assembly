rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
all.poss.yrs <- 2006:2015#
#
for(i in unique(sites.trees)){#
  print(i)#
  net <- nets[sites == i]#
  yrs <- sapply(strsplit(names(net), "[.]"), function(x) x[2])#
  names(net) <- yrs#
  arr <- simplify2array(net)#
  all.years <-  apply(arr, c(1,2), sum)#
  plant.sums <- rowSums(all.years)#
  pol.sums <- colSums(all.years)#
  this.tree <- tree.graphs[sites.trees == i]#
  pdf.f(plotNet,#
        file=file.path(fig.path, sprintf("%s_networks.pdf", i)),#
        width=18, height=4)#
  pdf.f(plotDend,#
        file=file.path(fig.path, sprintf("%s_communities.pdf", i)),#
        width=10, height=4)#
}
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
all.poss.yrs <- 2006:2015#
#
for(i in unique(sites.trees)){#
  print(i)#
  net <- nets[sites == i]#
  yrs <- sapply(strsplit(names(net), "[.]"), function(x) x[2])#
  names(net) <- yrs#
  arr <- simplify2array(net)#
  all.years <-  apply(arr, c(1,2), sum)#
  plant.sums <- rowSums(all.years)#
  pol.sums <- colSums(all.years)#
  this.tree <- tree.graphs[sites.trees == i]#
  pdf.f(plotNet,#
        file=file.path(fig.path, sprintf("%s_networks.pdf", i)),#
        width=18, height=4)#
  pdf.f(plotDend,#
        file=file.path(fig.path, sprintf("%s_communities.pdf", i)),#
        width=10, height=4)#
}
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
all.poss.yrs <- 2006:2015#
#
for(i in unique(sites.trees)){#
  print(i)#
  net <- nets[sites == i]#
  yrs <- sapply(strsplit(names(net), "[.]"), function(x) x[2])#
  names(net) <- yrs#
  arr <- simplify2array(net)#
  all.years <-  apply(arr, c(1,2), sum)#
  plant.sums <- rowSums(all.years)#
  pol.sums <- colSums(all.years)#
  this.tree <- tree.graphs[sites.trees == i]#
  pdf.f(plotNet,#
        file=file.path(fig.path, sprintf("%s_networks.pdf", i)),#
        width=18, height=4)#
  pdf.f(plotDend,#
        file=file.path(fig.path, sprintf("%s_communities.pdf", i)),#
        width=10, height=4)#
}
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
#
## **********************************************************#
## catagorize species as core or periferal#
## **********************************************************#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats.all <- lapply(site.cores$all, makeComm)#
comm.mats.yr <- lapply(site.cores$by.year, makeComm, by.year=TRUE)#
#
## **********************************************************#
## perm anovas and dispersion of species that always stayed of left at#
## least once#
## **********************************************************#
## plants#
plant.perm.all <- adonis(comm.mats.all$plant$comm ~#
                     comm.mats.all$plant$status,#
                     method=method)#
plant.perm.all#
#
plant.beta.all <- betadisper(vegdist(comm.mats.all$plant$comm,#
                                 method=method),#
                         group=comm.mats.all$plant$status)#
permutest(plant.beta.all, pairwise = TRUE,#
          permutations = 999)#
#
## pollinators#
pol.perm.all <- adonis(comm.mats.all$pollinator$comm ~#
                   comm.mats.all$pollinator$status,#
                   method=method)#
pol.perm.all#
pol.beta.all <- betadisper(vegdist(comm.mats.all$pollinator$comm,#
                               method=method),#
                       group=comm.mats.all$pollinator$status)#
permutest(pol.beta.all, pairwise = TRUE, permutations = 999)#
#
## **********************************************************#
## perm anovas and dispersion by year#
## **********************************************************#
## plants#
plant.perm <- adonis(comm.mats.yr$plant$comm ~#
                     comm.mats.yr$plant$status,#
                     method=method,#
                     strata=comm.mats.yr$plant$site)#
plant.beta <- betadisper(vegdist(comm.mats.yr$plant$comm,#
                                 method=method),#
                         group=comm.mats.yr$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 999,#
          strata=comm.mats.yr$plant$site)#
#
## pollinators#
pol.perm <- adonis(comm.mats.yr$pollinator$comm ~#
                   comm.mats.yr$pollinator$status,#
                   method=method,#
                   strata=comm.mats.yr$pollinator$site)#
pol.beta <- betadisper(vegdist(comm.mats.yr$pollinator$comm,#
                               method=method),#
                       group=comm.mats.yr$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 999,#
          strata=comm.mats.yr$pollinator$site)#
#
## plotting#
plot.beta.div(list(comm.mats.yr$pollinator$comm,#
                   comm.mats.yr$plant$comm),#
              list(comm.mats.yr$pollinator$status,#
                   comm.mats.yr$plant$status),#
              fig.path,#
              method= method)#
#
## **********************************************************#
## who are the core species? Species that are never in the core?#
## pollinators#
## **********************************************************#
stayed.pol <-#
  site.cores$all$pollinator$GenusSpecies[site.cores$all$pollinator$comm ==#
                                         "stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
#
left.pol <-#
  site.cores$all$pollinator$GenusSpecies[site.cores$all$pollinator$comm ==#
                                         "left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$all$plant$GenusSpecies[site.cores$all$plant$comm ==#
                                    "stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]
always.left.pol
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
chpt.trial <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
chpt.trial$x <- chpt.trial$x - 1#
#
chpt.trial <- chpt.trial[chpt.trial$x >= 4,]#
#
change.points.site <- tapply(dats$cp, dats$sites, length)#
#
chpt.trial$chpts <- change.points.site[match(chpt.trial$Site,#
                                                rownames(change.points.site))]#
chpt.trial$chpts[is.na(chpt.trial$chpts)] <- 0#
colnames(chpt.trial) <- c("Site", "trial", "chpts")#
#
chpt.trial$status <- spec$SiteStatus[match(chpt.trial$Site, spec$Site)]#
chpt.trial$status[chpt.trial$Site %in% BACI.site] <- "maturing"#
#
## binomial model with change points as successes#
mod.chpt <- glm(cbind(chpt.trial$chpts, chpt.trial$trial - chpt.trial$chpts) ~#
    chpt.trial$status, family="binomial")#
summary(mod.chpt)#
#
exp(cbind(coef(mod.chpt), confint(mod.chpt)))  #
#
# controls with change points#
nrow(chpt.trial[chpt.trial$status == "control" &#
                chpt.trial$chpts != 0,])/#
  nrow(chpt.trial[chpt.trial$status == "control",])#
#
nrow(chpt.trial[chpt.trial$status == "mature" &#
                chpt.trial$chpts != 0,])/#
  nrow(chpt.trial[chpt.trial$status == "mature",])#
#
nrow(chpt.trial[chpt.trial$chpts != 0,])/#
  nrow(chpt.trial)#
## maturing has more successes than mature and controls, and mature#
## and controls have about the same#
#
## **********************************************************#
## poisson likelihood#
## maybe not quite right given the number of trials differs#
## **********************************************************#
counts <- table(dats[,-3])#
#
chpts.yrs <- colSums(counts)#
barplot(chpts.yrs)#
#
sites <- unique(sapply(strsplit(names(graphs), "_"), function(x)#
                       x[1]))#
no.chpt <- sites[!sites %in% rownames(counts)]#
add.chpt <- matrix(0, nrow=length(no.chpt), ncol=ncol(counts))#
rownames(add.chpt) <- no.chpt#
#
counts <- rbind(counts, add.chpt)#
#
chpts.sites <- rowSums(counts)#
#
statuses <- spec$SiteStatus[match(names(chpts.sites), spec$Site)]#
statuses[names(chpts.sites) %in% BACI.site] <- "maturing"#
#
layout(matrix(1:3, nrow=1))#
cont <- hist(chpts.sites[statuses == "control"], prob=TRUE,#
     main="Unrestored", ylim=c(0,1),  xlim=c(0,4),#
     breaks=0:4)#
maturing <- hist(chpts.sites[statuses == "maturing"], prob=TRUE,#
     main="Maturing", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
mature <- hist(chpts.sites[statuses == "mature"], prob=TRUE,#
     main="Mature", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
#
## fit poisson distributions to data#
fit.cont <- fitdistr(chpts.sites[statuses == "control"],#
                     densfun="Poisson")#
fit.cont#
fit.maturing <- fitdistr(chpts.sites[statuses == "maturing"],#
                     densfun="Poisson")#
fit.maturing#
fit.mature <- fitdistr(chpts.sites[statuses == "mature"],#
                     densfun="Poisson")#
fit.mature#
#
## likelihood ratio text of fit of control model on maturing data,#
## mature model on maturing data#
lik.cont.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.cont$estimate)))#
lik.mature.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.mature$estimate)))#
lik.mature.cont <- log(prod(dpois(chpts.sites[statuses == "mature"],#
                           lambda=fit.cont$estimate)))#
#
## maturing is unlikely to be drawn from control#
pchisq(-2*(lik.cont.mat - fit.maturing$loglik), 1, lower.tail=FALSE)#
#
## or mature#
pchisq(-2*(lik.mature.mat - fit.maturing$loglik), 1, lower.tail=FALSE)#
#
## but mature could be draw from control#
pchisq(-2*(lik.mature.cont - fit.mature$loglik), 1, lower.tail=FALSE)
nrow(chpt.trial[chpt.trial$status == "control" &#
                chpt.trial$chpts != 0,])/#
  nrow(chpt.trial[chpt.trial$status == "control",])
nrow(chpt.trial[chpt.trial$status == "mature" &#
                chpt.trial$chpts != 0,])/#
  nrow(chpt.trial[chpt.trial$status == "mature",])

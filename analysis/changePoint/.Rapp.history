## standardd#
install.packages("parallel")#
#
## community analysis#
install.packages("vegan")#
#
## networks#
install.packages("igraph")#
install.packages("bipartite")#
install.packages("RColorBrewer")#
install.packages("sna")#
#
## phylogeny#
install.packages("TreeSim")#
install.packages("ape")#
install.packages("picante")#
install.packages("geiger")#
#
## misc#
install.packages("mvtnorm")#
install.packages("classInt")#
install.packages("fields")#
install.packages("poilog")#
install.packages("moments")#
#
## jags#
install.packages("rjags")#
install.packages("R2jags")#
install.packages("runjags")#
install.packages("ggmcmc")#
#
## spatial#
install.packages("sp")#
install.packages("rgdal")#
install.packages("raster")#
install.packages("spatstat")#
install.packages("maptools")#
install.packages("SDMTools")#
#
## models#
install.packages("lme4")#
install.packages("RSQLite")#
install.packages("lmerTest")#
install.packages("metafor")#
install.packages("pbkrtest")#
install.packages("glmmADMB", repos=c("http://glmmadmb.r-forge.r-project.org/repos", getOption("repos")),type="source")#
## dynamic docs#
install.packages("knitr")
2+2+3+2
(9*16) + 2+7+11+8
172/16
(2*16) + (2*16) + 2 +(3*16) + 16 + 7 +16+11+8
172/16
3*6
18/12
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
library(ape)#
library(igraph)#
source('../networkLevel/src/misc.R')#
source('plotting/src/communities.R', chdir = TRUE)#
#
fig.path <- 'plotting/figures'#
f.path <- "cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
temp <- list.files(f.path, pattern="*.gml")#
tree.graphs <-  lapply(temp, function(x){#
  read.graph(file.path(f.path, x), format="gml")#
})#
#
#### plotting#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
all.poss.yrs <- 2006:2015#
#
for(i in unique(sites.trees)){#
  print(i)#
  net <- nets[sites == i]#
  yrs <- sapply(strsplit(names(net), "[.]"), function(x) x[2])#
  names(net) <- yrs#
  arr <- simplify2array(net)#
  all.years <-  apply(arr, c(1,2), sum)#
  plant.sums <- rowSums(all.years)#
  pol.sums <- colSums(all.years)#
  this.tree <- tree.graphs[sites.trees == i]#
  pdf.f(plotNet,#
        file=file.path(fig.path, sprintf("%s_networks.pdf", i)),#
        width=18, height=4)#
  pdf.f(plotDend,#
        file=file.path(fig.path, sprintf("%s_communities.pdf", i)),#
        width=10, height=4)#
}#
#
names.v <- names(V(graphs[[1]]))#
num.v <- 0:length(names.v)#
#
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed.core, left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}
site.nodes
site.cores[[1]]
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}
site.noes$stayed
site.core$stayed
site.cores$stayed
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}
site.cores[[1]]$stayed
names(site.cores)
names(out)
names(graphs)
istes
sites
sites.tree
sites.trees
names(site.cores) <- unique(sites.trees)
site.cores[["Barger"]]
lapply(site.cores, length)
num.sp <- rapply(site.cores, length, how="replace")
num.so
num.sp
?rappl
?rapply
num.sp <- rapply(site.cores, length, how="unlist")
num.sp
sites <- rep(names(num.sp), num.sp)
sites
cores <- do.call(rbind, site.cores)
head(cores)
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)
site.cores
num.sp <- rapply(site.cores, length, how="replace")
num.sp
num.sp <- sapply(site.cores, length)
num.so
num.sp
cores <- do.call(rbind, site.cores)
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)
num.so
num.sp
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)
num.sp
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}
names(site.cores) <- unique(sites.trees)
site.cores
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)
site.cores
num.sp <- sapply(site.cores, length)
num.so
num.sp
site.cores <- do.call(rbind, site.cores)
site.cores
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)
site.cores
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)
length(site.cores)
dim(site.cores)
site.cores
site.cores <- unlist(site.cores)
site.cores
site.cores$Site <- rep(names(num.sp), num.sp)
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))
site.cores
rownames(site.cores) <- NULL
site.cores
site.cores$Site <- rep(names(num.sp), num.sp)
site.cores
site.cores$SiteStat <- rep(names(num.sp), num.sp)
strsplit(site.cores$SiteStat)
strsplit(site.cores$SiteStat, "[.]")
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[1])
site.cores
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[2])
site.cores
head(spec)
load('~/Dropbox/hedgerow_assembly/analysis/speciesLevel/saved/specs.Rdata')
head(spec)
head(specs)
colnames(site.cores)
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[2])#
#
load('~/Dropbox/hedgerow_assembly/analysis/speciesLevel/saved/specs.Rdata')
site.cores$speciesType <- specs$speciesType[match(site.cores$GenusSpecies,#
specs$GenusSpecies)]
site.cores
site.cores
load('~/Dropbox/hedgerow_assembly/analysis/speciesLevel/saved/mods/specs_ypr.Rdata')
ls()
head(specs)
load('~/Dropbox/hedgerow_assembly/data/networks/allSpecimens.Rdata')#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
unique(spec$GenusSpecies), "pollinator", "plant")
site.cores
ls()
samp2site.spp
?split
site.cores <- split(site.cores, site.cores$speciesType)
site.cores
samp2site.spp
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x, x$Site, x$GenusSpecies, x$Abund)#
})
site.cores
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[2])#
#
load('~/Dropbox/hedgerow_assembly/data/networks/allSpecimens.Rdata')#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
unique(spec$GenusSpecies), "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x, x$Site, x$GenusSpecies, x$Abund)#
})
site.cores
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x, x$Site, x$GenusSpecies, x$Abund)#
})
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x, x$Site, x$GenusSpecies, x$Abund)#
})
comm.mat <- lapply(site.cores, function(x){#
browser()#
samp2site.spp(x, x$Site, x$GenusSpecies, x$Abund)#
})
Q
comm.mat <- lapply(site.cores, function(x){#
browser()#
samp2site.spp(x, x$Site, x$GenusSpecies, x$Abund)#
})
x
samp2site.spp(x, x$Site, x$GenusSpecies, x$Abund)
x$Site
samp2site.spp(x$Site, x$GenusSpecies, x$Abund)
Q
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x$Site, x$GenusSpecies, x$Abund)#
})
comm.mat$plant
site.cores <- lapply(site.cores, function(y) split(y, y$core))
colnames(site.cores)
colnames(site.cores[[1]])
site.cores <- lapply(site.cores, function(y) split(y, y$comm))
site.cores$plant$core
site.cores$plant
site.cores <- unlist(site.cores, recursive = FALS
E)
site.cores <- unlist(site.cores, recursive = FALSE)
names(site.cores)
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x$Site, x$GenusSpecies, x$Abund)#
})
comm.mat
?pcoa
?betadisper
library(vegan)
?betadisper
?adonis
site.cores[[1]]
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[2])#
#
load('~/Dropbox/hedgerow_assembly/data/networks/allSpecimens.Rdata')#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
unique(spec$GenusSpecies), "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
site.cores <- lapply(site.cores, function(y) split(y, y$comm))#
site.cores <- unlist(site.cores, recursive = FALSE)#
#
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})
comm.mat
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"), function(x) x[2])#
#
load('~/Dropbox/hedgerow_assembly/data/networks/allSpecimens.Rdata')#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
unique(spec$GenusSpecies), "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})
comm.mat
?adonis
data(dune)#
data(dune.env)
dune.env
dune
comm.mat$plants
comm.mat$plant
rownames(comm.mat$plant)
site.cores$comm
site.cores$plants$comm
site.cores$plants
site.cores
names(site.cores)
site.cores$plant
site.cores$plant$comm
rownames(comm.mat$plant)
sapply(strplit(rownames(comm.mat$plant), "[.]")
)
sapply(strplit(rownames(comm.mat$plant), "[.]"), function(x) x[2])
sapply(strsplit(rownames(comm.mat$plant), "[.]"), function(x) x[2])
?adonis
plant.dis <- adonis(comm.mat$plant ~#
sapply(strsplit(rownames(comm.mat$plant), "[.]"), function(x) x[2]))
plant.dis
plant.dis
pol.dis <- adonis(comm.mat$pollinator ~#
sapply(strsplit(rownames(comm.mat$pollintor), "[.]"), function(x) x[2]))
comm.mat$pollinator
sapply(strsplit(rownames(comm.mat$pollintor), "[.]"), function(x) x[2])
pol.dis <- adonis(comm.mat$pollinator ~#
sapply(strsplit(rownames(comm.mat$pollintor), "[.]"), function(x) x[2]))
comm.mat$pollinator
sapply(strsplit(rownames(comm.mat$pollintor), "[.]"), function(x) x[2])
pol.dis <- adonis(comm.mat$pollinator ~#
sapply(strsplit(rownames(comm.mat$pollinator), "[.]"), function(x) x[2]))
pol.dis
pcoa.comm <- cmdscale(comm.mat$pollinator)
pcoa.comm <- cmdscale(veg.dist(comm.mat$pollinator, method="jaccard")
)
pcoa.comm <- cmdscale(vegdist(comm.mat$pollinator, method="jaccard"))
pcoa.comm

getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  browser()#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed]#
  left.core <- out$names[!ind.stayed]#
  return(list(stayed.core, left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}
stayed
ind.stayed <- Reduce("*", stayed)
ind.stayed
out$names
stayed.core <- out$names[ind.stayed]
stayed.core
ind.stayed
ind.stayed*TRUE
ind.stayed ==1
Q
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed.core, left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}
site.cores[[1]]
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
library(ape)#
library(vegan)#
library(igraph)#
source('../networkLevel/src/misc.R')#
source('plotting/src/communities.R', chdir = TRUE)#
#
fig.path <- 'plotting/figures'#
f.path <- "cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
temp <- list.files(f.path, pattern="*.gml")#
tree.graphs <-  lapply(temp, function(x){#
  read.graph(file.path(f.path, x), format="gml")#
})#
#
#### plotting#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
all.poss.yrs <- 2006:2015#
#
for(i in unique(sites.trees)){#
  print(i)#
  net <- nets[sites == i]#
  yrs <- sapply(strsplit(names(net), "[.]"), function(x) x[2])#
  names(net) <- yrs#
  arr <- simplify2array(net)#
  all.years <-  apply(arr, c(1,2), sum)#
  plant.sums <- rowSums(all.years)#
  pol.sums <- colSums(all.years)#
  this.tree <- tree.graphs[sites.trees == i]#
  pdf.f(plotNet,#
        file=file.path(fig.path, sprintf("%s_networks.pdf", i)),#
        width=18, height=4)#
  pdf.f(plotDend,#
        file=file.path(fig.path, sprintf("%s_communities.pdf", i)),#
        width=10, height=4)#
}#
#
names.v <- names(V(graphs[[1]]))#
num.v <- 0:length(names.v)#
#
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
load('~/Dropbox/hedgerow_assembly/data/networks/allSpecimens.Rdata')#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies), "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
plant.dis <- adonis(comm.mat$plant ~#
                    sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2]))#
#
pol.dis <- adonis(comm.mat$pollinator ~#
                  sapply(strsplit(rownames(comm.mat$pollinator),#
                  "[.]"),#
                         function(x) x[2]))
adonis
?adonis
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2]))#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2]))#
#
plant.dis <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
#
pol.dis <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.dis <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
#
pol.dis <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")
plant.dis
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(comm.mat$plant, method="jaccard")#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(comm.mat$pol, method="jaccard")
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(vegdist(comm.mat$plant, method="jaccard"))#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(vegdist(comm.mat$pol, method="jaccard"))
pol.pcoa
status.pol
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    out.pcoa <- vector("list", length=length(all.comms))#
    for(i in 1:length()){#
      pcoa(pcoas[[i]], statuses[[i], i=i)#
    }#
  }#
  f.path <- 'figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    out.pcoa <- vector("list", length=length(all.comms))#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i], i=i)#
    }#
  }#
  f.path <- 'figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    out.pcoa <- vector("list", length=length(all.comms))#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    out.pcoa <- vector("list", length=length(all.comms))#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'figures'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    out.pcoa <- vector("list", length=length(all.comms))#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(vegdist(comm.mat$plant, method="jaccard"))#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(vegdist(comm.mat$pol, method="jaccard"))#
#
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      if(i %in% c(3,4)){#
        mtext('PCoA1', 1, line=2, cex=1.5)#
        if(i==2){#
          mtext('Plants', 2, line=5, cex=1.5)#
        }#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(vegdist(comm.mat$plant, method="jaccard"))#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(vegdist(comm.mat$pol, method="jaccard"))#
#
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA1', 1, line=2, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=2, cex=1.5)#
        mtext('PCoA1', 1, line=2, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=7, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA1', 1, line=2, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=3, cex=1.5)#
        mtext('PCoA1', 1, line=2, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=3, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA1', 1, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=3.5, cex=1.5)#
        mtext('PCoA2', 2, line=1.5, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=3.5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA2', 2, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=3.5, cex=1.5)#
        mtext('PCoA1', 1, line=1.5, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=3.5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(2,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA2', 2, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=3.5, cex=1.5)#
        mtext('PCoA1', 1, line=1.5, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=3.5, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(0.5,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=7)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa), list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA2', 2, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=4, cex=1.5)#
        mtext('PCoA1', 1, line=1.5, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=4, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(0.5,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=6)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA2', 2, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=4, cex=1.5)#
        mtext('PCoA1', 1, line=1.5, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.3)#
        mtext('Bees', 2, line=4, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(0.5,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=5)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA2', 2, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=4, cex=1.5)#
        mtext('PCoA1', 1, line=1.5, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.1)#
        mtext('Bees', 2, line=4, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(0.5,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=5)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant))
plot.beta.div <- function(pcoas, statuses){#
  f <- function(){#
    pcoa <- function(pcoa.comm, status, i){#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA2', 2, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=4, cex=1.5)#
        mtext('PCoA1', 1, line=1.2, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.1)#
        mtext('Bees', 2, line=4, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(0.5,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(pcoas)){#
      pcoa(pcoas[[i]], statuses[[i]], i=i)#
    }#
  }#
  f.path <- 'plotting/figures/pcoa'#
  pdf.f(f, file= file.path(f.path, "pcoa.pdf"),#
        width=4, height=5)#
}#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
library(ape)#
library(vegan)#
library(igraph)#
source('../networkLevel/src/misc.R')#
source('plotting/src/plotPcoa.R')#
load('../../data/networks/allSpecimens.Rdata')#
#
fig.path <- 'plotting/figures'#
load(file=file.path(f.path, "graphs.Rdata"))#
#
names.v <- names(V(graphs[[1]]))#
num.v <- 0:length(names.v)#
#
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(vegdist(comm.mat$plant, method="jaccard"))#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(vegdist(comm.mat$pol, method="jaccard"))#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
library(ape)#
library(vegan)#
library(igraph)#
source('../networkLevel/src/misc.R')#
source('plotting/src/plotPcoa.R')#
load('../../data/networks/allSpecimens.Rdata')#
#
fig.path <- 'plotting/figures'#
f.path <- "cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
names.v <- names(V(graphs[[1]]))#
num.v <- 0:length(names.v)#
#
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(vegdist(comm.mat$plant, method="jaccard"))#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(vegdist(comm.mat$pol, method="jaccard"))#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
library(ape)#
library(vegan)#
library(igraph)#
source('../networkLevel/src/misc.R')#
source('plotting/src/plotPcoa.R')#
load('../../data/networks/allSpecimens.Rdata')#
#
fig.path <- 'plotting/figures'#
f.path <- "cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
temp <- list.files(f.path, pattern="*.gml")#
tree.graphs <-  lapply(temp, function(x){#
  read.graph(file.path(f.path, x), format="gml")#
})#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
#
names.v <- names(V(graphs[[1]]))#
num.v <- 0:length(names.v)#
#
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(vegdist(comm.mat$plant, method="jaccard"))#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(vegdist(comm.mat$pol, method="jaccard"))#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
library(ape)#
library(vegan)#
library(igraph)#
source('../networkLevel/src/misc.R')#
source('plotting/src/plotPcoa.R')#
load('../../data/networks/allSpecimens.Rdata')#
#
fig.path <- 'plotting/figures'#
f.path <- "cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
temp <- list.files(f.path, pattern="*.gml")#
tree.graphs <-  lapply(temp, function(x){#
  read.graph(file.path(f.path, x), format="gml")#
})#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
#
names.v <- names(V(graphs[[1]]))#
num.v <- 0:length(names.v)#
#
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
l.path <- 'plotting/saved'#
site.nodes <- list.files(l.path, "nodes")#
site.cores <- list()#
#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant, method="jaccard")#
plant.pcoa <-  cmdscale(vegdist(comm.mat$plant, method="jaccard"))#
#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol, method="jaccard")#
pol.pcoa <-  cmdscale(vegdist(comm.mat$pol, method="jaccard"))#
#
plot.beta.div(list(pol.pcoa, plant.pcoa),#
              list(status.pol, status.plant), fig.path)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
site.cores <- list()#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant,#
                     method="jaccard")#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol,#
                   method="jaccard")#
#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant), fig.path)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
site.cores <- list()#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant,#
                     method="jaccard")#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol,#
                   method="jaccard")#
#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant), fig.path)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
site.cores <- list()#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant,#
                     method="jaccard")#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol,#
                   method="jaccard")#
#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant), fig.path,#
              method= "jaccard")
getSpecies <- function(out, names.v, num.v){#
  out$names <- names.v[match(out$label, num.v)]#
  memb <- apply(out[, -c(1, ncol(out))], 2, table)#
  core <- sapply(memb, function(x) names(x)[x == max(x)])#
  stayed <- list()#
  for(i in 1:length(core)){#
    stayed[[i]] <- out[, i+1] == core[i]#
  }#
  ind.stayed <- Reduce("*", stayed)#
  stayed.core <- out$names[ind.stayed ==1]#
  left.core <- out$names[ind.stayed==0]#
  return(list(stayed=stayed.core, left=left.core))#
}#
#
plot.beta.div <- function(comms, statuses, fig.path, method){#
  f <- function(){#
    pcoa <- function(comm, status, i, method){#
      pcoa.comm <-  cmdscale(vegdist(comm, method=method))#
      plot(pcoa.comm[status == 'left',], asp=1,#
           col=cols[1], pch=16, cex=1.5,#
           ylim=range(pcoa.comm[,2]) + c(0,0.2),#
           xlim=range(pcoa.comm[,1]),#
           xlab='',#
           ylab='',#
           xaxt='n',#
           yaxt='n',#
           cex.lab=1.5)#
      points(pcoa.comm[status == 'stayed',],#
             col=cols[2], pch=16, cex=1.5)#
      ordihull(pcoa.comm, status)#
      mtext('PCoA2', 2, line=1.5, cex=1.5)#
      if(i==2){#
        mtext('Plants', 2, line=4, cex=1.5)#
        mtext('PCoA1', 1, line=1.2, cex=1.5)#
      }#
      if(i==1){#
        legend('topleft',#
               legend=c('Not core', 'Core'),#
               col=cols, pch=16, bty='n', cex=1.1)#
        mtext('Bees', 2, line=4, cex=1.5)#
      }#
    }#
    layout(matrix(1:2, ncol=1, byrow=TRUE))#
    par(oma=c(2,7,1,1), mar=c(0.5,0,1,0.5),#
        mgp=c(2,1,0), cex.axis=1.5)#
    cols <- c("darkolivegreen3",#
              "darkgoldenrod1")#
    for(i in 1:length(comms)){#
      pcoa(comms[[i]], statuses[[i]], i=i,#
           method=method)#
    }#
  }#
#
  pdf.f(f, file= file.path(fig.path, "pcoa/pcoa.pdf"),#
        width=4, height=5)#
}
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
site.cores <- list()#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$Site <- sapply(strsplit(site.cores$SiteStat, "[.]"), #
                          function(x) x[1])#
site.cores$comm <- sapply(strsplit(site.cores$SiteStat, "[.]"),#
                          function(x) x[2])#
#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant,#
                     method="jaccard")#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol,#
                   method="jaccard")#
#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant), fig.path,#
              method= "jaccard")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
site.cores <- list()#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant,#
                     method="jaccard")#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol,#
                   method="jaccard")#
#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant), fig.path,#
              method= "jaccard")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
sites <- sapply(strsplit(names(graphs), "_"), function(x) x[1])#
sites.trees <- sapply(strsplit(temp, "_"), function(x) x[1])#
all.poss.yrs <- 2006:2015#
#
for(i in unique(sites.trees)){#
  print(i)#
  net <- nets[sites == i]#
  yrs <- sapply(strsplit(names(net), "[.]"), function(x) x[2])#
  names(net) <- yrs#
  arr <- simplify2array(net)#
  all.years <-  apply(arr, c(1,2), sum)#
  plant.sums <- rowSums(all.years)#
  pol.sums <- colSums(all.years)#
  this.tree <- tree.graphs[sites.trees == i]#
  pdf.f(plotNet,#
        file=file.path(fig.path, sprintf("%s_networks.pdf", i)),#
        width=18, height=4)#
  pdf.f(plotDend,#
        file=file.path(fig.path, sprintf("%s_communities.pdf", i)),#
        width=10, height=4)#
}
site.cores
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
site.cores <- list()#
for(i in 1:length(site.nodes)){#
  load(file.path(l.path, site.nodes[i]))#
  site.cores[[i]] <- getSpecies(out, names.v, num.v)#
}#
#
names(site.cores) <- unique(sites.trees)#
site.cores <- unlist(site.cores, recursive=FALSE)#
#
num.sp <- sapply(site.cores, length)#
#
site.cores <- as.data.frame(unlist(site.cores))#
rownames(site.cores) <- NULL#
colnames(site.cores) <- "GenusSpecies"#
#
site.cores$SiteStat <- rep(names(num.sp), num.sp)#
site.cores$speciesType <- ifelse(site.cores$GenusSpecies %in% #
                                 unique(spec$GenusSpecies),#
                                 "pollinator", "plant")#
#
site.cores$Abund <- 1#
#
site.cores <- split(site.cores, site.cores$speciesType)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant,#
                     method="jaccard")#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol,#
                   method="jaccard")#
#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant),#
              fig.path,#
              method= "jaccard")
site.cores
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
comm.mat <- lapply(site.cores, function(x){#
  samp2site.spp(x$SiteStat, x$GenusSpecies, x$Abund)#
})#
#
status.plant <- sapply(strsplit(rownames(comm.mat$plant), "[.]"),#
                           function(x) x[2])#
status.pol <-   sapply(strsplit(rownames(comm.mat$pollinator), "[.]"),#
                         function(x) x[2])#
#
plant.perm <- adonis(comm.mat$plant ~ status.plant,#
                     method="jaccard")#
pol.perm <- adonis(comm.mat$pollinator ~ status.pol,#
                   method="jaccard")#
#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant),#
              fig.path,#
              method= "jaccard")
makeComm <- function(site.core){#
  comm.mat <-  samp2site.spp(site.core$SiteStat,#
                             site.core$GenusSpecies,#
                             site.core$Abund)#
#
  status <- sapply(strsplit(rownames(comm.mat), "[.]"),#
                   function(x) x[2])#
  return(list(comm=comm.mat, status=status))#
}#
#
comm.mats <- lapply(site.cores, makeComm)
comm.mats
names(comm.mats)
names(comm.mats[[1]])
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
## plotting#
plot.beta.div(list(comm.mat$pol, comm.mat$plant),#
              list(status.pol, status.plant),#
              fig.path,#
              method= method)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)
?betadisper
v
plant.beta <- betadisper(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)
?betadisper
?betadisper
plant.beta <- betadisper(vegdist(comm.mats$plant$comm, method=method),#
                         group=comm.mats$plant$status)
plant.beta
?betadisper
permutest(plant.beta, pairwise = TRUE, permutations = 99)
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm, method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)
site.cores[[1]]
site.nodes
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm, method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm, method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm, method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm, method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)
unique(site.cores$pollinator$Site)
## who are the core species?#
## pollinators#
for(i in 1:length(unique(site.cores$pollinator$Site))){#
  stayed.pol <- list()#
  stayed.pol[[i]] <-#
    site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm == "stayed"]#
}
stayed.pol <- list()#
for(i in 1:length(unique(site.cores$pollinator$Site))){#
  stayed.pol[[i]] <-#
    site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm == "stayed"]#
}
stayed.pol
count.stayed <- table(unlist(stayed.pol))
count.stayed
length(unique(site.cores$pollinator$Site)
)
stayed.pol <- list()#
for(i in 1:length(unique(site.cores$pollinator$Site))){#
  stayed.pol[[i]] <-#
    site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm == "stayed"]#
}
length(stayed.pol)
count.stayed <- table(do.call(rbind, stayed.pol))
count.stayed
unique(stayed.pol[[1]])
length(unique(stayed.pol[[1]]))
length(stayed.pol[[1]])
stayed.pol <- list()#
for(i in 1:length(unique(site.cores$pollinator$Site))){#
  stayed.pol[[i]] <-#
    unique(site.cores$pollinator$GenusSpecies[#
                        site.cores$pollinator$comm == "stayed"])#
}#
count.stayed <- table(do.call(rbind, stayed.pol))
count.stayed
stayed
stayed.pol
stayed.pol <-#
  sites.cores$pollinator$GenusSpecies[sites.cores$pollinator$comm =="stayed"]
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm, method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm, method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm =="stayed"]
stayed.pol
v
count.stayed <- table(stayed.pol)
count.staued
count.stayed
count.stayed <- count.stayed[count.stayed != 0]
count.stayed
always.stayed <- count.stayed[count.stayed == 5]
always.stayed
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm =="left"]#
count.left <- table(left.pol)#
count.left <- count.left[count.left != 0]#
always.left <- count.left[count.left == 5]
always.left
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm =="stayed"]#
count.stayed <- table(stayed.plant)#
count.stayed <- count.stayed[count.stayed != 0]#
always.stayed <- count.stayed[count.stayed == 5]#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm =="left"]#
count.left <- table(left.plant)#
count.left <- count.left[count.left != 0]#
always.left <- count.left[count.left == 5]
stayed.plant
left.plant
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm =="stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm =="left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm =="stayed"]#
count.stayed.plant <- table(stayed.plant.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm =="left"]#
count.left.plant <- table(left.plant.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm =="stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm =="left"]#
count.left.plant <- table(left.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]
always.stayed.plant
always.left.pol
always.stayed.plant
always.left.plant
sometimes.stayed.plant <- count.stayed.plant[count.stayed.plant < 5]
sometimes.stayed.plant
hist(stayed.pol)
hist(count.stayed.pol)
hist(count.stayed.plant)
?hist
hist(count.stayed.plant, breaks=1:5)
hist(count.stayed.plant, breaks=0:5)
hist(count.stayed.pol, breaks=0:5)
barplot(count.stayed.pol)
hist(count.stayed.pol, breaks=0:5)
head(spec)
library(FD)
?dbFD
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
getwd()
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
ls()
getwd()
Q
Q
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')#
#
## bee.syr <- 'syr'#
## cts.traits <- c('d',#
##                 'WingLength')#
## cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))#
#
summary(res$FRic$model.out)#
summary(res$FEve$model.out)#
summary(res$FDiv$model.out)#
summary(res$FDis$model.out)#
## ************************************************************#
statuses <- sapply(strsplit(rownames(dd.model$num.samples), ":"),#
                   function(x) x[2])#
to.write <- dd.model$num.samples[order(statuses),]#
write.table(to.write, sep=" & ",#
      file="~/Dropbox/hedgerow_network/beta-div-ms/tables/sampleTable.txt")
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')
head(traits)
bee.syr <- 'syr'#
cts.traits <- c('d',#
                'WingLength')#
cat.traits <- c('LarvalDiet')#
#
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')#
#
## ****************************************#
#
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')#
#
fn <- sprintf('%s_%s_%s.RData', bee.syr, sites, 'abun')#
save(res, file=file.path('analysis/functional_traits/saved', fn))
traits[, "CropPollinator"]
traits[, -"CropPollinator"]
head(traits)
comm.mats$pollinator$comm
comm.mats$pollinator$commrm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm,#
                                 method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)
comm.mats$pollinator$comm
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  comm.mats$pollinator$comm[colnames(comm.mats$pollinator$comm) %in%#
                            colnames(traits)]
bee.comm
bee.comm <-#
  comm.mats$pollinator$comm[colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)]
bee.comm
bee.comm <-#
  comm.mats$pollinator$comm[colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits),]
colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)
bee.comm <-#
  comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)]
bee.comm
bee.fdiv <- dbFD(traits, bee.comm)
comm.bee
bee.comm
traits
bee.comm <-#
  comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)]#
bee.fdiv <- dbFD(traits, bee.comm)
?dbFD
bee.fdiv <- dbFD(traits, bee.comm, w.abund=FALSE)
?dbFD
bee.fdiv <- dbFD(traits, bee.comm, w.abun=FALSE)
class(bee.comm)
class(traits)
## ************************************************************#
rm(list=ls())#
setwd('~/Dropbox/hedgerow_network')#
library(abind)#
library(FD)#
library(bipartite)#
library(parallel)#
library(lme4)#
library(lmerTest)#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
## ************************************************************#
#
## ************************************************************#
## create and save data#
src.dir <- 'analysis/functional_traits/src'#
source(file.path(src.dir, 'misc.R'))#
source(file.path(src.dir, 'site-lists.R'))#
source(file.path(src.dir, 'prep.R'))#
source(file.path(src.dir, 'analyses.R'))#
#
sites <- 'total'#
bee.syr <- 'bee'#
cts.traits <- c('d',#
                'MeanITD')#
cat.traits <- c('CropPollinator',#
                'Lecty',#
                'NestLoc',#
                'Excavate',#
                'Sociality')
## ****************************************#
## to get number of samples per year#
dd.model <- prep.dat(sites=sites,#
                     bee.syr=bee.syr,#
                     drop.na=TRUE,#
                     drop.parasites=FALSE,#
                     cts.traits=cts.traits,#
                     cat.traits=cat.traits,#
                     occ.abun='abun')
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')
Q
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')
Q
res <- run.analysis(sites=sites,#
                    bee.syr=bee.syr,#
                    drop.na=TRUE,#
                    drop.parasites=FALSE,#
                    cts.traits=cts.traits,#
                    cat.traits=cat.traits,#
                    occ.abun='abun')
class(traits)
class(mat)
mat
traits
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm,#
                                 method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm,#
                               method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)#
#
## who are the core species? Species that are never in the core?#
## pollinators#
#
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
#
hist(count.stayed.pol, breaks=0:5)#
#
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
#
hist(count.stayed.plant, breaks=0:5)#
#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "left"]#
count.left.plant <- table(left.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]#
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')
bee.comm <-#
  comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)]
head(traits)
traits <- traits[rownames(traits) %in% colnames(bee.comm),]
traits
v
bee.fdiv <- dbFD(traits, bee.comm, w.abun=FALSE)
class(traits)
traits
bee.comm
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm,#
                                 method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm,#
                               method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)#
#
## who are the core species? Species that are never in the core?#
## pollinators#
#
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
#
hist(count.stayed.pol, breaks=0:5)#
#
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
#
hist(count.stayed.plant, breaks=0:5)#
#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "left"]#
count.left.plant <- table(left.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]#
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)]
head(bee.comm)
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.fdiv <- dbFD(traits, bee.comm, w.abun=FALSE)
install.packages(FD)
install.packages("FD")
library(FD)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/changePoint')#
source('plotting/src/initialize.R')#
method <- "jaccard"#
site.cores <- makeCores(site.nodes, l.path, names.v, num.v)#
#
## create community matrics#
comm.mats <- lapply(site.cores, makeComm)#
#
## run perm anovas#
## plants#
plant.perm <- adonis(comm.mats$plant$comm ~ comm.mats$plant$status,#
                     method=method)#
plant.beta <- betadisper(vegdist(comm.mats$plant$comm,#
                                 method=method),#
                         group=comm.mats$plant$status)#
permutest(plant.beta, pairwise = TRUE, permutations = 99)#
#
## pollinators#
pol.perm <- adonis(comm.mats$pollinator$comm ~ comm.mats$pollinator$status,#
                   method=method)#
pol.beta <- betadisper(vegdist(comm.mats$pollinator$comm,#
                               method=method),#
                         group=comm.mats$pollinator$status)#
permutest(pol.beta, pairwise = TRUE, permutations = 99)#
#
## plotting#
plot.beta.div(list(comm.mats$pollinator$comm, comm.mats$plant$comm),#
              list(comm.mats$pollinator$status, comm.mats$plant$status),#
              fig.path,#
              method= method)#
#
## who are the core species? Species that are never in the core?#
## pollinators#
#
stayed.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "stayed"]#
count.stayed.pol <- table(stayed.pol)#
count.stayed.pol <- count.stayed.pol[count.stayed.pol != 0]#
always.stayed.pol <- count.stayed.pol[count.stayed.pol == 5]#
#
hist(count.stayed.pol, breaks=0:5)#
#
left.pol <-#
  site.cores$pollinator$GenusSpecies[site.cores$pollinator$comm ==#
                                     "left"]#
count.left.pol <- table(left.pol)#
count.left.pol <- count.left.pol[count.left.pol != 0]#
always.left.pol <- count.left.pol[count.left.pol == 5]#
#
## plants#
stayed.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "stayed"]#
count.stayed.plant <- table(stayed.plant)#
count.stayed.plant <- count.stayed.plant[count.stayed.plant != 0]#
always.stayed.plant <- count.stayed.plant[count.stayed.plant == 5]#
#
hist(count.stayed.plant, breaks=0:5)#
#
left.plant <-#
  site.cores$plant$GenusSpecies[site.cores$plant$comm ==#
                                "left"]#
count.left.plant <- table(left.plant)#
count.left.plant <- count.left.plant[count.left.plant != 0]#
always.left.plant <- count.left.plant[count.left.plant == 5]#
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)]#
#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.fdiv <- dbFD(traits, bee.comm, w.abun=FALSE)
?dbFD
ex1 <- dbFD(dummy$trait, dummy$abun)
dummy
FD:::dummy
traits[colnames(bee.comm),]
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm) %in%#
                            rownames(traits)]#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, bee.comm, w.abun=FALSE)
class(bee.comm)
class(bee.comm[[1]])
bee.comm
bee.fdiv <- dbFD(traits, data.frame(bee.comm), w.abun=FALSE)
data.frame(bee.comm)
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])
bee.comm
traits <- traits[rownames(traits) %in% colnames(bee.comm),]
traits <- traits[colnames(bee.comm),]
traits
colnames(bee.comm)
traits
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, data.frame(bee.comm), w.abun=FALSE)
x <- traits#
a <- bee.comm#
row.names(x)[!(row.names(x) %in% row.names(t(a)))]#
row.names(t(a))[!(row.names(t(a)) %in% row.names(x))]
identical(row.names(x), row.names(t(a)))
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, data.frame(bee.comm))
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, bee.comm)
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[, colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, empty(bee.comm))
bee.comm <-#
  bipartite::empty(comm.mats$pollinator$comm[,#
                                             colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])
bee.comm
bee.comm <- as.data.frame(bee.comm)#
#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, bee.comm)
x <- traits#
a <- bee.comm#
row.names(x)[!(row.names(x) %in% row.names(t(a)))]#
row.names(t(a))[!(row.names(t(a)) %in% row.names(x))]
rowSums(bee.comm)
bee.comm <-#
  bipartite::empty(comm.mats$pollinator$comm[,#
                                             colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])
rowSums(bee.comm)
bee.comm <-#
  as.datam.frame(comm.mats$pollinator$comm[,#
                                             colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])#
#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, bee.comm)
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[,#
                                             colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])#
#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]
bee.fdiv <- dbFD(traits, bee.comm)
bee.comm
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[,#
                                             colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])
bee.comm
traits <- traits[rownames(traits) %in% colnames(bee.comm),]
traits
bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]
bee.comm
rownames(traits)
## traits#
load('~/Dropbox/hedgerow_network/analysis/functional_traits/saved/traitsbee.Rdata')#
#
bee.comm <-#
  as.data.frame(comm.mats$pollinator$comm[,#
                                             colnames(comm.mats$pollinator$comm)#
                                          %in% rownames(traits)])#
traits <- traits[rownames(traits) %in% colnames(bee.comm),]#
## bee.comm <- bee.comm[colnames(bee.comm) %in% rownames(traits),]#
traits <- traits[colnames(bee.comm),]#
#
bee.fdiv <- dbFD(traits, bee.comm)
class(traits)
class(bee.comm)
?dbFD

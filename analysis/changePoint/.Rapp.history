mets
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 4#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
#
mets <- lapply(nets, network.metrics, N)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 4#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
#
mets <- lapply(nets, network.metrics, N)
true.stat
zvalues
pvalues
out <- c(true.stat, zvalues, pvalues)
out
names(out) <- c("NODF", "H2",#
                        "modularityG", "modularityR","modularityD")#
                        "zNODF", "zH2", "zmodG", "zmodR", "zmodD",#
                         "pNODF", "pH2", "pmodG", "pmodR", "pmodD")
names(out) <- c("NODF", "H2",#
                        "modularityG", "modularityR","modularityD",#
                        "zNODF", "zH2", "zmodG", "zmodR", "zmodD",#
                         "pNODF", "pH2", "pmodG", "pmodR", "pmodD")
out
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 4#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
#
mets <- lapply(nets, network.metrics, N)
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 4#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
#
mets <- lapply(nets, network.metrics, N)
mets
cor.dats <- prep.dat(cor.mets,  spec)
cor.dats <- prep.dat(mets,  spec)
cor.dats
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## ************************************************************#
## effect of years post restoration#
## ************************************************************
?networklevel
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')
head(Cor.dats)
head(cor.dats)
## connectance#
baci.coonn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')
## connectance#
baci.conn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')
## weighted connectance#
baci.wconn.mod <- lmer(weighted.connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.wconn.mod)#
save(baci.wconn.mod, file='saved/mods/baci_wconn.Rdata')
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/speciesLevel')#
source('src/initialize.R')#
load('../../data/networks/all_networks_years.Rdata')#
#
## **********************************************************#
## species importance#
## **********************************************************#
## specs <- calcSpec(nets, spec, spec.metric = "d", 0.3)#
## save(specs, file=file.path(save.path, 'specs.Rdata'))#
#
## linear models#
load(file=file.path(save.path, 'specs.Rdata'))#
## SiteStatus or ypr#
xvar <- "ypr"
specs$degree
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  browser()#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})
this.specs <- specs[specs$Site == x]
x
this.specs <- specs[specs$Site == x,]
this.specs <- specs[specs$Site == x, "degree"]
plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)
this.sepcs
this.specs
this.specs <- specs[specs$Site == x, c("degree", "ypr")]
this.specs
Q
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    browser()#
    this.ypr <- unique(this.specs$ypr)[i]#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})
this.ypr <- unique(this.specs$ypr)[i]
this.ypr
this.specs$degree[this.specs$ypr == this.ypr]
points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)
Q
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,10), xlim=c(0,100),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})
baci.sites <- c("Barger", "Butler", "MullerB", "Sperandio", "Hrdy")#
specs <- specs[specs$Site %in% baci.sites,]#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,10), xlim=c(0,100),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,10), xlim=c(0,100),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})
baci.sites <- c("Barger", "Butler", "MullerB", "Sperandio", "Hrdy")#
specs <- specs[specs$Site %in% baci.sites,]#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,2), xlim=c(0,30),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})
baci.sites <- c("Barger", "Butler", "MullerB", "Sperandio", "Hrdy")#
specs <- specs[specs$Site %in% baci.sites,]#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,2), xlim=c(0,25),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")
baci.sites <- c("Barger", "Butler", "MullerB", "Sperandio", "Hrdy")#
specs <- specs[specs$Site %in% baci.sites,]#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,2), xlim=c(0,25),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(spec$ypr)),#
       bty="n")
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,1), xlim=c(0,25),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(spec$ypr)),#
       bty="n")
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,0.8), xlim=c(0,25),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(spec$ypr)),#
       bty="n")
baci.sites <- c("Barger", "Butler", "MullerB", "Sperandio", "Hrdy")#
specs <- specs[specs$Site %in% baci.sites,]#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(specs$ypr)))#
lapply(unique(specs$Site), function(x){#
  print(x)#
  this.specs <- specs[specs$Site == x, c("degree", "ypr")]#
  plot(NA, ylim=c(0,0.8), xlim=c(0,25),#
       ylab="Frequency",#
       xlab="Abundance",#
       main=x)#
  for(i in 1:length(unique(this.specs$ypr))){#
    this.ypr <- unique(this.specs$ypr)[i]#
    print(this.ypr)#
    points(density(this.specs$degree[this.specs$ypr == this.ypr]),#
           col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(specs$ypr)),#
       bty="n")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## ************************************************************#
## effect of years post restoration#
## ************************************************************#
#
load(file='saved/corMets.Rdata')#
#
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')#
#
## modularity#
baci.mod.mod <- lmer(zmodD ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')#
#
## h2#
baci.h2.mod <- lmer(H2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')#
#
## connectance#
baci.conn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')#
#
## weighted connectance#
baci.wconn.mod <- lmer(weighted.connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.wconn.mod)#
save(baci.wconn.mod, file='saved/mods/baci_wconn.Rdata')#
#
## niche overlap pollinators#
baci.no.pol.mod <- lmer(niche.overlap.pol ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.pol.mod)#
save(baci.no.pol.mod, file='saved/mods/baci_no_pol.Rdata')#
#
## niche overlap plants#
baci.no.plant.mod <- lmer(niche.overlap.plants ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.plant.mod)#
save(baci.no.plant.mod, file='saved/mods/baci_no_plant.Rdata')#
source('plotting/baci.R')#
## distribution is niche overlap#
#
dis.mats <- lapply(lapply(nets, t), vegdist, method="chao")#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(cor.dats$Year)))#
lapply(unique(cor.dats$Site), function(x){#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, zH2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="zH2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, zH2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="zH2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, zH2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
head(cor.dats)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)
out
names(out)
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## ************************************************************#
## effect of years post restoration#
## ************************************************************#
#
load(file='saved/corMets.Rdata')#
#
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')#
#
## modularity#
baci.mod.mod <- lmer(zmodD ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')#
#
## h2#
baci.h2.mod <- lmer(H2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')#
#
## connectance#
baci.conn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')#
#
## weighted connectance#
baci.wconn.mod <- lmer(weighted.connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.wconn.mod)#
save(baci.wconn.mod, file='saved/mods/baci_wconn.Rdata')#
#
## niche overlap pollinators#
baci.no.pol.mod <- lmer(niche.overlap.pol ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.pol.mod)#
save(baci.no.pol.mod, file='saved/mods/baci_no_pol.Rdata')#
#
## niche overlap plants#
baci.no.plant.mod <- lmer(niche.overlap.plants ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.plant.mod)#
save(baci.no.plant.mod, file='saved/mods/baci_no_plant.Rdata')#
source('plotting/baci.R')#
## distribution is niche overlap#
#
dis.mats <- lapply(lapply(nets, t), vegdist, method="chao")#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(cor.dats$Year)))#
lapply(unique(cor.dats$Site), function(x){#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## ************************************************************#
## effect of years post restoration#
## ************************************************************#
#
load(file='saved/corMets.Rdata')#
#
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')#
#
## modularity#
baci.mod.mod <- lmer(zmodD ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')#
#
## h2#
baci.h2.mod <- lmer(H2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')#
#
## connectance#
baci.conn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')#
#
## weighted connectance#
baci.wconn.mod <- lmer(weighted.connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.wconn.mod)#
save(baci.wconn.mod, file='saved/mods/baci_wconn.Rdata')#
#
## niche overlap pollinators#
baci.no.pol.mod <- lmer(niche.overlap.pol ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.pol.mod)#
save(baci.no.pol.mod, file='saved/mods/baci_no_pol.Rdata')#
#
## niche overlap plants#
baci.no.plant.mod <- lmer(niche.overlap.plants ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.plant.mod)#
save(baci.no.plant.mod, file='saved/mods/baci_no_plant.Rdata')#
source('plotting/baci.R')#
## distribution is niche overlap#
#
dis.mats <- lapply(lapply(nets, t), vegdist, method="chao")#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(cor.dats$Year)))#
lapply(unique(cor.dats$Site), function(x){#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, weighted.connectance=0)#
#
conn.pi <- predict.int(mod= baci.wconn.mod,#
                        dd=dd.conn,#
                        y="weighted.connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
dd.conn
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, weighted.connectance=0)#
#
conn.pi <- predict.int(mod= baci.wconn.mod,#
                        dd=dd.conn,#
                        y="weighted.connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, weighted.connectance=0)#
#
conn.pi <- predict.int(mod= baci.wconn.mod,#
                        dd=dd.conn,#
                        y="weighted.connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_wconn.Rdata')#
#
dd.conn <- cbind(dd, weighted.connectance=0)#
#
conn.pi <- predict.int(mod= baci.wconn.mod,#
                        dd=dd.conn,#
                        y="weighted.connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
summary(baci.wconn.mod)
summary(baci.conn.mod)
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmodD=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmodD",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
?networklevel
summary(baci.no.pol.mod)
summary(baci.no.plant.mod)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## ************************************************************#
## effect of years post restoration#
## ************************************************************#
#
load(file='saved/corMets.Rdata')#
#
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')#
#
## modularity#
baci.mod.mod <- lmer(zmodD ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')#
#
## h2#
baci.h2.mod <- lmer(H2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')#
#
## connectance#
baci.conn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')#
#
## weighted connectance#
baci.wconn.mod <- lmer(weighted.connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.wconn.mod)#
save(baci.wconn.mod, file='saved/mods/baci_wconn.Rdata')#
#
## niche overlap pollinators#
baci.no.pol.mod <- lmer(niche.overlap.pol ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.pol.mod)#
save(baci.no.pol.mod, file='saved/mods/baci_no_pol.Rdata')#
#
## niche overlap plants#
baci.no.plant.mod <- lmer(niche.overlap.plants ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.plant.mod)#
save(baci.no.plant.mod, file='saved/mods/baci_no_plant.Rdata')#
source('plotting/baci.R')#
## distribution is niche overlap#
#
dis.mats <- lapply(lapply(nets, t), vegdist, method="chao")#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(cor.dats$Year)))#
lapply(unique(cor.dats$Site), function(x){#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## ************************************************************#
## effect of years post restoration#
## ************************************************************#
#
load(file='saved/corMets.Rdata')#
#
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')#
#
## modularity#
baci.mod.mod <- lmer(zmodularityD ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')#
#
## h2#
baci.h2.mod <- lmer(H2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')#
#
## connectance#
baci.conn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')#
#
## weighted connectance#
baci.wconn.mod <- lmer(weighted.connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.wconn.mod)#
save(baci.wconn.mod, file='saved/mods/baci_wconn.Rdata')#
#
## niche overlap pollinators#
baci.no.pol.mod <- lmer(niche.overlap.pol ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.pol.mod)#
save(baci.no.pol.mod, file='saved/mods/baci_no_pol.Rdata')#
#
## niche overlap plants#
baci.no.plant.mod <- lmer(niche.overlap.plants ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.plant.mod)#
save(baci.no.plant.mod, file='saved/mods/baci_no_plant.Rdata')#
source('plotting/baci.R')#
## distribution is niche overlap#
#
dis.mats <- lapply(lapply(nets, t), vegdist, method="chao")#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(cor.dats$Year)))#
lapply(unique(cor.dats$Site), function(x){#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')
## modularity#
baci.mod.mod <- lmer(zmodularityD ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')
colnames(cor.mets)
colnames(cor.dats)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 999#
## ************************************************************#
## calculate metrics and zscores#
## ************************************************************#
mets <- lapply(nets, network.metrics, N)#
#
cor.dats <- prep.dat(mets,  spec)#
#
## ************************************************************#
## niche overlap#
## ************************************************************#
#
no <- t(sapply(nets, networklevel, index="niche overlap"))#
#
cor.dats$niche.overlap.pol <- no[, "niche.overlap.HL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
cor.dats$niche.overlap.plants <- no[, "niche.overlap.LL"][match(rownames(no),#
                                     paste(cor.dats$Site,#
                                     cor.dats$Year, sep="."))]#
#
save(cor.dats, file='saved/corMets.Rdata')#
#
## ************************************************************#
## effect of years post restoration#
## ************************************************************#
#
load(file='saved/corMets.Rdata')#
#
## nestedness#
baci.nodf.mod <- lmer(zNODF ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.nodf.mod)#
save(baci.nodf.mod, file='saved/mods/baci_nodf.Rdata')#
#
## modularity#
baci.mod.mod <- lmer(zmod.met.D ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.mod.mod)#
save(baci.mod.mod, file='saved/mods/baci_mod.Rdata')#
#
## h2#
baci.h2.mod <- lmer(H2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')#
#
## connectance#
baci.conn.mod <- lmer(connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.conn.mod)#
save(baci.conn.mod, file='saved/mods/baci_conn.Rdata')#
#
## weighted connectance#
baci.wconn.mod <- lmer(weighted.connectance ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.wconn.mod)#
save(baci.wconn.mod, file='saved/mods/baci_wconn.Rdata')#
#
## niche overlap pollinators#
baci.no.pol.mod <- lmer(niche.overlap.pol ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.pol.mod)#
save(baci.no.pol.mod, file='saved/mods/baci_no_pol.Rdata')#
#
## niche overlap plants#
baci.no.plant.mod <- lmer(niche.overlap.plants ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.no.plant.mod)#
save(baci.no.plant.mod, file='saved/mods/baci_no_plant.Rdata')#
source('plotting/baci.R')#
## distribution is niche overlap#
#
dis.mats <- lapply(lapply(nets, t), vegdist, method="chao")#
#
layout(matrix(1:6, nrow=2))#
cols <- rainbow(length(unique(cor.dats$Year)))#
lapply(unique(cor.dats$Site), function(x){#
  this.mats <- dis.mats[cor.dats$Site == x]#
  plot(NA, ylim=c(0,10), xlim=c(0,1.5),#
       ylab="Frequency",#
       xlab="Niche Overlap",#
       main= x)#
  for(i in 1:length(this.mats)){#
    points(density(this.mats[[i]]), col=cols[i], type="l", lwd=2)#
  }#
})#
#
plot(NA, ylim=c(0,1), xlim=c(0,1), xaxt="n", yaxt="n", ylab="", xlab="")#
legend("center", col=cols, lwd="2",#
       legend=sort(unique(cor.dats$Year)),#
       bty="n")
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmod.met.D=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmod.met.D",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")
dd.mod
mod.pi
plot.panels <- function(){#
  f <- function(){#
    col.lines <- brewer.pal(4, "Greys")[3]#
    col.fill <- add.alpha(col.lines, alpha=0.2)#
    layout(matrix(1:4, ncol=2))#
    par(oma=c(6, 1, 2, 1),#
        mar=c(1, 6, 0.5, 1), cex.axis=1.5)#
    ## nodf#
    plot.panel(new.dd=nodf.pi,#
               dats=cor.dats,#
               y1="zNODF",#
               xs="ypr",#
               col.fill=col.fill,#
               col.lines=col.lines,#
               plotPoints=TRUE)#
    mtext("Nestedness", 2, line=4, cex=1.5)#
    ## modularity#
    plot.panel(new.dd=mod.pi,#
               dats=cor.dats,#
               y1="zmod.met.D",#
               xs="ypr",#
               col.fill=col.fill,#
               col.lines=col.lines,#
               plotPoints=TRUE)#
    mtext("Modularity", 2, line=4, cex=1.5)#
#
    axis(1, pretty(cor.dats$ypr), labels=pretty(cor.dats$ypr))#
    mtext("Year of assembly", 1, line=3.5, cex=1.5)#
    ## diversity#
    plot.panel(new.dd=h2.pi,#
               dats=cor.dats,#
               y1="H2",#
               xs="ypr",#
               col.fill=col.fill,#
               col.lines=col.lines,#
               plotPoints=TRUE)#
    mtext("Specialization", 2, line=4, cex=1.5)#
#
    plot.panel(new.dd=conn.pi,#
               dats=cor.dats,#
               y1="connectance",#
               xs="ypr",#
               col.fill=col.fill,#
               col.lines=col.lines,#
               plotPoints=TRUE)#
    mtext("Connectance", 2, line=4, cex=1.5)#
    axis(1, pretty(cor.dats$ypr), labels=pretty(cor.dats$ypr))#
    mtext("Year of assembly", 1, line=3.5, cex=1.5)#
  }#
  path <- 'figures'#
  pdf.f(f, file=file.path(path,#
             sprintf("%s.pdf", "baci")),#
        width=7, height=6)#
#
}
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=nodf.pi,#
##                  ylabel="Nestedness",#
##                  dats=cor.dats,#
##                  y1="zNODF")#
#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
#
dd.mod <- cbind(dd, zmod.met.D=0)#
#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmod.met.D",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=mod.pi,#
##                  ylabel="Modularity",#
##                  dats=cor.dats,#
##                  y1="zmodD")#
#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
#
dd.h2 <- cbind(dd, H2=0)#
#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="H2",#
                        family="gaussian")#
#
## plot.predict.ypr(new.dd=h2.pi,#
##                  ylabel="Specialization",#
##                  dats=cor.dats,#
##                  y1="zH2")#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance=0)#
#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plotting#
## ************************************************************#
plot.panels()
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
#
## create a giant network to calculate specialization#
agg.spec <- aggregate(list(abund=spec$GenusSpecies),#
                      list(GenusSpecies=spec$GenusSpecies,#
                           PlantGenusSpecies=spec$PlantGenusSpecies),#
                      length)
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]
head(spec)
site.table <- aggregate(spec$Site, list(spec$Year),#
                        function(x) length(unique(x))
)
site.table
site.table <- aggregate(spec$Year, list(spec$Site),#
                        function(x) length(unique(x))
site.table
site.table <- aggregate(spec$Year, list(spec$Site),#
                        function(x) length(unique(x))
)
site.table
colnames(spec)
site.table.prep <- cbind(spec$Site, spec$Year, spec$Date)
site.table.prep
table(site.table.prep)
aggregate(site.table.prep$Date, list(site.table.prep$Year,#
                                     site.table.prep$Site),#
          function(x) length(unique(x)))
aggregate(spec$Date, list(spec$Year, spec$Site),#
          function(x) length(unique(x)))
site.table <- aggregate(spec$Date, list(spec$Year, spec$Site),#
          function(x) length(unique(x)))
sort(spec$SiteStatus)
?sort
order
?order
order(spec$SiteStatus, decreasing=TRUE)
spec <- spec[order(spec$SiteStatus, decreasing=TRUE),]
head(spec)
spec$SiteStatus
spec <- spec[order(spec$SiteStatus, decreasing=TRUE),]#
#
site.table <- aggregate(spec$Date, list(spec$Year, spec$Site),#
          function(x) length(unique(x)))
site.table
site.table <- aggregate(list(Samples=spec$Date),#
                        list(Year=spec$Year, Site=spec$Site),#
          function(x) length(unique(x)))
site.table
samp.2.site
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)
ms.table
ms.table$SiteStatus <- spec$SiteStatus[match(rownames(ms.table),#
                                             spec$Site)]
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                             spec$Site)], ms.table)
ms.table
colnames(ms.table)
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])
ms.table
ms.table <- ms.table[order(ms.table[, "Site type"]),]
ms.table
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]
ms.table
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "contol"] <-#
  "Non-assembling margin"
ms.table
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling margin"
ms.table
ms.table <- samp2site.spp(site=site.table$Site,#
                          spp=site.table$Year,#
                          abund=site.table$Samples,#
                          FUN=sum)#
ms.table <- cbind(spec$SiteStatus[match(rownames(ms.table),#
                                             spec$Site)], ms.table)#
colnames(ms.table) <- c("Site type", colnames(ms.table)[-1])#
#
ms.table <- ms.table[order(ms.table[, "Site type"], decreasing=TRUE),]#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "maturing"] <-#
  "Assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "mature"] <-#
  "Non-assembling HR"#
#
ms.table[, "Site type"][ms.table[, "Site type"] == "control"] <-#
  "Non-assembling FM"
ms.table
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables",#
            sep=" & ")
write.table(ms.table, file="Dropbox/hedgerow_assembly/ms/tables",#
            sep=" & ")
write.table(ms.table, file="~Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")
write.table(ms.table, file="~/Dropbox/hedgerow_assembly/ms/tables/samples.txt",#
            sep=" & ")
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
nrow(spec)
nrow(spec[spec$Family == 'Syrphidae',])
nrow(spec[spec$BeeNonbee == 'bee',])
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1#
#
change.points.site <- tapply(dats$cp, dats$sites, length)#
#
chpt.trial <- data.frame(chpts=change.points.site,#
                         trials=count.samples$x[match(#
                           rownames(change.points.site),#
                           count.samples$Site)])#
#
chpt.trial$status <- spec$SiteStatus[match(rownames(chpt.trial), spec$Site)]#
chpt.trial$status[rownames(chpt.trial) %in% BACI.site] <- "maturing"#
#
## binomial model with change points as successes#
mod.chpt <- glm(cbind(chpt.trial$chpts, chpt.trial$trials - chpt.trial$chpts) ~#
    chpt.trial$status, family="binomial")#
summary(mod.chpt)
exp(cbind(coef(mod.chpt), confint(chpt)))
exp(cbind(coef(mod.chpt), confint(mod.chpt)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$Species != '',]#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec
71+28
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]
nrow(spec)
length(unique(spec$GEnusSpecies))
length(unique(spec$GenusSpecies))
length(unique(spec$Date))
spec$Date
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/dataPrep')#
load('~/Dropbox/hedgerow/data_sets/traditional/specimens-complete.RData')#
load("/Users/lcp/Dropbox/hedgerow_network/data/veg/veg.Rdata")#
source('src/misc.R')#
source('src/prepNets.R')#
library(bipartite)#
#
trait.dir <- '~/Dropbox/hedgerow/data_sets/traditional/functional_traits'#
bee.trait <-#
  read.csv(file.path(trait.dir, 'bee.csv'),#
           row.names=1)#
syr.trait <-#
  read.csv(file.path(trait.dir, 'syr.csv'),#
           row.names=1)#
#
spec <- dd#
#
## subset to net specimens#
spec <- spec[spec$NetPan == 'net',]#
## create species column#
spec$PlantGenusSpecies <-  fix.white.space(paste(spec$PlantGenus,#
                                                 spec$PlantSpecies))#
#
## drop pollinators and plants without identifications#
spec <-  spec[spec$PlantGenusSpecies != '',]#
#
to.drop.status <- c("forb", "natural")#
spec <- spec[!spec$SiteStatus %in% to.drop.status,]#
tot.spec <- nrow(spec)#
#
nrow(spec[spec$Family == 'Syrphidae',])/tot.spec#
nrow(spec[spec$BeeNonbee == 'bee',])/tot.spec#
#
## subset to just bees and syrphids#
spec <- spec[spec$Family == 'Syrphidae' |#
             spec$BeeNonbee == 'bee',]#
#
spec <-  spec[spec$Species != '',]#
spec$SiteStatus[spec$SiteStatus == "restored"] <- "maturing"#
## total specimens#
nrow(spec)#
#
## total species#
length(unique(spec$GenusSpecies)
)
length(unique(spec$Date))
length(unique(spec$Family))
length(unique(spec$Genera))
length(unique(spec$Genus))
length(unique(paste(spec$GenusSpecies, spec$PlantGenusSpecies))
)
length(unique(paste(spec$Site, spec$Date)))
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1
count.samples
change.points.site <- tapply(dats$cp, dats$sites, length)
change.points.site
chpt.trial <- data.frame(chpts=change.points.site,#
                         trials=count.samples$x[match(#
                           rownames(change.points.site),#
                           count.samples$Site)])
chpt.trail
chpt.trial
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1#
#
change.points.site <- tapply(dats$cp, dats$sites, length)
change.points.site
change.points.site[match(rownames(change.points.site), count.samples$Site)]
change.points.site[match(count.samples$Site, rownames(change.points.site)
)
)
change.points.site[match(count.samples$Site, rownames(change.points.site))]
count.samples$Site
rownames(change.points.site)
count.samples
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1#
count.samples$x <- count.samples[count.samples$x > 4]
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1#
count.samples$x <- count.samples[count.samples$x > 4,]
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1#
count.samples <- count.samples[count.samples$x > 4,]
count.samples
count.samples <- count.samples[count.samples$x > 5,]
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1#
count.samples <- count.samples[count.samples$x > 5,]
count.samples
count.samples <- count.samples[count.samples$x >= 5,]
count.samples
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1#
count.samples <- count.samples[count.samples$x >= 5,]
count.samples
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
count.samples <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
count.samples$x <- count.samples$x - 1
sount.samples
count.samples
count.samples <- count.samples[count.samples$x >= 4,]
count.samples
change.points.site <- tapply(dats$cp, dats$sites, length)
change.points.site[match(count.samples$Site, rownames(change.points.site))]
count.samples$chpts <- change.points.site[match(count.samples$Site,#
                                                rownames(change.points.site))]
count.samples
count.samples$chpts[is.na(count.samples$chpts)] <- 0
count.samples
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
chpt.trail <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
chpt.trail$x <- chpt.trail$x - 1#
#
chpt.trail <- chpt.trail[chpt.trail$x >= 4,]#
#
change.points.site <- tapply(dats$cp, dats$sites, length)#
#
chpt.trail$chpts <- change.points.site[match(chpt.trail$Site,#
                                                rownames(change.points.site))]#
chpt.trail$chpts[is.na(chpt.trail$chpts)] <- 0#
colnames(chpt.trial) <- c("Site", "trail", "chpts")
colnames(chpt.trail) <- c("Site", "trail", "chpts")
chpt.trial$status <- spec$SiteStatus[match(rownames(chpt.trial), spec$Site)]#
chpt.trial$status[rownames(chpt.trial) %in% BACI.site] <- "maturing"
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
chpt.trail <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
chpt.trail$x <- chpt.trail$x - 1#
#
chpt.trail <- chpt.trail[chpt.trail$x >= 4,]#
#
change.points.site <- tapply(dats$cp, dats$sites, length)#
#
chpt.trail$chpts <- change.points.site[match(chpt.trail$Site,#
                                                rownames(change.points.site))]#
chpt.trail$chpts[is.na(chpt.trail$chpts)] <- 0#
colnames(chpt.trail) <- c("Site", "trail", "chpts")
chpt.trial$status <- spec$SiteStatus[match(rownames(chpt.trial), spec$Site)]
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
chpt.trial <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
chpt.trial$x <- chpt.trial$x - 1#
#
chpt.trial <- chpt.trial[chpt.trial$x >= 4,]#
#
change.points.site <- tapply(dats$cp, dats$sites, length)#
#
chpt.trial$chpts <- change.points.site[match(chpt.trial$Site,#
                                                rownames(change.points.site))]#
chpt.trial$chpts[is.na(chpt.trial$chpts)] <- 0#
colnames(chpt.trial) <- c("Site", "trial", "chpts")#
#
chpt.trial$status <- spec$SiteStatus[match(rownames(chpt.trial), spec$Site)]#
chpt.trial$status[rownames(chpt.trial) %in% BACI.site] <- "maturing"
chpt.trial
chpt.trial$status <- spec$SiteStatus[match(chpt.trial$Site, spec$Site)]
chpt.trial
## binomial model with change points as successes#
mod.chpt <- glm(cbind(chpt.trial$chpts, chpt.trial$trials - chpt.trial$chpts) ~#
    chpt.trial$status, family="binomial")#
summary(mod.chpt)
## binomial model with change points as successes#
mod.chpt <- glm(cbind(chpt.trial$chpts, chpt.trial$trial - chpt.trial$chpts) ~#
    chpt.trial$status, family="binomial")#
summary(mod.chpt)
chpt.trial
cbind(chpt.trial$chpts, chpt.trial$trial - chpt.trial$chpts)
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
library(nlme)#
dats <- read.csv('cptPeel/changing_points.csv')#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
## **********************************************************#
## binomial #
## **********************************************************#
chpt.trial <- aggregate(spec$Year, list(Site=spec$Site),#
                           FUN=function(x) length(unique(x)))#
chpt.trial$x <- chpt.trial$x - 1#
#
chpt.trial <- chpt.trial[chpt.trial$x >= 4,]#
#
change.points.site <- tapply(dats$cp, dats$sites, length)#
#
chpt.trial$chpts <- change.points.site[match(chpt.trial$Site,#
                                                rownames(change.points.site))]#
chpt.trial$chpts[is.na(chpt.trial$chpts)] <- 0#
colnames(chpt.trial) <- c("Site", "trial", "chpts")#
#
chpt.trial$status <- spec$SiteStatus[match(chpt.trial$Site, spec$Site)]#
chpt.trial$status[rownames(chpt.trial) %in% BACI.site] <- "maturing"#
#
## binomial model with change points as successes#
mod.chpt <- glm(cbind(chpt.trial$chpts, chpt.trial$trial - chpt.trial$chpts) ~#
    chpt.trial$status, family="binomial")#
summary(mod.chpt)
chpt.trial$status[chpt.trial$Site %in% BACI.site] <- "maturing"#
#
## binomial model with change points as successes#
mod.chpt <- glm(cbind(chpt.trial$chpts, chpt.trial$trial - chpt.trial$chpts) ~#
    chpt.trial$status, family="binomial")#
summary(mod.chpt)#
#
exp(cbind(coef(mod.chpt), confint(mod.chpt)))
chpt.trial
nrow(chpt.trial[chpt.trial$status == "control" & chpt.trial$chpts != 0])
nrow(chpt.trial[chpt.trial$status == "control" & chpt.trial$chpts != 0,])
# controls with change points#
nrow(chpt.trial[chpt.trial$status == "control" &#
                chpt.trial$chpts != 0,])/#
  nrow(chpt.trial[chpt.trial$status == "control",])
nrow(chpt.trial[chpt.trial$status == "mature" &#
                chpt.trial$chpts != 0,])/#
  nrow(chpt.trial[chpt.trial$status == "mature",])
exp(cbind(coef(mod.chpt), confint(mod.chpt)))
summary(mod.chpt)#
#
exp(cbind(coef(mod.chpt), confint(mod.chpt)))
3.3157895-1.3139261
3.3157895-8.5719621
8.5719621-3.3157895
nrow(chpt.trial[chpt.trial$chpts != 0,])/#
  nrow(chpt.trial)

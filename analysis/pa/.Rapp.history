rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/pa')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
## total interactions#
plant.tot.int <- lapply(nets, rowSums)#
pol.tot.int <- lapply(nets, colSums)#
#
## degree#
plant.degree <- lapply(nets, function(x)#
                       apply(x, 1, function(x) sum(x >= 1)))#
pol.degree <- lapply(nets, function(x)#
                       apply(x, 2, function(x) sum(x >= 1)))#
## ypr 1 #
first.yrs <- spec[spec$ypr == 1,]#
first.yrs <- unique(data.frame(Site=first.yrs$Site,#
                  Year=first.yrs$Year))#
first.yrs <- first.yrs[!apply(first.yrs, 1, function(x) any(is.na(x))),]#
#
ypr1 <- names(nets) %in%#
                    paste(first.yrs$Site, first.yrs$Year, sep=".")#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(y2)#
  })#
  browser()#
})
pres.sp[[1]]
colsums(pres.sp[[1]])
colSums(pres.sp[[1]])
names(pres.sp)
pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y)#
    degree.plant <- colSums(y)#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })
pres.sp[[1]]$pres.mat
pres.sp[[1]]$degree.pol
these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])
these.years
these.years <- sapply(strsplit(names(this.nets), "[.]"), function(x) x[2])
these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])
these.years
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/pa')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
## total interactions#
plant.tot.int <- lapply(nets, rowSums)#
pol.tot.int <- lapply(nets, colSums)#
#
## degree#
plant.degree <- lapply(nets, function(x)#
                       apply(x, 1, function(x) sum(x >= 1)))#
pol.degree <- lapply(nets, function(x)#
                       apply(x, 2, function(x) sum(x >= 1)))#
## ypr 1 #
first.yrs <- spec[spec$ypr == 1,]#
first.yrs <- unique(data.frame(Site=first.yrs$Site,#
                  Year=first.yrs$Year))#
first.yrs <- first.yrs[!apply(first.yrs, 1, function(x) any(is.na(x))),]#
#
ypr1 <- names(nets) %in%#
                    paste(first.yrs$Site, first.yrs$Year, sep=".")#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y)#
    degree.plant <- colSums(y)#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  browser()#
})
Q
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/pa')#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
## total interactions#
plant.tot.int <- lapply(nets, rowSums)#
pol.tot.int <- lapply(nets, colSums)#
#
## degree#
plant.degree <- lapply(nets, function(x)#
                       apply(x, 1, function(x) sum(x >= 1)))#
pol.degree <- lapply(nets, function(x)#
                       apply(x, 2, function(x) sum(x >= 1)))#
## ypr 1 #
first.yrs <- spec[spec$ypr == 1,]#
first.yrs <- unique(data.frame(Site=first.yrs$Site,#
                  Year=first.yrs$Year))#
first.yrs <- first.yrs[!apply(first.yrs, 1, function(x) any(is.na(x))),]#
#
ypr1 <- names(nets) %in%#
                    paste(first.yrs$Site, first.yrs$Year, sep=".")#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y)#
    degree.plant <- colSums(y)#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  browser()#
})
these.years
Q
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y)#
    degree.plant <- colSums(y)#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
    prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant  #
    }#
})
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y)#
    degree.plant <- colSums(y)#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant  #
    }#
  }#
})
i
pres.sp[[i]]$pres.mat
pres.sp[[i]]$degree.plant
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant
prob.mat
head(prob.mat)
pres.sp[[i]]$degree.plant
Q
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- colSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant  #
    }#
  }#
})
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant
prob.mat
pres.sp[[i]]$degree.plant
Q
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant  #
    }#
  }#
})
pres.sp[[i]]$degree.plant
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant
prob.mat
?rmultinorm
?dmultinorm
?dmultinom
Q
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant#
      sim.links <- #
    }#
  }#
})
N <- 2#
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant#
    }#
  }#
})
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant
?sample
prob.null.binary <- function(probs, fill, nrow, ncol) {#
  ones <- sample(1:length(probs), fill, replace=FALSE,#
                 prob=probs)#
  ## create resultant matrix#
  interact <- matrix(0, nrow=nrow, ncol=ncol)#
  interact[ones] <- 1#
  return(interact)#
}
Q
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y <- sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant#
    }#
  }#
})
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i]]$degree.plant
prob.mat
c(prob.mat)
sim.mat <- prob.null.binary(prob=c(prob.mat),#
                       fill=pres.sp[[i]]$fill.y,#
                       nrow= nrow(pres.sp[[i]]$y)#
                       ncol= ncol(pres.sp[[i]]$y))
sim.mat <- prob.null.binary(prob=c(prob.mat),#
                       fill=pres.sp[[i]]$fill.y,#
                       nrow= nrow(pres.sp[[i]]$y),#
                       ncol= ncol(pres.sp[[i]]$y))
prob.null.binary <- function(probs, fill, nrow, ncol) {#
  ones <- sample(1:length(probs), fill, replace=FALSE,#
                 prob=probs)#
  ## create resultant matrix#
  interact <- matrix(0, nrow=nrow, ncol=ncol)#
  interact[ones] <- 1#
  return(interact)#
}
sim.mat <- prob.null.binary(prob=c(prob.mat),#
                       fill=pres.sp[[i]]$fill.y,#
                       nrow= nrow(pres.sp[[i]]$y),#
                       ncol= ncol(pres.sp[[i]]$y))
pres.sp[[i]]$fill.y
Q
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[1]]$degree.plant#
      sim.mat <- prob.null.binary(prob=c(prob.mat),#
                       fill=pres.sp[[i]]$fill.y,#
                       nrow= nrow(pres.sp[[i]]$y),#
                       ncol= ncol(pres.sp[[i]]$y))#
    }#
  }#
})
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[1]]$degree.plant#
      sim.mat <- prob.null.binary(prob=c(prob.mat),#
                       fill=pres.sp[[i]]$fill.y,#
                       nrow= nrow(pres.sp[[i]]$y),#
                       ncol= ncol(pres.sp[[i]]$y))
prob.null.binary <- function(probs, fill, nrow, ncol) {#
  ones <- sample(1:length(probs), fill, replace=FALSE,#
                 prob=probs)#
  ## create resultant matrix#
  interact <- matrix(0, nrow=nrow, ncol=ncol)#
  interact[ones] <- 1#
  return(interact)#
}
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[1]]$degree.plant#
      sim.mat <- prob.null.binary(prob=c(prob.mat),#
                       fill=pres.sp[[i]]$fill.y,#
                       nrow= nrow(pres.sp[[i]]$y),#
                       ncol= ncol(pres.sp[[i]]$y))
sim.mat
head(sim.mat)
?dmultinom
lik.sim <- dmultinom(sim.mat, pres.sp[[i]]$y)
lik.sim <- dmultinom(prob=pres.sp[[i]]$y, prob=sim.mat)
lik.sim <- dmultinom(pres.sp[[i]]$y, prob=sim.mat)
lik.sim
install.packages("LaplacesDemon")
rcat(pres.sp[[i]]$fill.y, prob.mat)
library(LaplacesDemon)
rcat(pres.sp[[i]]$fill.y, prob.mat)
pres.sp[[i]]$fill.y
rcat(pres.sp[[i]]$fill.y, prob.mat)
rcat(pres.sp[[i]]$fill.y, c(prob.mat))
dcat(c(pres.sp[[i]]$y), prob=c(sim.mat))
lik.sim <- dcat(c(pres.sp[[i]]$y), p=c(sim.mat))
cbind(c(pres.sp[[i]]$y), c(sim.mat))
prob.mat
lik.sim <- dcat(c(pres.sp[[i]]$y), p=c(prob.mat))
cbind(c(pres.sp[[i]]$y), p=c(prob.mat))
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[1]]$degree.plant
cbind(c(pres.sp[[i]]$y), p=c(prob.mat))
prob.mat <- prob.mat[prob.mat > 0]
prob.mat
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      prob.mat <- prob.mat[prob.mat > 0,]
prob.mat[prob.mat > 0
]
prob.mat > 0
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      prob.mat <- prob.mat[rowSums(prob.mat) > 0, colSums(prob.mat) > 0]
prob.mat
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant
colSums(prob.mat)
rowSums(prob.mat)
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant
rowSums(prob.mat)
colSums(prob.mat) > 0
prob.mat <- prob.mat[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      prob.mat <- prob.mat[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]
prob.mat
sim.mat <- prob.null.binary(prob=c(prob.mat),#
                                  fill=pres.sp[[i]]$fill.y,#
                                  nrow= nrow(pres.sp[[i]]$y),#
                                  ncol= ncol(pres.sp[[i]]$y))
sim.mat
sim.mat <- prob.null.binary(prob=c(prob.mat),#
                                  fill=pres.sp[[i]]$fill.y,#
                                  nrow= nrow(prob.mat),#
                                  ncol= ncol(prob.mat))
sim.mat
lik.sim <- dcat(c(pres.sp[[i]]$y), p=c(prob.mat))
c(pres.sp[[i]]$y), p=c(prob.mat)
)
cbind(c(pres.sp[[i]]$y), p=c(prob.match))
cbind(c(pres.sp[[i]]$y), p=c(prob))
cbind(c(pres.sp[[i]]$y), p=c(prob.mat))
lik.sim <- dcat(c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]), p=c(prob.mat))
c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0])
c(prob.mat)
?dbinom
lik.sim <- dbinom(c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]), size=1,#
                       p=c(prob.mat))
c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0])
c(prob.mat)
lik.sim <- dbinom(c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]),#
                       size=1,#
                       p=c(prob.mat))
link.sim
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      prob.mat <- prob.mat[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]#
      sim.mat <- prob.null.binary(prob=c(prob.mat),#
                                  fill=pres.sp[[i]]$fill.y,#
                                  nrow= nrow(prob.mat),#
                                  ncol= ncol(prob.mat))#
     lik.sim <- dbinom(c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]),#
                       size=1,#
                       p=c(prob.mat))
rowSums(pres.sp[[i]]$y) > 0
c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0])
dbinom(c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0]),#
                       size=2,#
                       p=c(prob.mat)
)
?dbinom
prob.mat
c(prob.mat)
sub.y <- c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0])#
     lik.sim <- dbinom(sub.y,#
                       size=nrow(sub.y),#
                       p=c(prob.mat))
sub.y <- c(pres.sp[[i]]$y[rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0])
sub.y
lik.sim <- dbinom(sub.y,#
                       size=length(sub.y),#
                       p=c(prob.mat))
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      keep.mat <- rowSums(pres.sp[[i]]$y) > 0,#
                           colSums(pres.sp[[i]]$y) > 0#
      prob.mat <- prob.mat[keep.mat]
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      keep.row <- rowSums(pres.sp[[i]]$y) > 0#
      keep.col <- colSums(pres.sp[[i]]$y) > 0#
      prob.mat <- prob.mat[keep.row, keep.col]
sub.y <- c(pres.sp[[i]]$y[keep.row, keep.col])
sub.y
length(prob.mat)
length(sub.y)
lik.sim <- dbinom(sub.y,#
                       size=length(sub.y),#
                       p=c(prob.mat))
?dbinom
lik.sim <- dbinom(sub.y,#
                       size=length(sub.y),#
                       prob=c(prob.mat))
lik.sim <- dbinom(sub.y,#
                       size=1,#
                       prob=c(prob.mat))
?dbinom
lik.sim <- dbinom(sub.y,#
                       prob=c(prob.mat))
lik.sim <- dbinom(sub.y,#
                       size=length(sub.y),#
                       prob=c(prob.mat))
link.sum
link.sim
lik.sim
prob.mat
c(prob.mat)
Q
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  for(i in 2:length(these.years)){#
    if(i==2){#
      browser()#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      keep.row <- rowSums(pres.sp[[i]]$y) > 0#
      keep.col <- colSums(pres.sp[[i]]$y) > 0#
      prob.mat <- prob.mat[keep.row, keep.col]#
      sim.mat <- prob.null.binary(prob=c(prob.mat),#
                                  fill=pres.sp[[i]]$fill.y,#
                                  nrow= nrow(prob.mat),#
                                  ncol= ncol(prob.mat))#
      sub.y <- c(pres.sp[[i]]$y[keep.row, keep.col])#
     lik.sim <- dbinom(sub.y,#
                       size=length(sub.y),#
                       prob=c(prob.mat))#
    }#
  }#
})
?dmultinom
prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      keep.row <- rowSums(pres.sp[[i]]$y) > 0#
      keep.col <- colSums(pres.sp[[i]]$y) > 0#
      ## prob.mat <- prob.mat[keep.row, keep.col]#
      sim.mat <- prob.null.binary(prob=c(prob.mat),#
                                  fill=pres.sp[[i]]$fill.y,#
                                  nrow= nrow(prob.mat),#
                                  ncol= ncol(prob.mat))
lik.dat <- dmultinom(pres.sp[[i]]$y, prob=prob.mat)
lik.dat
Q
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      lik.years[i-1] <- dmultinom(pres.sp[[i]]$y, prob=prob.mat)#
    }#
  browser()#
})
lik.years
names(lik.years) <- these.year[-1]
names(lik.years) <- these.years[-1]
lik.years
Q
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years.pa <- numeric(length(these.years)-1)#
  lik.years.rand <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      lik.years.pa[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=prob.mat)#
      lik.years.rand[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=pres.sp[[i]]$pres.mat)#
    }#
  names(lik.years) <- these.years[-1]#
  browser()#
})
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years.pa <- numeric(length(these.years)-1)#
  lik.years.rand <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      lik.years.pa[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=prob.mat)#
      lik.years.rand[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=pres.sp[[i]]$pres.mat)#
    }#
  names(lik.years.pa) <- names(lik.years.rand) <- these.years[-1]#
  browser()#
})
lik.years.pa
lik.years.rand
2*(log(lik.years.pa) - log(lik.years.rand))
lik.ratio <- 1- pchisq(-2*(log(lik.years.pa) - log(lik.years.rand)), 1)
lik.ratio
log(lik.years.pa) - log(lik.years.rand)
lik.ratio <- pchisq(-2*(log(lik.years.pa) - log(lik.years.rand)), 1,#
  lower.tail=FALSE)
lik.ratio
Q
lapply(unique(sites), function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years.pa <- numeric(length(these.years)-1)#
  lik.years.rand <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
      prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
      lik.years.pa[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=prob.mat)#
      lik.years.rand[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=pres.sp[[i]]$pres.mat)#
    }#
  names(lik.years.pa) <- names(lik.years.rand) <- these.years[-1]#
  lik.ratio <- pchisq(-2*(log(lik.years.pa) - log(lik.years.rand)), 1,#
                      lower.tail=FALSE)#
  return(lik.ratio)#
})
getLik <- function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years.pa <- numeric(length(these.years)-1)#
  lik.years.rand <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
    prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
    lik.years.pa[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                   prob=prob.mat)#
    lik.years.rand[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=pres.sp[[i]]$pres.mat)#
  }#
  names(lik.years.pa) <- names(lik.years.rand) <- these.years[-1]#
  lik.ratio <- pchisq(-2*(log(lik.years.pa) - log(lik.years.rand)), 1,#
                      lower.tail=FALSE)#
  return(lik.ratio)#
})
getLik <- function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years.pa <- numeric(length(these.years)-1)#
  lik.years.rand <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
    prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
    lik.years.pa[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                   prob=prob.mat)#
    lik.years.rand[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=pres.sp[[i]]$pres.mat)#
  }#
  names(lik.years.pa) <- names(lik.years.rand) <- these.years[-1]#
  lik.ratio <- pchisq(-2*(log(lik.years.pa) - log(lik.years.rand)), 1,#
                      lower.tail=FALSE)#
  return(lik.ratio)#
}
lik.pa.random <- lapply(unique(sites), getLik)
lik.pa.random
getLik <- function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years.pa <- numeric(length(these.years)-1)#
  lik.years.rand <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
    prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
    lik.years.pa[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                   prob=prob.mat)#
    lik.years.rand[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=pres.sp[[i]]$pres.mat)#
  }#
  names(lik.years.pa) <- names(lik.years.rand) <- these.years[-1]#
  lik.ratio <- pchisq(2*(log(lik.years.pa) - log(lik.years.rand)), 1,#
                      lower.tail=FALSE)#
  return(lik.ratio)#
}#
lik.pa.random <- lapply(unique(sites), getLik)
lik.pa.random
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
dats <- read.csv('cptPeel/changing_points.csv')#
#
counts <- table(dats[,-3])#
#
chpts.yrs <- colSums(counts)#
barplot(chpts.yrs)#
#
sites <- unique(sapply(strsplit(names(graphs), "_"), function(x)#
                       x[1]))#
no.chpt <- sites[!sites %in% rownames(counts)]#
add.chpt <- matrix(0, nrow=length(no.chpt), ncol=ncol(counts))#
rownames(add.chpt) <- no.chpt#
#
counts <- rbind(counts, add.chpt)#
#
chpts.sites <- rowSums(counts)#
#
statuses <- spec$SiteStatus[match(names(chpts.sites), spec$Site)]#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
statuses[names(chpts.sites) %in% BACI.site] <- "maturing"#
#
layout(matrix(1:3, nrow=1))#
cont <- hist(chpts.sites[statuses == "control"], prob=TRUE,#
     main="Unrestored", ylim=c(0,1),  xlim=c(0,4),#
     breaks=0:4)#
maturing <- hist(chpts.sites[statuses == "maturing"], prob=TRUE,#
     main="Maturing", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
mature <- hist(chpts.sites[statuses == "mature"], prob=TRUE,#
     main="Mature", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
#
## fit poisson distributions to data#
fit.cont <- fitdistr(chpts.sites[statuses == "control"],#
                     densfun="Poisson")#
fit.cont#
fit.maturing <- fitdistr(chpts.sites[statuses == "maturing"],#
                     densfun="Poisson")#
fit.maturing#
fit.mature <- fitdistr(chpts.sites[statuses == "mature"],#
                     densfun="Poisson")#
fit.mature#
#
## likelihood ratio text of fit of control model on maturing data,#
## mature model on maturing data#
lik.cont.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.cont$estimate)))#
lik.mature.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.mature$estimate)))#
lik.mature.cont <- log(prod(dpois(chpts.sites[statuses == "mature"],#
                           lambda=fit.cont$estimate)))#
#
## maturing is unlikely to be drawn from control#
pchisq(2*(lik.cont.mat - fit.maturing$loglik), 1, lower.tail=FALSE)#
#
## or mature#
pchisq(2*(lik.mature.mat - fit.maturing$loglik), 1, lower.tail=FALSE)#
#
## but mature could be draw from control#
pchisq(2*(lik.mature.cont - fit.mature$loglik), 1, lower.tail=FALSE)
rm(list=ls())#
setwd("~/Dropbox/hedgerow_assembly/analysis/changePoint")#
load('cptPeel/baci/graphs.Rdata')#
load('../../data/networks/allSpecimens.Rdata')#
library(MASS)#
dats <- read.csv('cptPeel/changing_points.csv')#
#
counts <- table(dats[,-3])#
#
chpts.yrs <- colSums(counts)#
barplot(chpts.yrs)#
#
sites <- unique(sapply(strsplit(names(graphs), "_"), function(x)#
                       x[1]))#
no.chpt <- sites[!sites %in% rownames(counts)]#
add.chpt <- matrix(0, nrow=length(no.chpt), ncol=ncol(counts))#
rownames(add.chpt) <- no.chpt#
#
counts <- rbind(counts, add.chpt)#
#
chpts.sites <- rowSums(counts)#
#
statuses <- spec$SiteStatus[match(names(chpts.sites), spec$Site)]#
BACI.site <- c('Barger', 'Butler', 'Hrdy', 'MullerB', 'Sperandio')#
statuses[names(chpts.sites) %in% BACI.site] <- "maturing"#
#
layout(matrix(1:3, nrow=1))#
cont <- hist(chpts.sites[statuses == "control"], prob=TRUE,#
     main="Unrestored", ylim=c(0,1),  xlim=c(0,4),#
     breaks=0:4)#
maturing <- hist(chpts.sites[statuses == "maturing"], prob=TRUE,#
     main="Maturing", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
mature <- hist(chpts.sites[statuses == "mature"], prob=TRUE,#
     main="Mature", ylim=c(0,1), xlim=c(0,4),#
     breaks=0:4)#
#
## fit poisson distributions to data#
fit.cont <- fitdistr(chpts.sites[statuses == "control"],#
                     densfun="Poisson")#
fit.cont#
fit.maturing <- fitdistr(chpts.sites[statuses == "maturing"],#
                     densfun="Poisson")#
fit.maturing#
fit.mature <- fitdistr(chpts.sites[statuses == "mature"],#
                     densfun="Poisson")#
fit.mature#
#
## likelihood ratio text of fit of control model on maturing data,#
## mature model on maturing data#
lik.cont.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.cont$estimate)))#
lik.mature.mat <- log(prod(dpois(chpts.sites[statuses == "maturing"],#
                           lambda=fit.mature$estimate)))#
lik.mature.cont <- log(prod(dpois(chpts.sites[statuses == "mature"],#
                           lambda=fit.cont$estimate)))#
#
## maturing is unlikely to be drawn from control#
pchisq(-2*(lik.cont.mat - fit.maturing$loglik), 1, lower.tail=FALSE)#
#
## or mature#
pchisq(-2*(lik.mature.mat - fit.maturing$loglik), 1, lower.tail=FALSE)#
#
## but mature could be draw from control#
pchisq(-2*(lik.mature.cont - fit.mature$loglik), 1, lower.tail=FALSE)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/pa')#
library(LaplacesDemon)#
#
load('../../data/networks/allSpecimens.Rdata')#
f.path <- "../changePoint/cptPeel/baci"#
load(file=file.path(f.path, "graphs.Rdata"))#
#
## total interactions#
plant.tot.int <- lapply(nets, rowSums)#
pol.tot.int <- lapply(nets, colSums)#
#
## degree#
plant.degree <- lapply(nets, function(x)#
                       apply(x, 1, function(x) sum(x >= 1)))#
pol.degree <- lapply(nets, function(x)#
                       apply(x, 2, function(x) sum(x >= 1)))#
## ypr 1 #
first.yrs <- spec[spec$ypr == 1,]#
first.yrs <- unique(data.frame(Site=first.yrs$Site,#
                  Year=first.yrs$Year))#
first.yrs <- first.yrs[!apply(first.yrs, 1, function(x) any(is.na(x))),]#
#
ypr1 <- names(nets) %in%#
                    paste(first.yrs$Site, first.yrs$Year, sep=".")#
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])#
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])#
#
N <- 2#
#
prob.null.binary <- function(probs, fill, nrow, ncol) {#
  ones <- sample(1:length(probs), fill, replace=FALSE,#
                 prob=probs)#
  ## create resultant matrix#
  interact <- matrix(0, nrow=nrow, ncol=ncol)#
  interact[ones] <- 1#
  return(interact)#
}#
#
getLik <- function(x){#
  this.net <- nets[sites == x]#
  pres.sp <- lapply(this.net, function(y){#
    ## y[y > 1] <- 1#
    degree.pol <- colSums(y) + 1#
    degree.plant <- rowSums(y) + 1#
    y2 <- y#
    y2[rowSums(y) != 0,] <- 1#
    y2[,colSums(y) != 0] <- 1#
    return(list(y=y,#
                fill.y = sum(y),#
                pres.mat = y2,#
                degree.pol = degree.pol,#
                degree.plant = degree.plant))#
  })#
  these.years <- sapply(strsplit(names(this.net), "[.]"), function(x) x[2])#
  lik.years.pa <- numeric(length(these.years)-1)#
  lik.years.rand <- numeric(length(these.years)-1)#
  for(i in 2:length(these.years)){#
    prob.mat <- pres.sp[[i]]$pres.mat*pres.sp[[i-1]]$degree.plant#
    lik.years.pa[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                   prob=prob.mat)#
    lik.years.rand[i-1] <- dmultinom(pres.sp[[i]]$y,#
                                     prob=pres.sp[[i]]$pres.mat)#
  }#
  names(lik.years.pa) <- names(lik.years.rand) <- these.years[-1]#
  lik.ratio <- pchisq(2*(log(lik.years.pa) - log(lik.years.rand)), 1,#
                      lower.tail=FALSE)#
  return(lik.ratio)#
}#
lik.pa.random <- lapply(unique(sites), getLik)
lik.pa.random
names(lik.pa.random) <- sites
names(lik.pa.random) <- unique(sites)
like.pa.random
lik.pa.random

rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('src/initialize.R')#
load('../../data/networks/baci_networks_years.Rdata')#
N <- 99
baci.h2.mod <- lmer(zH2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])#
summary(baci.h2.mod)
load(file='saved/corMets.Rdata')
baci.h2.mod <- lmer(zH2 ~ scale(ypr) +#
                 (1|Site) + (1|Year),#
                 data=cor.dats[!is.na(cor.dats$ypr),])
summary(baci.h2.mod)
summary(baci.h2.mod)#
save(baci.h2.mod, file='saved/mods/baci_h2.Rdata')
library(RColorBrewer)#
library(lme4)#
library(lmerTest)#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/misc.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                       family="gaussian")#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
dd.mod <- cbind(dd, zmod.met.D=0)#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmod.met.D",#
                      family="gaussian")#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
dd.h2 <- cbind(dd, H2=0)#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="zH2",#
                        family="gaussian")#
## ************************************************************#
## niche overlap - Plants#
## ************************************************************#
load(file='saved/mods/baci_no_plant.Rdata')#
#
dd.nop <- cbind(dd, niche.overlap.LL =0)#
#
nop.pi <- predict.int(mod= baci.no.plant.mod,#
                        dd=dd.nop,#
                        y="niche.overlap.plants",#
                        family="gaussian")#
## ************************************************************#
## niche overlap - Polinators#
## ************************************************************#
load(file='saved/mods/baci_no_pol.Rdata')#
#
dd.nopol <- cbind(dd, niche.overlap.HL =0)#
nopol.pi <- predict.int(mod= baci.no.pol.mod,#
                        dd=dd.nopol,#
                        y="niche.overlap.pol",#
                        family="gaussian")#
#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance =0)#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plant richness#
## ************************************************************#
load(file='saved/mods/baci_rich_ll.Rdata')#
#
dd.rich.ll <- cbind(dd, number.of.species.LL =0)#
rich.ll.pi <- predict.int(mod= baci.rich.ll.mod,#
                        dd=dd.rich.ll,#
                        y="number.of.species.LL",#
                        family="poisson")#
## ************************************************************#
## pol richness#
## ************************************************************#
load(file='saved/mods/baci_rich_hl.Rdata')#
#
dd.rich.hl <- cbind(dd, number.of.species.HL =0)#
rich.hl.pi <- predict.int(mod= baci.rich.hl.mod,#
                        dd=dd.rich.hl,#
                        y="number.of.species.HL",#
                        family="poisson")#
## ************************************************************#
## all panels#
## ************************************************************#
plot.panels()
library(RColorBrewer)#
library(lme4)#
library(lmerTest)#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/misc.R')#
load(file='saved/corMets.Rdata')#
#
dd <- expand.grid(ypr=seq(from= min(cor.dats$ypr, na.rm=TRUE),#
                          to= max(cor.dats$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file='saved/mods/baci_nodf.Rdata')#
#
dd.nodf <- cbind(dd, zNODF=0)#
#
nodf.pi <- predict.int(mod= baci.nodf.mod,#
                        dd=dd.nodf,#
                        y="zNODF",#
                       family="gaussian")#
## ************************************************************#
## modularity#
## ************************************************************#
load(file='saved/mods/baci_mod.Rdata')#
dd.mod <- cbind(dd, zmod.met.D=0)#
mod.pi <- predict.int(mod= baci.mod.mod,#
                        dd=dd.mod,#
                        y="zmod.met.D",#
                      family="gaussian")#
## ************************************************************#
## specialization#
## ************************************************************#
load(file='saved/mods/baci_h2.Rdata')#
dd.h2 <- cbind(dd, zH2=0)#
h2.pi <- predict.int(mod= baci.h2.mod,#
                        dd=dd.h2,#
                        y="zH2",#
                        family="gaussian")#
## ************************************************************#
## niche overlap - Plants#
## ************************************************************#
load(file='saved/mods/baci_no_plant.Rdata')#
#
dd.nop <- cbind(dd, niche.overlap.LL =0)#
#
nop.pi <- predict.int(mod= baci.no.plant.mod,#
                        dd=dd.nop,#
                        y="niche.overlap.plants",#
                        family="gaussian")#
## ************************************************************#
## niche overlap - Polinators#
## ************************************************************#
load(file='saved/mods/baci_no_pol.Rdata')#
#
dd.nopol <- cbind(dd, niche.overlap.HL =0)#
nopol.pi <- predict.int(mod= baci.no.pol.mod,#
                        dd=dd.nopol,#
                        y="niche.overlap.pol",#
                        family="gaussian")#
#
## ************************************************************#
## connectance#
## ************************************************************#
load(file='saved/mods/baci_conn.Rdata')#
#
dd.conn <- cbind(dd, connectance =0)#
conn.pi <- predict.int(mod= baci.conn.mod,#
                        dd=dd.conn,#
                        y="connectance",#
                        family="gaussian")#
#
## ************************************************************#
## plant richness#
## ************************************************************#
load(file='saved/mods/baci_rich_ll.Rdata')#
#
dd.rich.ll <- cbind(dd, number.of.species.LL =0)#
rich.ll.pi <- predict.int(mod= baci.rich.ll.mod,#
                        dd=dd.rich.ll,#
                        y="number.of.species.LL",#
                        family="poisson")#
## ************************************************************#
## pol richness#
## ************************************************************#
load(file='saved/mods/baci_rich_hl.Rdata')#
#
dd.rich.hl <- cbind(dd, number.of.species.HL =0)#
rich.hl.pi <- predict.int(mod= baci.rich.hl.mod,#
                        dd=dd.rich.hl,#
                        y="number.of.species.HL",#
                        family="poisson")#
## ************************************************************#
## all panels#
## ************************************************************#
plot.panels()
ls()
summary(baci.h2.mod)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels_resilence.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness to \n species extinction",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)#
#
## ************************************************************#
## robustness to perturbation#
## ************************************************************#
#
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi.alg,#
                 ylabel="Robustness to \n cascading effects",#
                 dats=all.alg.Con.status,#
                 y1="AlgCon",#
                 extinction.method="perturb")#
#
plot.panels()
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels_resilence.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness to \n species extinction",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)#
#
## ************************************************************#
## robustness to perturbation#
## ************************************************************#
#
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi.alg,#
                 ylabel="Robustness to \n cascading effects",#
                 dats=all.alg.Con.status,#
                 y1="AlgCon",#
                 extinction.method="perturb")#
#
plot.panels()
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels_resilence.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness to \n species extinction",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)#
#
## ************************************************************#
## robustness to perturbation#
## ************************************************************#
#
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi.alg,#
                 ylabel="Robustness to \n cascading effects",#
                 dats=all.alg.Con.status,#
                 y1="AlgCon",#
                 extinction.method="perturb")#
#
plot.panels()
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels_resilence.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness to \n species extinction",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)#
#
## ************************************************************#
## robustness to perturbation#
## ************************************************************#
#
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi.alg,#
                 ylabel="Robustness to \n cascading effects",#
                 dats=all.alg.Con.status,#
                 y1="AlgCon",#
                 extinction.method="perturb")#
#
plot.panels()
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels_resilence.R')#
source('src/initialize.R')#
#
## ************************************************************#
## robustness to species extinction#
## ************************************************************#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness to \n species extinction",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)#
#
## ************************************************************#
## robustness to perturbation#
## ************************************************************#
#
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))#
#
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,#
                                    na.rm=TRUE),#
                    to= max(all.alg.Con.status$ypr,#
                      na.rm=TRUE),#
                    length=10),#
                  AlgCon=0)#
#
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,#
                        dd=dd.ypr.alg,#
                        y="AlgCon",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi.alg,#
                 ylabel="Robustness to \n cascading effects",#
                 dats=all.alg.Con.status,#
                 y1="AlgCon",#
                 extinction.method="perturb")#
#
plot.panels()

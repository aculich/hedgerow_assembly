all.alg.Con
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
teste<-nets[[2]]
teste
teste<-sppPresent(teste)
teste
colSums(teste)
rowsums(teste)
rowSums(teste)
algCone(teste)
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
browser()
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(teste)
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
eigens
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min(re.eigen)##  Algebraic connectivity
re.eigen
min(eigens[which(eigens!=0)])
min(re.eigens[which(re.eigens!=0)])
min(re.eigen[which(re.eigen!=0)])
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
#browser()
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen[which(re.eigen!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(teste)
all.alg.Con2<-all.alg.Con
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
## add ypr
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,
all.alg.Con.status$Year),
paste(spec$Site, spec$Year))]
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA
## change AlgCon to numeric (it is a factor for some reason..)
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
alg.con.mod <- lmer(AlgCon ~ SiteStatus +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod)
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
alg.con.mod <- lmer(AlgCon ~ SiteStatus +
(1|Site) + (1|Year),
data=all.alg.Con.status)
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
EigenRatio.mod.ypr <- lmer(EigenRatio ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(EigenRatio.mod.ypr)
all.alg.Con.status$EigenRatio
all.alg.Con.status$EigenRatio <- as.numeric(as.character(
all.alg.Con.status$EigenRatio))
all.alg.Con.status$EigenRatio
all.alg.Con.status
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
status.table <- table(spec$Site, spec$SiteStatus)
status.table <- as.data.frame(cbind(rownames(status.table),
colnames(status.table)[apply(status.table,
1, which.max)]))
colnames(status.table)<- c("Site", "SiteStatus")
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
str(all.alg.Con)
all.alg.Con[,3:5]<-as.numeric(as.character(all.alg.Con[,3:5]))
all.alg.Con
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con[,c(3:5)]<-as.numeric(as.character(all.alg.Con[,c(3:5)]))
all.alg.Con
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
str*all.alg.Con
str(all.alg.Con)
algCone(teste)
cc<-algCone(teste)
class(cc)
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con
str(all.alg.Con)
unlist(all.alg.Con)
xc<-unlist(all.alg.Con)
str(xc)
View(xc)
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
all.alg.Con.status
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,
all.alg.Con.status$Year),
paste(spec$Site, spec$Year))]
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA
all.alg.Con.status
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
all.alg.Con.status$EigenRatio <- as.numeric(as.character(
all.alg.Con.status$EigenRatio))
all.alg.Con.status
str(all.alg.Con.status)
alg.con.mod <- lmer(AlgCon ~ SiteStatus +
(1|Site) + (1|Year),
data=all.alg.Con.status)
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
EigenRatio.mod.ypr <- lmer(EigenRatio ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(EigenRatio.mod.ypr)
all.alg.Con.status
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
## add ypr
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,
all.alg.Con.status$Year),
paste(spec$Site, spec$Year))]
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA
## change AlgCon to numeric (it is a factor for some reason..)
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
all.alg.Con.status$EigenRatio <- as.numeric(as.character(
all.alg.Con.status$EigenRatio))
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
EigenRatio.mod.ypr <- lmer(EigenRatio ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(EigenRatio.mod.ypr)
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')
source('plotting/src/predictIntervals.R')
source('plotting/src/CIplotting.R')
source('plotting/src/plotPanels_resilence.R')
source('src/initialize.R')
install.packages("igraph")
source('src/initialize.R')
install.packages("bipartite")
source('src/initialize.R')
save(alg.con.mod.ypr, all.alg.Con.status,
file="saved/mods/AlgCon2.Rdata")
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,
na.rm=TRUE),
to= max(all.alg.Con.status$ypr,
na.rm=TRUE),
length=10),
AlgCon=0)
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,
dd=dd.ypr.alg,
y="AlgCon",
family="gaussian")
plot.predict.ypr(new.dd=ypr.pi.alg,
ylabel="Robustness to perturbation",
dats=all.alg.Con.status,
y1="AlgCon",
extinction.method="perturb")
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,
na.rm=TRUE),
to= max(all.alg.Con.status$ypr,
na.rm=TRUE),
length=10),
EigenRatio=0)
dd.ypr.alg
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,
dd=dd.ypr.eigen,
y="EigenRatio",
family="gaussian")
library(lme4)
library(lmerTest)
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')
load('../../data/networks/allSpecimens.Rdata')
f.path <- "../changePoint/cptPeel/baci"
load(file=file.path(f.path, "graphs.Rdata"))
source('src/laplacian_functions.R')
sites <- sapply(strsplit(names(nets), "[.]"), function(x) x[1])
years <- sapply(strsplit(names(nets), "[.]"), function(x) x[2])
status.table <- table(spec$Site, spec$SiteStatus)
status.table <- as.data.frame(cbind(rownames(status.table),
colnames(status.table)[apply(status.table,
1, which.max)]))
colnames(status.table)<- c("Site", "SiteStatus")
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
## add status
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
## add ypr
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,
all.alg.Con.status$Year),
paste(spec$Site, spec$Year))]
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA
## change AlgCon to numeric (it is a factor for some reason..)
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
all.alg.Con.status$EigenRatio <- as.numeric(as.character(
all.alg.Con.status$EigenRatio))
all.alg.Con.status$Ncomp <- as.numeric(as.character(
all.alg.Con.status$Ncomp))
alg.con.mod <- lmer(AlgCon ~ SiteStatus +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod)
# Algebrain connectivity x Ypr
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
print(summary(alg.con.mod.ypr))
# Eigenvalue ratio  x Ypr
EigenRatio.mod.ypr <- lmer(EigenRatio ~ ypr +  Ncomp +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(EigenRatio.mod.ypr)
net.mets <- sapply(nets, function(x) sum(dim(empty(x))))
all.alg.Con.status
plot(all.alg.Con.status$AlgCon~all.alg.Con.status$Ncomp)
plot(all.alg.Con.status$AlgCon~all.alg.Con.status$SiteStatus)
lapply(nets, algCone)
do.call(cbind.data.frame, lapply(nets, algCone))
t(do.call(cbind.data.frame, lapply(nets, algCone)))
rede<-nets[[1]]
rede
sppPresent<- function(M) M[rowSums(abs(M)) != 0, colSums(abs(M)) != 0]
sppPresent(rede)
toLap(rede)
x<-toLap(rede)
algCone(x)
xx<-toLap(sppPreset(rede))
xx<-toLap(sppPresent(rede))
algCone(xx)
toLap<-function(intMat){
browser()
## removing spp that do not interact
intMat<-sppPresent(intMat)
## creating a square matrix
lap.mat<- matrix(0,dim(intMat)[1]+dim(intMat)[2],dim(intMat)[1]+dim(intMat)[2])
## filling the top corner
lap.mat[1:dim(intMat)[1], dim(intMat)[1]+1:dim(intMat)[2]]=-intMat
## filling the left low corner
lap.mat[dim(intMat)[1]+1:dim(intMat)[2],1:dim(intMat)[1]]=-t(intMat)
## fill the diagonals with the degrees
diag(lap.mat)=-apply(lap.mat,1,sum)
return(lap.mat)
}
xx<-toLap(sppPresent(rede))
intMat<-sppPresent(intMat)
intMat
lap.mat<- matrix(0,dim(intMat)[1]+dim(intMat)[2],dim(intMat)[1]+dim(intMat)[2])
lap.mat
lap.mat[1:dim(intMat)[1], dim(intMat)[1]+1:dim(intMat)[2]]=-intMat
lap.mat
lap.mat[dim(intMat)[1]+1:dim(intMat)[2],1:dim(intMat)[1]]=-t(intMat)
lap.mat
diag(lap.mat)=-apply(lap.mat,1,sum)
lap.mat
return(lap.mat)
toLap<-function(intMat){
## removing spp that do not interact
intMat<-sppPresent(intMat)
## creating a square matrix
lap.mat<- matrix(0,dim(intMat)[1]+dim(intMat)[2],dim(intMat)[1]+dim(intMat)[2])
## filling the top corner
lap.mat[1:dim(intMat)[1], dim(intMat)[1]+1:dim(intMat)[2]]=-intMat
## filling the left low corner
lap.mat[dim(intMat)[1]+1:dim(intMat)[2],1:dim(intMat)[1]]=-t(intMat)
## fill the diagonals with the degrees
diag(lap.mat)=-apply(lap.mat,1,sum)
return(lap.mat)
}
lap.mat
xx<-toLap(sppPresent(rede))
xx
algCone<-function(int.mat){
browser()
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
#browser()
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen[which(re.eigen!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(xx)
lapmat<-toLap(int.mat)
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
eigens
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
comps
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
re.eigen
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen[which(re.eigen!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
eigen.ratio<-round(alg.conn/min.eigen, 4)
eigen.ratio
all.alg.Con.status
rede
dim(rede)
rede<-sppPresent(rede)
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
plot(rede.i)
plot(rede.i)
all.alg.Con.status
rede<-nets[[2]]
rede<-sppPresent(rede)
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
i=2
rede<-nets[[i]]
rede<-sppPresent(rede)
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
all.alg.Con.status[i,]
i=3
rede<-nets[[i]]
rede<-sppPresent(rede)
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
all.alg.Con.status[i,]
x<-toLap(rede)
x
xx<-algCone(x)
toLap<-function(intMat){
## removing spp that do not interact
intMat<-sppPresent(intMat)
## creating a square matrix
lap.mat<- matrix(0,dim(intMat)[1]+dim(intMat)[2],dim(intMat)[1]+dim(intMat)[2])
## filling the top corner
lap.mat[1:dim(intMat)[1], dim(intMat)[1]+1:dim(intMat)[2]]=-intMat
## filling the left low corner
lap.mat[dim(intMat)[1]+1:dim(intMat)[2],1:dim(intMat)[1]]=-t(intMat)
## fill the diagonals with the degrees
diag(lap.mat)=-apply(lap.mat,1,sum)
return(lap.mat)
}
x<-toLap(rede)
xx<-algCone(x)
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
#browser()
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen[which(re.eigen!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
xx<-algCone(x)
xx
all.alg.Con.status[i,]
i=3
rede<-nets[[i]]
rede<-sppPresent(rede)
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
all.alg.Con.status[i,]
x<-toLap(rede)
algCone(x)
nets[[i]]
names(nets)
all.alg.Con.status[i,]
i=13
rede<-nets[[i]]
rede<-sppPresent(rede)
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
all.alg.Con.status[2,]
x<-toLap(rede)
algCone(x)
all.alg.Con.status[3,]
names(nets)
all.alg.Con.status
i=1
names(nets)[i]
rede<-nets[[i]]
rede<-sppPresent(rede)
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
all.alg.Con.status[7,]
x<-toLap(rede)
algCone(x)
all.alg.Con.status
names(nets)[i]
names(nets)
i=103
names(nets)[i]
rede<-nets[[i]]
rede<-sppPresent(rede)
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
all.alg.Con.status[103,]
x<-toLap(rede)
algCone(x)
View(rede)
rede<-rede[-5,]
View(rede)
colnames(rede)
rede<-rede[,-17]
rede.i<-graph_from_incidence_matrix(rede)
plot(rede.i)
algCone(x)
x<-toLap(rede)
algCone(x)

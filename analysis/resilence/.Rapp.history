library(lme4)
?glmer
?vegdist
library(vegan)
?vegdist
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
library(lmerTest)#
source("src/prepNets.R")#
extinction.method <- "abund"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
simExtinction <- function(nets,#
                          extinction.method,#
                          participant="lower"){#
  ext <- lapply(nets, second.extinct,#
                participant="lower",#
                method=extinction.method)#
#
  rob <- sapply(ext, robustness)#
  sites <- sapply(strsplit(names(rob), "[.]"), function(x) x[1])#
  years <- sapply(strsplit(names(rob), "[.]"), function(x) x[2])#
#
  dats <- data.frame(Site= sites,#
                     Year=years,#
                     Robustness=rob)#
  rownames(dats) <- NULL#
  dats$SiteStatus <- spec$SiteStatus[match(paste(dats$Site, dats$Year),#
                                           paste(spec$Site, spec$Year))]#
#
  dats$ypr <- spec$ypr[match(paste(dats$Site, dats$Year),#
                             paste(spec$Site, spec$Year))]#
  return(dats)#
}                        #
#
res <- simExtinction(nets, extinction.method)
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.pdf', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
library(lmerTest)#
source("src/prepNets.R")#
extinction.method <- "abund"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
simExtinction <- function(nets,#
                          extinction.method,#
                          participant="lower"){#
  ext <- lapply(nets, second.extinct,#
                participant="lower",#
                method=extinction.method)#
#
  rob <- sapply(ext, robustness)#
  sites <- sapply(strsplit(names(rob), "[.]"), function(x) x[1])#
  years <- sapply(strsplit(names(rob), "[.]"), function(x) x[2])#
#
  dats <- data.frame(Site= sites,#
                     Year=years,#
                     Robustness=rob)#
  rownames(dats) <- NULL#
  dats$SiteStatus <- spec$SiteStatus[match(paste(dats$Site, dats$Year),#
                                           paste(spec$Site, spec$Year))]#
#
  dats$ypr <- spec$ypr[match(paste(dats$Site, dats$Year),#
                             paste(spec$Site, spec$Year))]#
  return(dats)#
}                        #
#
res <- simExtinction(nets, extinction.method)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.pdf', extinction.method)))
head(res)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
extinction.method <- "abund"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.pdf', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
extinction.method <- "abund"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)
head(res)
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.pdf', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
extinction.method <- "abund"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.pdf', extinction.method)))#
#
## no change in robustness by site status#
summary(lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res))#
save(res, file=file.path(save.path,#
            sprintf('resilience_status_%s.pdf', extinction.method)))#
## no effect of ypr on robustness#
summary(lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),]))#
save(res, file=file.path(save.path,#
            sprintf('resilience_ypr_%s.pdf', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.pdf', extinction.method)))#
#
## no change in robustness by site status#
summary(lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res))#
save(res, file=file.path(save.path,#
            sprintf('resilience_status_%s.pdf', extinction.method)))#
## no effect of ypr on robustness#
summary(lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),]))#
save(res, file=file.path(save.path,#
            sprintf('resilience_ypr_%s.pdf', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
## no change in robustness by site status#
summary(lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res))#
save(res, file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata', extinction.method)))#
## no effect of ypr on robustness#
summary(lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),]))#
save(res, file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
## no change in robustness by site status#
summary(lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res))#
save(res, file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata', extinction.method)))#
## no effect of ypr on robustness#
summary(lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),]))#
save(res, file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata', extinction.method)))
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))
head(res)
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))
v
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
## no change in robustness by site status#
mod.status <- lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res)#
summary(mod.status)#
save(mod.status, file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata', extinction.method)))#
## no effect of ypr on robustness#
mod.ypr <- lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),])#
summary(mod.ypr)#
save(mod.ypr, file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata', extinction.method)))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)#
#
## **********************************************************#
## robustness#
## **********************************************************#
## simulation plant extinction#
#
res <- simExtinction(nets, extinction.method, spec)#
#
save(res, file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
## no change in robustness by site status#
mod.status <- lmer(Robustness ~ SiteStatus#
             + (1|Site) + (1|Year),#
             data=res)#
summary(mod.status)#
save(mod.status, file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata', extinction.method)))#
## no effect of ypr on robustness#
mod.ypr <- lmer(Robustness ~ ypr#
             + (1|Site) + (1|Year),#
             data=res[!is.na(res$ypr),])#
summary(mod.ypr)#
save(mod.ypr, file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata', extinction.method)))
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata',#
                    extinction.method)))
head(res)
dd.rob <- cbind(dd, Robustness=0)
dd.rob
rob.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.rob,#
                        y="Robustness",#
                        family="gaussian")
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata',#
                    extinction.method)))#
#
dd.rob <- cbind(dd, Robustness=0)#
#
rob.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.rob,#
                        y="Robustness",#
                        family="gaussian")
rob.pi <- predict.int(mod= ypr.mod,#
                        dd=dd.rob,#
                        y="Robustness",#
                        family="gaussian")
ls()
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_status_%s.Rdata',#
                    extinction.method)))#
#
dd.rob <- cbind(dd, Robustness=0)#
#
rob.pi <- predict.int(mod= ypr.mod,#
                        dd=dd.rob,#
                        y="Robustness",#
                        family="gaussian")
rob.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.rob,#
                        y="Robustness",#
                        family="gaussian")
ls()
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.rob <- cbind(dd, Robustness=0)#
#
rob.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.rob,#
                        y="Robustness",#
                        family="gaussian")
rob.pi
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.rob,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
ylabel_ "hello hello"
ylabel <- "hello hello"
gsub('[[:space:]]', '_', ylabel)
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness")
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "abund"#
#
load(file=file.path(save.path,#
            sprintf('resilience_%s.Rdata', extinction.method)))#
#
dd <- expand.grid(ypr=seq(from= min(res$ypr, na.rm=TRUE),#
                          to= max(res$ypr, na.rm=TRUE),#
                          length=10))#
#
## ************************************************************#
## nodf#
## ************************************************************#
load(file=file.path(save.path,#
            sprintf('mods/resilience_ypr_%s.Rdata',#
                    extinction.method)))#
#
dd.ypr <- cbind(dd, Robustness=0)#
#
ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y="Robustness",#
                        family="gaussian")#
#
plot.predict.ypr(new.dd=ypr.pi,#
                 ylabel="Robustness",#
                 dats=res,#
                 y1="Robustness",#
                 extinction.method=extinction.method)
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)
specs <- calcSpec(nets, spec)
save(specs, file=file.path(save.path, 'specs.Rdata'))
ys <- c("proportional.generality", "d", "degree")#
#
## full models#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste("ypr"#
                         "(1|Site)",#
                          "(1|GenusSpecies)"#
                         sep="+")))#
})
## full models#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste("ypr"#
                         "(1|Site)",#
                          "(1|GenusSpecies)"#
                         sep="+")))#
})
## full models#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste("ypr"#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste("ypr",#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})
formulars
formulas
mod.pols <- lapply(formulas, function(x){#
  lmer(x, family="Gaussian",#
       data=specs[specs$speciesType == "pollinator",]#
}
mod.pols <- lapply(formulas, function(x){#
  lmer(x, family="Gaussian",#
       data=specs[specs$speciesType == "pollinator",])#
}
)
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
}
)
mod.pols[[1]]
mod.pols[[2]]
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
#
names(mod.pols) <- names(mod.plants) <- ys
mod.pols[["d"]]
lapply(mod.pols, summary)
mod.plants
save(mod.pols, file="saved/mods/spec_pols")#
save(mod.plants, file="saved/mods/spec_plants")
save(specs, file=file.path(save.path, 'specs.Rdata'))
save(mod.pols, file="saved/mods/spec_pols.Rdata")#
save(mod.plants, file="saved/mods/spec_plants.Rdata")
## **********************************************************#
## species importance#
## **********************************************************#
xvar <- "ypr"#
#
specs <- calcSpec(nets, spec)#
#
save(specs, file=file.path(save.path, 'specs.Rdata'))#
#
ys <- c("proportional.generality", "d", "degree")#
#
formulas.ypr <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})
## linear models#
xvar <- "ypr"#
ys <- c("proportional.generality", "d", "degree")#
load(file=file.path(save.path, 'specs.Rdata'))#
#
formulas.ypr <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})
formulas
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))#
#
save(mod.plantss, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
save(mod.plants, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
## linear models#
xvar <- "SiteStatus"#
ys <- c("proportional.generality", "d", "degree")#
load(file=file.path(save.path, 'specs.Rdata'))#
#
formulas.ypr <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})#
#
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))#
#
save(mod.plants, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
## linear models#
xvar <- "SiteStatus"#
ys <- c("proportional.generality", "d", "degree")#
load(file=file.path(save.path, 'specs.Rdata'))#
#
formulas.ypr <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})#
#
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))#
#
save(mod.plants, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
xvar
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')
xvar <- "SiteStatus"#
ys <- c("proportional.generality", "d", "degree")#
load(file=file.path(save.path, 'specs.Rdata'))
xvar
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))#
#
save(mod.plants, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
## **********************************************************#
## species importance#
## **********************************************************#
specs <- calcSpec(nets, spec)#
save(specs, file=file.path(save.path, 'specs.Rdata'))
rm(list=ls())#
setwd('~/Dropbox/hedgerow_assembly/analysis/resilence')#
source('src/initialize.R')#
#
## either "abund" or "degree"#
extinction.method <- "degree"#
#
## create pp matrix for each site, year#
nets <- break.net(spec)
specs <- calcSpec(nets, spec)#
save(specs, file=file.path(save.path, 'specs.Rdata'))#
#
## linear models#
xvar <- "SiteStatus"#
ys <- c("proportional.generality", "d", "degree")#
load(file=file.path(save.path, 'specs.Rdata'))#
#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})#
#
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))#
#
save(mod.plants, file=file.path(save.path,#
            sprintf('mods/specs_%s.Rdata', xvar)))
rm(list=ls())#
source('plotting/src/predictIntervals.R')#
source('plotting/src/CIplotting.R')#
source('plotting/src/plotPanels.R')#
source('src/initialize.R')
load(file=file.path(save.path, 'specialization.Rdata'))
load(file=file.path(save.path, 'specs.Rdata'))
head(specs)
dd <- expand.grid(ypr=seq(from= min(specs$ypr, na.rm=TRUE),#
                          to= max(specs$ypr, na.rm=TRUE),#
                          length=10))
head(dd)
## ************************************************************#
## specialization#
## ************************************************************#
load(file=file.path(save.path, 'specs.Rdata'))#
ys <- c("proportional.generality", "d", "degree")#
ylabs <- c("Proportional Generality", "Specialization (d')", "Degree")#
#
dd <- expand.grid(ypr=seq(from= min(specs$ypr, na.rm=TRUE),#
                          to= max(specs$ypr, na.rm=TRUE),#
                          length=10))#
#
for(i in 1:length(ys)){#
  dd.ypr <- cbind(dd, print(ys[i])=0)#
#
  ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y=ys[i],#
                        family="gaussian")#
#
  plot.predict.ypr(new.dd=ypr.pi,#
                   ylabel=ylabs[i],#
                   dats=specs,#
                   y1=ys[i],#
                   extinction.method=NA)#
}
for(i in 1:length(ys)){#
  dd.ypr <- cbind(dd, 0)#
  colnames(dd.ypr) <- c("ypr", ys[i])#
#
  ypr.pi <- predict.int(mod= mod.ypr,#
                        dd=dd.ypr,#
                        y=ys[i],#
                        family="gaussian")#
#
  plot.predict.ypr(new.dd=ypr.pi,#
                   ylabel=ylabs[i],#
                   dats=specs,#
                   y1=ys[i],#
                   extinction.method=NA)#
}
## linear models#
load(file=file.path(save.path, 'specs.Rdata'))#
## SiteStatus or ypr#
xvar <- "SiteStatus"#
#
## anything outputted by specieslevel#
ys <- c("proportional.generality", "d", "degree")#
#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})#
#
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, file=file.path(save.path,#
            sprintf('mods/pols_specs_%s.Rdata', xvar)))#
#
save(mod.plants, file=file.path(save.path,#
            sprintf('mods/plants_specs_%s.Rdata', xvar)))
## linear models#
load(file=file.path(save.path, 'specs.Rdata'))#
## SiteStatus or ypr#
xvar <- "ypr"#
#
## anything outputted by specieslevel#
ys <- c("proportional.generality", "d", "degree")#
#
formulas <-lapply(ys, function(x) {#
  as.formula(paste(x, "~",#
                   paste(xvar,#
                         "(1|Site)",#
                          "(1|GenusSpecies)",#
                         sep="+")))#
})#
#
mod.pols <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "pollinator",])#
})#
#
mod.plants <- lapply(formulas, function(x){#
  lmer(x,#
       data=specs[specs$speciesType == "plant",])#
})#
names(mod.pols) <- names(mod.plants) <- ys#
lapply(mod.plants, summary)#
lapply(mod.pols, summary)#
#
save(mod.pols, file=file.path(save.path,#
            sprintf('mods/pols_specs_%s.Rdata', xvar)))#
#
save(mod.plants, file=file.path(save.path,#
            sprintf('mods/plants_specs_%s.Rdata', xvar)))
pp <- c("plants", "pols")#
for(j in 1:pp){#
  load(file=file.path(save.path,#
         sprintf('mods/%s_specs_ypr_%s.Rdata',#
                 j)))#
#
  for(i in 1:length(ys)){#
    dd.ypr <- cbind(dd, 0)#
    colnames(dd.ypr) <- c("ypr", ys[i])#
#
    ypr.pi <- predict.int(mod= mod.ypr,#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")#
#
    plot.predict.ypr(new.dd=ypr.pi,#
                     ylabel=ylabs[i],#
                     dats=specs,#
                     y1=ys[i],#
                     extinction.method=j)#
  }#
}
pp <- c("plants", "pols")#
for(j in pp){#
  load(file=file.path(save.path,#
         sprintf('mods/%s_specs_ypr_%s.Rdata',#
                 j)))#
#
  for(i in 1:length(ys)){#
    dd.ypr <- cbind(dd, 0)#
    colnames(dd.ypr) <- c("ypr", ys[i])#
#
    ypr.pi <- predict.int(mod= mod.ypr,#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")#
#
    plot.predict.ypr(new.dd=ypr.pi,#
                     ylabel=ylabs[i],#
                     dats=specs,#
                     y1=ys[i],#
                     extinction.method=j)#
  }#
}
dd <- expand.grid(ypr=seq(from= min(specs$ypr, na.rm=TRUE),#
                          to= max(specs$ypr, na.rm=TRUE),#
                          length=10))#
#
pp <- c("plants", "pols")#
for(j in pp){#
  load(file=file.path(save.path,#
         sprintf('mods/%s_specs_ypr.Rdata',#
                 j)))#
#
  for(i in 1:length(ys)){#
    dd.ypr <- cbind(dd, 0)#
    colnames(dd.ypr) <- c("ypr", ys[i])#
#
    ypr.pi <- predict.int(mod= mod.ypr,#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")#
#
    plot.predict.ypr(new.dd=ypr.pi,#
                     ylabel=ylabs[i],#
                     dats=specs,#
                     y1=ys[i],#
                     extinction.method=j)#
  }#
}
ls()
j <- "pols"
paste("mod", j, sep="."),
paste("mod", j, sep=".")
pp <- c("plants", "pols")#
for(j in pp){#
  load(file=file.path(save.path,#
         sprintf('mods/%s_specs_ypr.Rdata',#
                 j)))#
#
  for(i in 1:length(ys)){#
    dd.ypr <- cbind(dd, 0)#
    colnames(dd.ypr) <- c("ypr", ys[i])#
#
    ypr.pi <- predict.int(mod= paste("mod", j, sep="."),#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")#
#
    plot.predict.ypr(new.dd=ypr.pi,#
                     ylabel=ylabs[i],#
                     dats=specs,#
                     y1=ys[i],#
                     extinction.method=j)#
  }#
}
pp <- c("plants", "pols")#
for(j in pp){#
  load(file=file.path(save.path,#
         sprintf('mods/%s_specs_ypr.Rdata',#
                 j)))#
#
  for(i in 1:length(ys)){#
    browser()#
    dd.ypr <- cbind(dd, 0)#
    colnames(dd.ypr) <- c("ypr", ys[i])#
#
    ypr.pi <- predict.int(mod= paste("mod", j, sep="."),#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")#
#
    plot.predict.ypr(new.dd=ypr.pi,#
                     ylabel=ylabs[i],#
                     dats=specs,#
                     y1=ys[i],#
                     extinction.method=j)#
  }#
}
dd.ypr <- cbind(dd, 0)
dd.ypr
colnames(dd.ypr) <- c("ypr", ys[i])
dd.ypr
v
ypr.pi <- predict.int(mod= paste("mod", j, sep="."),#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")
head(dd.ypr)
dd.ypr <- data.frame(cbind(dd, 0))#
    colnames(dd.ypr) <- c("ypr", ys[i])
ypr.pi <- predict.int(mod= paste("mod", j, sep="."),#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")
Q
length=10))#
#
pp <- c("plants", "pols")#
for(j in pp){#
  load(file=file.path(save.path,#
         sprintf('mods/%s_specs_ypr.Rdata',#
                 j)))#
#
  for(i in 1:length(ys)){#
    browser()#
    dd.ypr <- data.frame(cbind(dd, 0))#
    colnames(dd.ypr) <- c("ypr", ys[i])#
#
    ypr.pi <- predict.int(mod= paste("mod", j, sep="."),#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")#
#
    plot.predict.ypr(new.dd=ypr.pi,#
                     ylabel=ylabs[i],#
                     dats=specs,#
                     y1=ys[i],#
                     extinction.method=j)#
  }#
}
dd.ypr <- cbind(dd, 0)
class(dd.ypr)
colnames(dd.ypr) <- c("ypr", ys[i])
dd.ypr
paste("mod", j, sep=".")
sprintf('mod.%s', j),
sprintf('mod.%s', j)
mod.plants
mods <- list(mod.pol, mod.plants)
mods <- list(mod.pols, mod.plants)
mods
ypr.pi <- predict.int(mod= mods[[j]][[ys]],#
                          dd=dd.ypr,#
                          y=ys[i],#
                          family="gaussian")
mods[[j]]
